plugins {
    id 'net.saliman.properties' version '1.4.6'
    id 'com.marklogic.ml-data-hub' version '2.0.2'
}

repositories {
  jcenter()
  maven { url "https://developer.marklogic.com/maven2/" }

  ivy {
    url 'http://download.geonames.org/'
    layout 'pattern', {
      artifact '/[organisation]/dump/[module].[ext]'
    }
  }
}

configurations {
  mlcp
  data
}

dependencies {
  mlcp "com.marklogic:mlcp:9.0.2"
  mlcp files("lib")
  data "export:cities5000:*@zip"
}

task createXmlEntity(type: com.marklogic.gradle.task.CreateEntityTask) {
  doFirst { project.ext.entityName = "input-xml" }
}

task createJsonEntity(type: com.marklogic.gradle.task.CreateEntityTask) {
  doFirst { project.ext.entityName = "input-json" }
}

task createInputXmlFlow(type: com.marklogic.gradle.task.CreateInputFlowTask) {
  mustRunAfter createXmlEntity

  doFirst {
    project.ext.entityName = "input-xml"
    project.ext.flowName = "raw-input-xml"
    project.ext.dataFormat = "xml"
  }
}

task createInputXmlXqyFlow(type: com.marklogic.gradle.task.CreateInputFlowTask) {
  mustRunAfter createXmlEntity

  doFirst {
    project.ext.entityName = "input-xml"
    project.ext.flowName = "raw-input-xml-xqy"
    project.ext.dataFormat = "xml"
    project.ext.pluginFormat = "xqy"
  }
}

task createInputJsonFlow(type: com.marklogic.gradle.task.CreateInputFlowTask) {
  mustRunAfter createJsonEntity

  doFirst {
    project.ext.entityName = "input-json"
    project.ext.flowName = "raw-input-json"
    project.ext.dataFormat = "json"
  }
}

task createEntityInput() {
  mustRunAfter mlDeploy

  dependsOn createXmlEntity
  dependsOn createJsonEntity
  dependsOn createInputXmlFlow
  dependsOn createInputXmlXqyFlow
  dependsOn createInputJsonFlow

  finalizedBy mlLoadModules
  doLast { println "created XML and JSON entities and input flows" }
}

task getInputData() {
  def headers = [
    "geonameid",
    "name",
    "asciiname",
    "alternatenames",
    "latitude",
    "longitude",
    "feature class",
    "feature code",
    "country code",
    "cc2",
    "admin1 code",
    "admin2 code",
    "admin3 code",
    "admin4 code",
    "population",
    "elevation",
    "dem",
    "timezone",
    "modification date"
  ]

  def zipPath = project.configurations.data.find {
    it.name.startsWith("cities5000")
  }

  doFirst {
    mkdir "./input/"
  }
  doLast {
    def zipFile = zipTree(file(zipPath)).getFiles().first()
    def combined = new File('./input/raw.txt')
    combined.text = headers.join("\t") + "\n" + zipFile.text
  }
}

task prepareMlcpLog() {
  mkdir "./lib/"
  def props = new File('./lib/log4j.properties')
  props.text = [
    "log4j.rootLogger=INFO, stdout",
    "log4j.appender.stdout=org.apache.log4j.ConsoleAppender",
    "log4j.appender.stdout.Target=System.out",
    "log4j.appender.stdout.layout=org.apache.log4j.PatternLayout",
    "log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n"
  ].join("\n")
}

task loadJson(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter createInputXmlFlow
  mustRunAfter mlLoadModules
  mustRunAfter getInputData

  doFirst {
    database = mlStagingDbName
    port = mlStagingPort.toInteger()
  }
  classpath = configurations.mlcp
  command = "IMPORT"
  input_file_path = "./input/raw.txt"
  delimiter = "\t"
  input_file_type = "delimited_text"
  document_type = "json"
  output_uri_prefix = "/city/"
  output_uri_suffix = ".json"
  output_collections = "input-json"
  transform_module = "/com.marklogic.hub/mlcp-flow-transform.xqy"
  transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
  transform_param =  "entity-name=input-json,flow-name=raw-input-json"
  thread_count = 4
}

task loadXml(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter createInputXmlFlow
  mustRunAfter mlLoadModules
  mustRunAfter getInputData

  doFirst {
    database = mlStagingDbName
    port = mlStagingPort.toInteger()
  }
  classpath = configurations.mlcp
  command = "IMPORT"
  input_file_path = "./input/raw.txt"
  delimiter = "\t"
  input_file_type = "delimited_text"
  document_type = "xml"
  output_uri_prefix = "/city/"
  output_uri_suffix = ".xml"
  output_collections = "input-xml"
  transform_module = "/com.marklogic.hub/mlcp-flow-transform.xqy"
  transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
  transform_param =  "entity-name=input-xml,flow-name=raw-input-xml"
  thread_count = 4
}

task loadXmlXqy(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter createInputXmlXqyFlow
  mustRunAfter mlLoadModules
  mustRunAfter getInputData

  doFirst {
    database = mlStagingDbName
    port = mlStagingPort.toInteger()
  }
  classpath = configurations.mlcp
  command = "IMPORT"
  input_file_path = "./input/raw.txt"
  delimiter = "\t"
  input_file_type = "delimited_text"
  document_type = "xml"
  output_uri_prefix = "/city/"
  output_uri_suffix = ".xml"
  output_collections = "input-xml-xqy"
  transform_module = "/com.marklogic.hub/mlcp-flow-transform.xqy"
  transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
  transform_param =  "entity-name=input-xml,flow-name=raw-input-xml-xqy"
  thread_count = 4
}

task loadInputData {
  dependsOn getInputData
  dependsOn loadJson
  dependsOn loadXml
  dependsOn loadXmlXqy
}

task createHarmonizeXmlXqy(type: com.marklogic.gradle.task.CreateHarmonizeFlowTask) {
  mustRunAfter createEntityInput

  doFirst {
    project.ext.entityName = "input-xml"
    project.ext.flowName = "harmonize-xml-xqy"
    project.ext.pluginFormat = "xqy"
    project.ext.dataFormat = "xml"
  }
}

task createHarmonizeXmlSjs(type: com.marklogic.gradle.task.CreateHarmonizeFlowTask) {
  mustRunAfter createEntityInput

  doFirst {
    project.ext.entityName = "input-xml"
    project.ext.flowName = "harmonize-xml-sjs"
    project.ext.pluginFormat = "sjs"
    project.ext.dataFormat = "xml"
  }
}

task createHarmonizeJsonXqy(type: com.marklogic.gradle.task.CreateHarmonizeFlowTask) {
  mustRunAfter createEntityInput

  doFirst {
    project.ext.entityName = "input-json"
    project.ext.flowName = "harmonize-json-xqy"
    project.ext.pluginFormat = "xqy"
    project.ext.dataFormat = "json"
  }
}

task createHarmonizeJsonSjs(type: com.marklogic.gradle.task.CreateHarmonizeFlowTask) {
  mustRunAfter createEntityInput

  doFirst {
    project.ext.entityName = "input-json"
    project.ext.flowName = "harmonize-json-sjs"
    project.ext.pluginFormat = "sjs"
    project.ext.dataFormat = "json"
  }
}

task createHarmonizeFlows() {
  dependsOn createHarmonizeXmlXqy
  dependsOn createHarmonizeXmlSjs
  dependsOn createHarmonizeJsonXqy
  dependsOn createHarmonizeJsonSjs
  finalizedBy mlLoadModules
}

task runHarmonizeXmlXqy(type: com.marklogic.gradle.task.RunFlowTask) {
  mustRunAfter loadInputData
  mustRunAfter createHarmonizeXmlXqy

  entityName = "input-xml"
  flowName = "harmonize-xml-xqy"
}

task runHarmonizeXmlSjs(type: com.marklogic.gradle.task.RunFlowTask) {
  mustRunAfter loadInputData
  mustRunAfter createHarmonizeXmlSjs

  entityName = "input-xml"
  flowName = "harmonize-xml-sjs"
}

task runHarmonizeJsonXqy(type: com.marklogic.gradle.task.RunFlowTask) {
  mustRunAfter loadInputData
  mustRunAfter createHarmonizeJsonXqy

  entityName = "input-json"
  flowName = "harmonize-json-xqy"
}

task runHarmonizeJsonSjs(type: com.marklogic.gradle.task.RunFlowTask) {
  mustRunAfter loadInputData
  mustRunAfter createHarmonizeJsonSjs

  entityName = "input-json"
  flowName = "harmonize-json-sjs"
}

task allHarmonizeFlows() {
  dependsOn createHarmonizeFlows
  dependsOn runHarmonizeXmlXqy
  dependsOn runHarmonizeXmlSjs
  dependsOn runHarmonizeJsonXqy
  dependsOn runHarmonizeJsonSjs
}

task doAll() {
  dependsOn mlDeploy
  dependsOn createEntityInput
  dependsOn loadInputData
  dependsOn allHarmonizeFlows
}

import java.util.concurrent.TimeUnit
class TimingsListener implements TaskExecutionListener, BuildListener {
  private long startTime
  private timings = []

  @Override
  void beforeExecute(Task task) {
    startTime = System.nanoTime()
  }

  @Override
  void afterExecute(Task task, TaskState taskState) {
    timings.add([
      TimeUnit.MILLISECONDS.convert(System.nanoTime() -
         startTime, TimeUnit.NANOSECONDS),
      task.path
    ])
  }

  @Override
  void buildFinished(BuildResult result) {
    println "Task timings:"
    for (timing in timings)
      printf "%10.3fs  %s\n", (timing[0] / 1000), timing[1]
  }

  @Override
  void buildStarted(Gradle gradle) {}
  @Override
  void projectsEvaluated(Gradle gradle) {}
  @Override
  void projectsLoaded(Gradle gradle) {}
  @Override
  void settingsEvaluated(Settings settings) {}
}

if (project.hasProperty('profile')) {
  gradle.addListener new TimingsListener()
}