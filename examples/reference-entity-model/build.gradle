buildscript {
    repositories {
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        if (project.hasProperty("testing")) {
            classpath "com.marklogic:ml-data-hub:6.0.0"
        } else {
            classpath "com.marklogic:ml-data-hub:5.7.1"
        }
    }
}

plugins {
    id "net.saliman.properties" version "1.5.1"
    id "java"
}
apply plugin: "com.marklogic.ml-data-hub"

repositories {
    maven {url "https://developer.marklogic.com/maven2/"}
    mavenCentral()
    if (project.hasProperty("testing")) {
        mavenLocal()
    }
}

configurations {
    mlcp
}

dependencies {
    // Ensures that the marklogic-unit-test modules are loaded into the modules database when the application is deployed
    mlBundle "com.marklogic:marklogic-unit-test-modules:1.1.0"

    // Makes the DHF JUnit5 library available for tests
    if (project.hasProperty("testing")) {
        testImplementation "com.marklogic:marklogic-data-hub-junit5:6.0.0"
    } else {
        testImplementation "com.marklogic:marklogic-data-hub-junit5:5.7.1"
    }

    mlcp "com.marklogic:mlcp:10.0.9"
    mlcp files("lib")
}

test {
    useJUnitPlatform()
}

task importZipCodes(type: com.marklogic.gradle.task.RunFlowTask, group: "Run flow") {
    description = "Imports a document for each zip code defined in the zipCodes.zip file. These are used by the mapCustomersJSON mapping step."
    flowName = "LoadSupportingModules"
    steps = ["2"]
}

task importProductConcepts(type: com.marklogic.gradle.task.RunFlowTask, group: "Run flow") {
    description = "Imports a document for each zip code defined in the zipCodes.zip file. These are used by the mapCustomersJSON mapping step."
    flowName = "LoadSupportingModules"
    steps = ["1"]

}

["CurateCustomerJSON", "CurateCustomerXML", "CurateNamespacedCustomers",
 "CurateCustomerWithRelatedEntitiesJSON", "CurateCustomerWithRelatedEntitiesXML"].each {theFlowName ->
    task "run${theFlowName}" (type: com.marklogic.gradle.task.RunFlowTask, group: "Run flow") {
        description = "Run the ingestion and mapping steps for flow ${theFlowName}"
        flowName = theFlowName
        steps = ["1", "2"]
    }
}

task runFlows {
    dependsOn {
        tasks.findAll { task -> "Run flow".equals(task.group) }
    }
}

task mergeJsonCustomers(type: com.marklogic.gradle.task.RunFlowTask) {
    flowName = "CurateCustomerJSON"
    steps = ["3", "4"]
}

mlDeploy.finalizedBy importZipCodes, importProductConcepts, runFlows, mergeJsonCustomers
runFlows.mustRunAfter importZipCodes, importProductConcepts
mergeJsonCustomers.mustRunAfter runFlows


// The following config is used for manual ad hoc testing of loading data via MLCP and the DHF MLCP transform
task importCustomersViaMlcp(type: com.marklogic.gradle.task.MlcpTask) {
    description = "Example of using the MLCP DHF transform to load documents via MLCP"
    classpath = configurations.mlcp
    command = "IMPORT"
    port = 8010
    output_collections = "MlcpCustomer"
    input_file_path = "input/json"
    output_permissions = "data-hub-common,read,data-hub-common,update"
    transform_namespace = "DataHub"
    transform_module = "/data-hub/transforms/mlcp-flow-transform.xqy"
    transform_param = "flow-name=CurateCustomerJSON,step=1"
}

task exportCustomers(type: com.marklogic.gradle.task.MlcpTask) {
    description = "Example of using MLCP via Gradle via a minimally-privileged user to export data"
	classpath = configurations.mlcp
	command = "EXPORT"
	port = 8011
	username = "common-user"
	password = testPassword
	output_file_path = "build/export"
	collection_filter = "Customer"
}
