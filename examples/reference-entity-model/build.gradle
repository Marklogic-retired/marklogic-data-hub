buildscript {
    repositories {
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }
    dependencies {
        if (project.hasProperty("testing")) {
            classpath "com.marklogic:ml-data-hub:5.5-SNAPSHOT"
        } else {
            classpath "gradle.plugin.com.marklogic:ml-data-hub:5.4.0"
        }
    }
}

plugins {
    id "net.saliman.properties" version "1.5.1"
    id "java"
}
apply plugin: "com.marklogic.ml-data-hub"

repositories {
    mavenCentral()
    jcenter() // Needed for marklogic-unit-test-modules
    if (project.hasProperty("testing")) {
        mavenLocal()
    }
}

configurations {
    mlcp
}

dependencies {
    mlcp "com.marklogic:mlcp:10.0.6.1"
    mlcp files("lib")
}

dependencies {
    // Ensures that the marklogic-unit-test modules are loaded into the modules database when the application is deployed
    mlBundle "com.marklogic:marklogic-unit-test-modules:1.0.0"

    // Makes the DHF JUnit5 library available for tests
    testImplementation "com.marklogic:marklogic-data-hub-junit5:5.5-SNAPSHOT"

    // Adds logging support for tests
    testImplementation "ch.qos.logback:logback-classic:1.2.3"

    mlcp "com.marklogic:mlcp:10.0.6.1"
    mlcp files("lib")
}

test {
    useJUnitPlatform()
}

task importZipCodes(type: com.marklogic.gradle.task.MlcpTask) {
    description = "Imports a document for each zip code defined in the zipCodes.zip file. These are used by the mapCustomersJSON mapping step."
	classpath = configurations.mlcp
	command = "IMPORT"
    port = 8010
    input_file_path = "input/zipCodes/zipCodes.zip"
	input_file_type = "delimited_text"
    input_compressed = true
    document_type = "json"
    output_uri_prefix = "/zipCode/"
    output_uri_suffix = ".json"
	output_permissions = "data-hub-common,read,data-hub-developer,update"
    output_collections = "zipCode"
    thread_count = 16
    transform_module = "/custom-modules/mlcp/zipCodeTransform.sjs"
	delimiter = ","
}

["CurateCustomerJSON", "CurateCustomerXML", "CurateNamespacedCustomers",
 "CurateCustomerWithRelatedEntitiesJSON", "CurateCustomerWithRelatedEntitiesXML"].each {theFlowName ->
    task "run${theFlowName}" (type: com.marklogic.gradle.task.RunFlowTask, group: "Run flow") {
        description = "Run the ingestion and mapping steps for flow ${theFlowName}"
        flowName = theFlowName
        steps = ["1", "2"]
    }
}

task runFlows {
    dependsOn {
        tasks.findAll { task -> "Run flow".equals(task.group) }
    }
}

task mergeJsonCustomers(type: com.marklogic.gradle.task.RunFlowTask) {
    flowName = "CurateCustomerJSON"
    steps = ["3", "4"]
}

mlDeploy.finalizedBy importZipCodes, runFlows, mergeJsonCustomers
runFlows.mustRunAfter importZipCodes
mergeJsonCustomers.mustRunAfter runFlows


// The following config is used for manual ad hoc testing of loading data via MLCP and the DHF MLCP transform
task importCustomersViaMlcp(type: com.marklogic.gradle.task.MlcpTask) {
    description = "Example of using the MLCP DHF transform to load documents via MLCP"
    classpath = configurations.mlcp
    command = "IMPORT"
    port = 8010
    output_collections = "MlcpCustomer"
    input_file_path = "input/json"
    output_permissions = "data-hub-common,read,data-hub-common,update"
    transform_module = "/data-hub/5/transforms/mlcp-flow-transform.sjs"
    transform_param = "flow-name=CurateCustomerJSON,step=1"
}

task exportCustomers(type: com.marklogic.gradle.task.MlcpTask) {
    description = "Example of using MLCP via Gradle via a minimally-privileged user to export data"
	classpath = configurations.mlcp
	command = "EXPORT"
	port = 8011
	username = "common-user"
	password = testPassword
	output_file_path = "build/export"
	collection_filter = "Customer"
}
