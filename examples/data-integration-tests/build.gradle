buildscript {
  repositories {
    mavenLocal()
    maven {url 'http://developer.marklogic.com/maven2/'}
  }
  dependencies {
    classpath "com.marklogic:ml-data-hub:3.0-S"
  }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'

    // This plugin allows you to create different environments
    // for your gradle deploy. Each environment is represented
    // by a gradle-${env}.properties file
    // See https://github.com/stevesaliman/gradle-properties-plugin
    // specify the env on the command line with:
    // gradle -PenvironmentName=x ...
    //id 'net.saliman.properties' version '1.4.6'

    // This gradle plugin extends the ml-gradle plugin with
    // commands that make the Data Hub Framework do its magic

    id "org.jetbrains.kotlin.jvm" version "1.2.21"
}

apply plugin: 'kotlin'
apply plugin: 'com.marklogic.ml-data-hub'
apply plugin: 'com.marklogic.ml-gradle'

repositories {
    mavenLocal()
    jcenter()
    maven {url 'http://developer.marklogic.com/maven2/'}
}

dependencies {
    // this allows you to write custom java code that depends
    // on the Data Hub Framework library
    compile 'com.marklogic:marklogic-data-hub:3.0-S'
    compile 'com.marklogic:marklogic-xcc:9.0.4'
    compile 'com.marklogic:marklogic-client-api:4.0.3.1'
    // prototyping with kotlin tests
    compile 'io.github.microutils:kotlin-logging:1.4.6'
    compile "org.jetbrains.kotlin:kotlin-stdlib"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.0"
    compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-xml-provider', version: '2.9.0'
    compile 'io.github.microutils:kotlin-logging:1.4.6'

}

task loadSampleData(type: JavaExec) {
    main = 'com.marklogic.hub.mapping.SampleDataLoader'
    classpath = sourceSets.main.runtimeClasspath
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
