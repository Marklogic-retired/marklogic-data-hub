plugins {
    // this plugin lets you create properties files
    // for multiple environments... like dev, qa, prod
    id 'net.saliman.properties' version '1.4.6'

    // this is the Data Hub gradle plugin
    // it includes ml-gradle. This plugin is what lets you
    // run DHF (Data Hub) tasks from the
    // command line
    id 'com.marklogic.ml-data-hub' version '4.0.3'
}

ext {
    // causes a temporary cert to be generated. This is necessary for MarkLogic
    // to allow SSL connections on your AppServer. The alternative is to create a
    // proper signed cert
    def command = new com.marklogic.appdeployer.command.security.GenerateTemporaryCertificateCommand()
    command.setTemplateIdOrName("dhf-cert")
    command.setCommonName("localhost")
    command.setValidFor(365)
    mlAppDeployer.commands.add(command)
}

// Enables SSL on the builtin servers
task enableSSL(type: com.marklogic.gradle.task.MarkLogicTask) {
    doFirst {
        def manageConfig = getProject().property("mlManageConfig")
        manageConfig.setScheme("http")
        manageConfig.setConfigureSimpleSsl(false)
        manageConfig.setAdminScheme("http")
        manageConfig.setAdminConfigureSimpleSsl(false)

        def adminConfig = getProject().property("mlAdminConfig")
        adminConfig.setScheme("http")
        adminConfig.setConfigureSimpleSsl(false)

        def manageClient = new com.marklogic.mgmt.ManageClient(manageConfig)
        def adminManager = new com.marklogic.mgmt.admin.AdminManager(adminConfig)

        def certManager = new com.marklogic.mgmt.resource.security.CertificateTemplateManager(manageClient)
        certManager.save(adminCert())

        def gtcc = new com.marklogic.appdeployer.command.security.GenerateTemporaryCertificateCommand();
        gtcc.setTemplateIdOrName("admin-cert");
        gtcc.setCommonName("localhost");
        gtcc.execute(new com.marklogic.appdeployer.command.CommandContext(getAppConfig(), manageClient, adminManager));

        adminConfig = getProject().property("mlAdminConfig")
        adminConfig.setScheme("https")
        adminConfig.setConfigureSimpleSsl(true)
        adminManager = new com.marklogic.mgmt.admin.AdminManager(adminConfig)

        manageClient.putJson("/manage/v2/servers/Admin/properties?group-id=Default", '{"ssl-certificate-template": "admin-cert"}')
        adminManager.waitForRestart()
        manageClient.putJson("/manage/v2/servers/App-Services/properties?group-id=Default", '{"ssl-certificate-template": "admin-cert"}')
        adminManager.waitForRestart()
        manageClient.putJson("/manage/v2/servers/Manage/properties?group-id=Default", '{"ssl-certificate-template": "admin-cert"}')
        adminManager.waitForRestart()
    }
}

// Disables SSL on the builtin servers
task disableSSL(type: com.marklogic.gradle.task.MarkLogicTask) {
    doFirst {
        // for ML9. comment out if using ml8
        def manageClient = getManageClient()
        manageClient.putJson("/manage/v2/servers/Admin/properties?group-id=Default", '{"ssl-certificate-template": ""}')
        manageClient.putJson("/manage/v2/servers/App-Services/properties?group-id=Default", '{"ssl-certificate-template": ""}')
        manageClient.putJson("/manage/v2/servers/Manage/properties?group-id=Default", '{"ssl-certificate-template": ""}')

        // for ML8 do this instead
        // def appConfig = getAppConfig()
        // disableSSL(appConfig, "Admin")
        // disableSSL(appConfig, "Manage")
        // disableSSL(appConfig, "App-Services")

        def adminConfig = getProject().property("mlAdminConfig")
        adminConfig.setScheme("http")
        adminConfig.setConfigureSimpleSsl(false)
        def adminManager = new com.marklogic.mgmt.admin.AdminManager(adminConfig)
        adminManager.waitForRestart()

        def manageConfig = getProject().property("mlManageConfig")
        manageConfig.setScheme("http")
        manageConfig.setConfigureSimpleSsl(false)
        def mgClient = new com.marklogic.mgmt.ManageClient(manageConfig)

        def certManager = new com.marklogic.mgmt.resource.security.CertificateTemplateManager(mgClient)
        certManager.delete(adminCert())
    }
}

// there is a bug in ML 8 that won't unset the ssl
def disableSSL(appConfig, serverName) {
    def eval = appConfig.newAppServicesDatabaseClient().newServerEval()
    def xqy = """
        import module namespace admin = "http://marklogic.com/xdmp/admin"
          at "/MarkLogic/admin.xqy";
        let \$config := admin:get-configuration()
        let \$appServer := admin:appserver-get-id(\$config,
            admin:group-get-id(\$config, "Default"), "${serverName}")
        let \$config := admin:appserver-set-ssl-certificate-template(\$config, \$appServer, 0)
        return
          admin:save-configuration(\$config)
    """
    def result = eval.xquery(xqy).eval()
}

// Returns a certificate Request for use on the builtin appservers
def adminCert() {
    return """
    <certificate-template-properties xmlns="http://marklogic.com/manage">
      <template-name>admin-cert</template-name>
      <template-description>System Cert</template-description>
      <key-type>rsa</key-type>
      <key-options />
      <req>
        <version>0</version>
        <subject>
          <organizationName>MarkLogic</organizationName>
        </subject>
      </req>
    </certificate-template-properties>
    """
}
