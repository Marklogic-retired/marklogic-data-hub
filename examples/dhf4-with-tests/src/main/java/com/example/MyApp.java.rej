diff a/examples/dhf4-with-tests/src/main/java/com/example/MyApp.java b/examples/dhf4-with-tests/src/main/java/com/example/MyApp.java	(rejected hunks)
@@ -1,4 +1,7 @@
 package com.example;
+import com.marklogic.client.DatabaseClient;
+import com.marklogic.client.DatabaseClientBuilder;
+import com.marklogic.client.DatabaseClientFactory;
 import com.marklogic.client.datamovement.JobTicket;
 import com.marklogic.client.document.GenericDocumentManager;
 import com.marklogic.client.document.ServerTransform;
@@ -20,32 +23,36 @@
 
 import javax.annotation.PostConstruct;
 import java.io.ByteArrayInputStream;
+import java.util.UUID;
 
 public class MyApp {
     // get a hub config
     @Autowired
     HubConfig hubConfig;
 
-    // get a flow manager
-    @Autowired
-    FlowManager flowManager;
-
     @PostConstruct
     public void runFlow() {
         hubConfig.createProject(".");
         hubConfig.withPropertiesFromEnvironment("local");
         hubConfig.refreshProject();
         String doc = "<a/>";
-        XMLDocumentManager xmlMgr = hubConfig.newStagingClient().newXMLDocumentManager();
-        ServerTransform runFlow = new ServerTransform("ml:inputFlow");
+        DatabaseClient flowRunnerClient = DatabaseClientFactory.newClient(hubConfig.getHost(),
+            hubConfig.getPort(DatabaseKind.STAGING),
+            new DatabaseClientFactory.DigestAuthContext(hubConfig.getFlowOperatorUserName(), "4{m^Z3H>}G0q>}m~dWsh"),
+            DatabaseClient.ConnectionType.GATEWAY
+            );
+        //DatabaseClient flowRunnerClient = hubConfig.newStagingClient();
+        XMLDocumentManager xmlMgr = flowRunnerClient.newXMLDocumentManager();
+        ServerTransform runFlow = new ServerTransform("ml:sjsInputFlow");
         runFlow.addParameter("entity-name", "Person");
         runFlow.addParameter("flow-name", "input1");
         runFlow.addParameter("options", "{\"your\": \"options\"}");
-        runFlow.addParameter("job-id", "job-123");
+        runFlow.addParameter("job-id", UUID.randomUUID().toString());
         InputStreamHandle handle = new InputStreamHandle(new ByteArrayInputStream(doc.getBytes()));
         xmlMgr.write("/example-document.xml", handle, runFlow);
       }
 
+
     public static void main(String[] args) {
 
         // start the Spring application
