plugins {
    // Declaring this at root level so it's available for every subproject without declaring a version
    id "net.saliman.properties" version "1.5.1"
}

subprojects {
    // While subprojects may need to use java-library plugin, applying this at the top level allows for
    // sourceCompatibility/targetCompatibility to be set at this level as well
    apply plugin: 'java'

    apply plugin: 'jacoco'

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://developer.marklogic.com/maven2/" }
    }

    tasks.withType(JavaCompile) {
        options.sourcepath = files('bin/sourcepath')
    }

    tasks.withType(Test) {
        ignoreFailures = true
        testLogging {
            events 'started', 'passed', 'skipped', 'failed'
            exceptionFormat 'full'
        }
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }
    }
}

wrapper {
    gradleVersion = '7.6.4'
}

//Task to update versions in files they are hardcoded. If version is hardcoded in any other files in the future,it has to be added to the list
//Usage : ./gradlew updateVersion -PsourceVersion=<source_version> -PtargetVersion=<target_version>
task updateVersion {
    doLast {
        def files = ["gradle.properties",
                     "marklogic-data-hub/gradle.properties",
                     "ml-data-hub-plugin/gradle.properties",
                     "quick-start/gradle.properties",
                     "marklogic-data-hub/src/main/resources/scaffolding/build_gradle",
                     "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/HubConfigImpl.java"
        ]
        String sourceVersion = project.hasProperty('sourceVersion') ? project.property('sourceVersion') : ""
        String targetVersion = project.hasProperty('targetVersion') ? project.property('targetVersion') : ""
        files.each {
            def myFile = new File(it)
            def fileText = myFile.getText('UTF-8')
            myFile.withWriter('UTF-8') { writer ->
                writer.write(fileText.replaceAll(sourceVersion, targetVersion))
            }
        }
    }
}
