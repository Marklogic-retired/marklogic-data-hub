allprojects {
    task resolveAllDependencies {
        doLast {
            configurations.all {
                if (it.isCanBeResolved()) {
                    it.resolve()
                }
            }
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'application'
    sourceCompatibility = "9"
    targetCompatibility = "9"

    repositories {
        mavenCentral()
        mavenLocal()
    }


    dependencies {
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
		testCompile 'org.apache.httpcomponents:httpclient:4.3.5'
    }

    tasks.withType(Test){
        testLogging{
            events 'started','passed', 'skipped', 'failed'
            exceptionFormat 'full'
        }
    }
    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }
    task applicationCodeCoverageReport(type:JacocoReport) {
        executionData run
        sourceSets sourceSets.main
    }


}

wrapper {
    gradleVersion = '4.10'
}

//Task to update versions in files they are hardcoded. If version is hardcoded in any other files in the future,it has to be added to the list
//Usage : ./gradlew updateVersion -PsourceVersion=<source_version> -PtargetVersion=<target_version>
task updateVersion {
    doLast {
        def files = ["gradle.properties",
                     "marklogic-data-hub/gradle.properties",
                     "ml-data-hub-plugin/gradle.properties",
                     "web/gradle.properties",
                     "one-ui/gradle.properties",
                     "one-ui/src/main/resources/application.properties",
                     "marklogic-data-hub/src/main/resources/scaffolding/build_gradle",
                     "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/HubConfigImpl.java",
                     "examples/dh-5-example/build.gradle",
                     "examples/dhf5-custom-hook/build.gradle",
                     "examples/insurance/build.gradle",
                     "examples/mapping-example/build.gradle",
                     "examples/patient-hub/build.gradle",
                     "examples/smart-mastering-complete/build.gradle"
        ]
        String sourceVersion = project.hasProperty('sourceVersion') ? project.property('sourceVersion') : ""
        String targetVersion = project.hasProperty('targetVersion') ? project.property('targetVersion') : ""
        files.each {
            def myFile = new File(it)
            def fileText = myFile.getText('UTF-8')
            myFile.withWriter('UTF-8') { writer ->
                writer.write(fileText.replaceAll(sourceVersion, targetVersion))
            }
        }
    }
}
