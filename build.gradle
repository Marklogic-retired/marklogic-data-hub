plugins {
    // Declaring this at root level so it's available for every subproject without declaring a version
    id "net.saliman.properties" version "1.5.1"
}

subprojects {
    // While subprojects may need to use java-library plugin, applying this at the top level allows for
    // sourceCompatibility/targetCompatibility to be set at this level as well
    apply plugin: 'java'

    apply plugin: 'jacoco'

    sourceCompatibility = "8"
    targetCompatibility = "8"

    repositories {
        mavenCentral()
        mavenLocal()
    }

    tasks.withType(Test){
        ignoreFailures = true
        testLogging {
            events 'started', 'passed', 'skipped', 'failed'
            exceptionFormat 'full'
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }
}

//Task to update versions in files they are hardcoded. If version is hardcoded in any other files in the future,it has to be added to the list
//Usage : ./gradlew updateVersion -PsourceVersion=<source_version> -PtargetVersion=<target_version>
task updateVersion {
    doLast {
        def files = [
            "gradle.properties",
            "marklogic-data-hub/src/main/resources/scaffolding/build_gradle",
            "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/VersionInfo.java",
            "marklogic-data-hub/src/main/resources/hub-internal-config/security/roles/data-hub-admin.json",
            "marklogic-data-hub-central/ui/e2e/hc-qa-project/build.gradle",
            "examples/README.md",
            "examples/dh-5-example/build.gradle",
            "examples/dhf5-custom-hook/build.gradle",
            "examples/insurance/build.gradle",
            "examples/mapping-example/build.gradle",
            "examples/patient-hub/build.gradle",
            "examples/reference-entity-model/build.gradle",
            "examples/smart-mastering-complete/build.gradle",
            "examples/snapshot-testing/build.gradle",
            "examples/step-interceptors/build.gradle",
            "performance-tests/projects/commoncrawl/build.gradle",
        ]
        String sourceVersion = project.hasProperty('sourceVersion') ? project.property('sourceVersion') : ""
        String targetVersion = project.hasProperty('targetVersion') ? project.property('targetVersion') : ""
        files.each {
            def myFile = new File(it)
            def fileText = myFile.getText('UTF-8')
            myFile.withWriter('UTF-8') { writer ->
                writer.write(fileText.replaceAll(sourceVersion, targetVersion))
            }
        }
    }
}
