{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample of a QuickStart DataHub Swagger doucment defining endpoints to be mocked",
    "version": "1.0.0",
    "title": "QuickStart DataHub API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/api",
  "tags": [
    {
      "name": "sample",
      "description": "Sample resource"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/flows": {
      "get": {
        "tags": [
          "flows"
        ],
        "summary": "Returns all flows",
        "description": "Returns all flows",
        "operationId": "findFlows",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/flow"
              },
              "default": [
                {
                  "name": "MappingFlow",
                  "description": "Maps raw values to the canonical model",
                  "identifier": "cts.collectionQuery('rawContent')",
                  "steps": [
                    {
                      "type": "mapping",
                      "name": "person-mapping1.json",
                      "identifier": null,
                      "retryLimit": 0,
                      "options": {}
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "post": {
        "tags": [
          "flow"
        ],
        "summary": "Create flow",
        "description": "",
        "operationId": "createFlow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Flow to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/flow",
              "default": [
                {
                  "name": "MappingFlow",
                  "description": "Maps raw values to the canonical model",
                  "identifier": "cts.collectionQuery('rawContent')",
                  "steps": [
                    {
                      "type": "mapping",
                      "name": "person-mapping1.json",
                      "identifier": null,
                      "retryLimit": 0,
                      "options": {}
                    }
                  ]
                }
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid name supplied"
          },
          "404": {
            "description": "flow not found"
          }
        }
      }
    },
    "/flows/{flowName}": {
      "get": {
        "tags": [
          "flow"
        ],
        "summary": "Find flow by name",
        "description": "....",
        "operationId": "getFlowByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "flowName",
            "in": "path",
            "description": "Name of flow that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/flow",
              "default": [
                {
                  "name": "MappingFlow",
                  "description": "Maps raw values to the canonical model",
                  "identifier": "cts.collectionQuery('rawContent')",
                  "steps": [
                    {
                      "type": "mapping",
                      "name": "person-mapping1.json",
                      "identifier": null,
                      "retryLimit": 0,
                      "options": {}
                    }
                  ]
                }
              ]
            }
          },
          "400": {
            "description": "Invalid name supplied"
          },
          "404": {
            "description": "flow not found"
          }
        }
      },
      "put": {
        "tags": [
          "flow"
        ],
        "summary": "Update flow with name",
        "description": "",
        "operationId": "updateFlowByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "flowName",
            "in": "path",
            "description": "Name of flow that needs to be fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated flow",
            "required": true,
            "schema": {
              "$ref": "#/definitions/flow",
              "default": [
                {
                  "name": "MappingFlow",
                  "description": "Maps raw values to the canonical model",
                  "identifier": "cts.collectionQuery('rawContent')",
                  "steps": [
                    {
                      "type": "mapping",
                      "name": "person-mapping1.json",
                      "identifier": null,
                      "retryLimit": 0,
                      "options": {}
                    }
                  ]
                }
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid name supplied"
          },
          "404": {
            "description": "flow not found"
          }
        }
      },
      "delete": {
        "tags": [
          "flow"
        ],
        "summary": "Delete flow by name",
        "description": "",
        "operationId": "deleteFlow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "flowName",
            "in": "path",
            "description": "ID of the sample that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid name supplied"
          },
          "404": {
            "description": "Flow not found"
          }
        }
      }
    },
    "/samples": {
      "get": {
        "tags": [
          "sample"
        ],
        "summary": "Returns all samples, optionally filtered by one or more criteria",
        "description": "Returns all samples, optionally filtered by one or more criteria",
        "operationId": "findSamples",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/sample"
              },
              "default": [
                { "id": 1, "name": "aaa", "status": "new" },
                { "id": 2, "name": "bbb", "status": "new" },
                { "id": 3, "name": "ccc", "status": "ready" },
                { "id": 4, "name": "ddd", "status": "ready" },
                { "id": 5, "name": "eee", "status": "approved" }
              ]
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/samples/{sampleId}": {
      "get": {
        "tags": [
          "sample"
        ],
        "summary": "Find sample by ID",
        "description": "....",
        "operationId": "getSampleById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "sampleId",
            "in": "path",
            "description": "ID of sample that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/sample",
              "default": [
                { "id": 1, "name": "aaa", "status": "new" }
              ]
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Sample not found"
          }
        }
      },
      "delete": {
        "tags": [
          "sample"
        ],
        "summary": "Delete sample by ID",
        "description": "...",
        "operationId": "deleteSample",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "sampleId",
            "in": "path",
            "description": "ID of the sample that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1.0,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Sample not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {},
  "definitions": {
    "flow": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of flow"
        },
        "description": {
          "type": "string",
          "description": "Description of flow"
        },
        "identifier": {
          "type": "string",
          "description": "Identification documents passed through flow"
        },
        "steps": {
          "type": "array",
          "description": "Steps in flow",
          "items": {
            "$ref": "#/definitions/step"
          }
        }
      }
    },
    "sample": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "integer",
          "format": "int32"
        },
        "tags": {
          "type": "array",
          "xml": {
            "name": "tag",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/tag"
          }
        },
        "status": {
          "type": "string",
          "description": "Sample Status",
          "enum": [
            "new",
            "ready",
            "approved"
          ]
        }
      },
      "xml": {
        "name": "Sample"
      }
    },
    "step":{
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "step type"
        },
        "name": {
          "type": "string",
          "description": "step name"
        },
        "identifier": {
          "type": "string",
          "description": "Identification for documents in step"
        },
        "retryLimit": {
          "type": "integer",
          "minimum": 0,
          "format": "int64"
        },
        "options": {
          "type": "object"
        }
      }
    },
    "tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about MarkLogic Data Hub",
    "url": "https://github.com/marklogic/marklogic-data-hub"
  }
}
