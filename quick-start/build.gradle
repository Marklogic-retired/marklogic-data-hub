/*
 * Copyright 2012-2019 MarkLogic Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

import java.util.concurrent.Executors

plugins {
    id 'java'
    id 'java-test-fixtures'
    id 'eclipse'
    id 'idea'
    id 'com.github.node-gradle.node' version '7.0.1'
    id "io.spring.dependency-management" version "1.1.4"
}

apply plugin: 'war'

war {
    archiveBaseName = 'quick-start'
    version = "${version}"
    manifest {
        attributes("Implementation-Title": "QuickStart",
                   "Implementation-Version": version)
    }

}

repositories {
    mavenCentral()
    maven {url 'https://developer.marklogic.com/maven2/'}
    maven {url 'https://repo.spring.io/plugins-release/'}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.junitJupiterVersion  = '5.7.2'

dependencies {
    implementation('org.springframework.boot:spring-boot-starter:2.7.18')
    implementation('org.springframework.boot:spring-boot-starter-actuator:2.7.18')
    implementation('org.springframework.boot:spring-boot-starter-web:2.7.18')
    implementation('org.springframework.boot:spring-boot-starter-websocket:2.7.18')
    implementation('org.springframework.boot:spring-boot-starter-security:2.7.18')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf:2.7.18')
    implementation('org.aspectj:aspectjweaver:1.9.19')
    implementation('org.springframework:spring-messaging:5.3.31')
    implementation project(":marklogic-data-hub")
    implementation('org.apache.commons:commons-csv:1.10.0')

    // Optional Boot library - see https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html
    implementation('org.springframework.boot:spring-boot-devtools:2.7.18')

    implementation('com.marklogic:ml-app-deployer:4.6.0'){
      exclude group: 'org.springframework', module: 'spring-context'
    }

    // Needed for the Upload feature using mlcp
    implementation("com.marklogic:mlcp:11.0.3") {
      exclude group: 'org.apache.avro', module: 'avro-tools'
    }
    implementation 'org.jdom:jdom2:2.0.6.1'
    implementation 'com.marklogic:marklogic-xcc:11.0.2'
    implementation 'org.slf4j:slf4j-simple:2.0.9'

    testFixturesApi "org.junit.jupiter:junit-jupiter:5.10.1"
    testImplementation "org.junit.jupiter:junit-jupiter:5.10.1"

    testImplementation('org.springframework.boot:spring-boot-starter-test:2.7.18')
    testImplementation("io.rest-assured:rest-assured:5.4.0")
    testImplementation files(project(':marklogic-data-hub').sourceSets.test.output)
}

evaluationDependsOn(':marklogic-data-hub')
compileTestJava.dependsOn tasks.getByPath(':marklogic-data-hub:testClasses')

configurations.configureEach {
    exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
    exclude group: "ch.qos.logback", module: "logback-classic"
    exclude group: 'ch.qos.reload4j', module: 'reload4j'
}

node {
  // Version of node to use.
  version = '18.19.0'

  // Version of npm to use.
  npmVersion = ''

  download = true

  // Set the work directory for unpacking node
  workDir = file("${project.projectDir}/build/nodejs")

  // Set the work directory where node_modules should be located
  nodeProjectDir = file("${project.projectDir}")
}

/*
task cleanUI(type: Delete) {
  delete 'src/main/resources/static', 'src/main/resources/templates'
}

task npmInstallUI(type: NpmTask) {
    args = ['install']
    dependsOn tasks.cleanUI
}

task buildUI(type: NpmTask) {
    args = ['run', 'build.prod']
    dependsOn tasks.npmInstallUI
}

task copyUIAssets(type: Copy) {
    from 'dist'
    into 'src/main/resources/static'
    exclude '*.html'
    dependsOn tasks.buildUI
}

task copyIndexHtml(type: Copy) {
    from 'dist'
    into 'src/main/resources/templates'
    include '*.html'
    dependsOn tasks.copyUIAssets
}

task runUI(type: NpmTask) {
    args = ['start']
    dependsOn tasks.npmInstallUI
}
*/
tasks.register('startRest') {
  doFirst {
    def executorService = Executors.newSingleThreadExecutor()
    executorService.submit({
      tasks.findMainClass.execute()
      pid = tasks.bootRun.execute()

    } as Runnable)
  }
}

tasks.register('e2eLaunch', NpmTask) {
  args = ['run', 'e2e']
  dependsOn compileJava, /*buildUI,*/ startRest
}

tasks.register('e2eUI') {
  dependsOn tasks.e2eLaunch
}

tasks.register('stopBootrun') {
  doLast {
    println("STOPPING Spring Boot")
    def connection = new URL("http://localhost:8080/shutdown").openConnection()
    connection.setRequestMethod("POST")
    connection.connect()
    println 'Shutting down application...'
    println connection.inputStream.text
  }
}

e2eUI.finalizedBy stopBootrun

if (!(
    gradle.startParameter.taskNames*.toLowerCase().contains("bootrun") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("test") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("publishplugins") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("bintrayUpload") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("javadoc") ||
    project.hasProperty('skipui')
    )
   ) {
  //processResources.dependsOn copyIndexHtml
}

test {
    exclude 'com/marklogic/quickstart/integrationtests/**'
    useJUnitPlatform()
}
