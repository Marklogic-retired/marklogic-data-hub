/*
 * Copyright 2012-2018 MarkLogic Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

import java.util.concurrent.Executors

buildscript {
    ext {
        springBootVersion = '1.5.6.RELEASE'
    }
    repositories {
        jcenter()
        maven {url 'http://developer.marklogic.com/maven2/'}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'com.moowork.node' version '1.2.0'
    id 'org.springframework.boot' version '1.5.3.RELEASE'
}

apply plugin: 'war'

war {
    baseName = 'quick-start'
    version = "${version}"
    manifest {
        attributes("Implementation-Title": "QuickStart",
                   "Implementation-Version": version)
    }

}

repositories {
    jcenter()
    maven {url 'http://developer.marklogic.com/maven2/'}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.junit4Version        = '4.12'
ext.junitVintageVersion  = '4.12.0-RC3'
ext.junitPlatformVersion = '1.0.0-RC3'
ext.junitJupiterVersion  = '5.0.0-RC3'

dependencies {
    compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    compile("org.aspectj:aspectjweaver:1.8.9")
    compile("org.springframework:spring-messaging")
    compile project(":marklogic-data-hub")
    compile("org.apache.commons:commons-csv:1.4")

    // Optional Boot library - see https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html
    compile("org.springframework.boot:spring-boot-devtools:${springBootVersion}")

    // Needed for the Upload feature using mlcp
    compile("com.marklogic:mlcp:9.0.4") {
      exclude group: 'org.apache.avro', module: 'avro-tools'
    }
    compile("com.marklogic:marklogic-spring-web:1.0")

    // JUnit Jupiter API and TestEngine implementation
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"


    testCompile "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"

    // If you also want to support JUnit 3 and JUnit 4 tests
    testCompile "junit:junit:${junit4Version}"
    testRuntime "org.junit.vintage:junit-vintage-engine:${junitVintageVersion}"

    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile files(project(':marklogic-data-hub').sourceSets.test.output)
}

evaluationDependsOn(':marklogic-data-hub')
compileTestJava.dependsOn tasks.getByPath(':marklogic-data-hub:testClasses')

configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

node {
  // Version of node to use.
  version = '8.9.4'

  // // Version of npm to use.
  npmVersion = '5.7.1'

  download = true

  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodejs")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.projectDir}")
}

task cleanUI(type: Delete) {
  delete 'src/main/resources/static', 'src/main/resources/templates'
}

task npmInstallUI(type: NpmTask) {
    args = ['install']
    dependsOn tasks.cleanUI
}

task buildUI(type: NpmTask) {
    args = ['run', 'build.prod']
    dependsOn tasks.npmInstallUI
}

task copyUIAssets(type: Copy) {
    from 'dist'
    into 'src/main/resources/static'
    exclude '*.html'
    dependsOn tasks.buildUI
}

task copyIndexHtml(type: Copy) {
    from 'dist'
    into 'src/main/resources/templates'
    include '*.html'
    dependsOn tasks.copyUIAssets
}

task runUI(type: NpmTask) {
    args = ['start']
    dependsOn tasks.npmInstallUI
}

task startRest {
  doFirst {
    def executorService = Executors.newSingleThreadExecutor()
    executorService.submit({
        tasks.findMainClass.execute()
        pid = tasks.bootRun.execute()

    } as Runnable)
  }
}

task e2eLaunch(type: NpmTask) {
    args = ['run', 'e2e']
    dependsOn compileJava, buildUI, startRest
}

task e2eUI {
    dependsOn tasks.e2eLaunch
}

task stopBootrun {
    doLast {
        println("STOPPING Spring Boot")
        def connection = new URL("http://localhost:8080/shutdown").openConnection()
        connection.setRequestMethod("POST")
        connection.connect()
        println 'Shutting down application...'
        println connection.inputStream.text
    }
}

e2eUI.finalizedBy stopBootrun

if (!(
    gradle.startParameter.taskNames*.toLowerCase().contains("bootrun") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("test") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("publishplugins") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("bintrayUpload") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("javadoc") ||
    project.hasProperty('skipui')
    )
   ) {
  processResources.dependsOn copyIndexHtml
}

//removing test dependency on e2e tests
//test.dependsOn e2eUI

bootRun {
    addResources = true
    environment 'spring.profiles.active', 'dev'
}

springBoot {
    executable = true
    mainClass = "com.marklogic.quickstart.Application"
    buildInfo()
}

test {
  include 'com/marklogic/quickstart/WebTestSuite.class'
}
