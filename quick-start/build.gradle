buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
    }
    repositories {
        jcenter()
        maven {url 'http://developer.marklogic.com/maven2/'}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'com.moowork.node' version '1.1.1'
    id 'org.springframework.boot' version '1.5.3.RELEASE'
}

apply plugin: 'war'

war {
    baseName = 'quick-start'
}

repositories {
    jcenter()
    maven {url 'http://developer.marklogic.com/maven2/'}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    compile("org.aspectj:aspectjweaver:1.8.9")
    compile("org.springframework:spring-messaging")
    compile project(":marklogic-data-hub")
    compile("org.apache.commons:commons-csv:1.4")

    // Optional Boot library - see https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html
    compile("org.springframework.boot:spring-boot-devtools:${springBootVersion}")

    // Needed for the Upload feature using mlcp
    compile("com.marklogic:mlcp-util:0.3.0")
    compile("com.marklogic:mlcp:9.0.2") {
      exclude group: 'org.apache.avro', module: 'avro-tools'
    }
    compile("com.marklogic:marklogic-spring-web:1.0")

    testCompile("junit:junit")
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
}

configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

node {
  // Version of node to use.
  version = '7.5.0'

  // // Version of npm to use.
  npmVersion = '4.1.2'

  download = true

  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodejs")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.projectDir}")
}

task cleanUI(type: Delete) {
  delete 'src/main/resources/static', 'src/main/resources/templates'
}

task npmInstallUI(type: NpmTask) {
    args = ['install']
    dependsOn tasks.cleanUI
}

task buildUI(type: NpmTask) {
    args = ['run', 'build.prod']
    dependsOn tasks.npmInstallUI
}

task copyUIAssets(type: Copy) {
    from 'dist'
    into 'src/main/resources/static'
    exclude '*.html'
    dependsOn tasks.buildUI
}

task copyIndexHtml(type: Copy) {
    from 'dist'
    into 'src/main/resources/templates'
    include '*.html'
    dependsOn tasks.copyUIAssets
}

processResources {
    filesMatching("**/quickstart-version.properties") {
        expand(project: project)
    }
}

if (!(
    gradle.startParameter.taskNames*.toLowerCase().contains("bootrun") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("test") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("publishplugins") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("bintrayUpload")
    )
   ) {
  processResources.dependsOn copyIndexHtml
}

bootRun {
    addResources = true
    environment 'spring.profiles.active', 'dev'
}

springBoot {
    executable = true
    mainClass = "com.marklogic.quickstart.Application"
}
