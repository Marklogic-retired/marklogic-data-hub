const flowApi = require("/data-hub/public/flow/flow-api.sjs");
const hubTest = require("/test/data-hub-test-helper.sjs");
const test = require("/test/test-helper.xqy");

const flowName = "simpleMappingFlow";
const options = {
  "permissions": "data-hub-operator,read,data-hub-operator,update,data-hub-common,read"
};
const contentArray = [
  { "uri": "/customer1.json", "value": { "customerId": "1" }}
];

const result = flowApi.runFlowStepOnContent(flowName, "1", contentArray, options);
const outputContentArray = result.contentArray;

const assertions = [
  test.assertEqual(1, outputContentArray.length),
];

const content = outputContentArray[0];
const context = content.context;
const expectedCollection = "Customer";

assertions.push(
  test.assertEqual("/customer1.json", content.uri),
  test.assertEqual(1, content.value.toObject().envelope.instance.Customer.customerId),
  test.assertEqual(expectedCollection, context.collections[0]),
  test.assertEqual(3, context.permissions.length, 
    "Expecting 3 permissions since the runtime options specified these; the default is 2 permissions"),
  test.assertEqual(xdmp.getCurrentUser(), context.metadata.datahubCreatedBy),
  test.assertEqual("simpleMappingFlow", context.metadata.datahubCreatedInFlow),
  test.assertEqual("mappingStep1", context.metadata.datahubCreatedByStep),
  test.assertTrue(context.metadata.datahubCreatedOn != null),
  test.assertTrue(context.metadata.datahubCreatedByJob != null, 
    "Even though a job doc is not created, a jobId should be generated by default"),
  
  test.assertEqual(0, hubTest.getUrisInCollection(expectedCollection, "data-hub-FINAL").length, 
    "The output of the step should not have been persisted, as that requires running a flow"),
  test.assertEqual(0, hubTest.getUrisInCollection("Job", "data-hub-JOBS").length, 
    "No Job documents should have been created since only a step was run, not a flow"),
  test.assertEqual(0, hubTest.getUrisInCollection("Batch", "data-hub-JOBS").length, 
    "No Batch documents should have been created since only a step was run, not a flow")
);

const stepResponse = result.stepResponse;
assertions.push(
  test.assertEqual("completed step 1", stepResponse.status),
  test.assertEqual(1, stepResponse.totalEvents),
  test.assertEqual(1, stepResponse.successfulEvents),
  test.assertEqual(0, stepResponse.failedEvents)
);

assertions;
