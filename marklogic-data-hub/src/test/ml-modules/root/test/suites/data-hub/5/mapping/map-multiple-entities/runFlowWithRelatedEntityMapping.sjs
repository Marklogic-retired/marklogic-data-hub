const DataHubSingleton = require("/data-hub/5/datahub-singleton.sjs");
const test = require("/test/test-helper.xqy");
const hubTest = require("/test/data-hub-test-helper.sjs");
const datahub = DataHubSingleton.instance();
const hubUtils = require("/data-hub/5/impl/hub-utils.sjs");

let assertions = [];

function runJSONMapping(){
  const content = ["/content/customerInfo.json"].map(uri => {
    return {
      uri: uri,
      value: cts.doc(uri)
    };
  });

  let results = datahub.flow.runFlow('customerFlow', 'test-job', content, {outputFormat: 'json', mapping:{name:'mapCustomersJSON'}}, 1);
  let customerUris = hubTest.getUrisInCollection("Customer");
  let orderUris = hubTest.getUrisInCollection("Order").sort();
  let productUris = hubTest.getUrisInCollection("Product").sort();
  let orderDocPermissions = hubTest.getRecord(orderUris[0], "data-hub-FINAL");
  let productDocPermissions = hubTest.getRecord(productUris[0], "data-hub-FINAL")
  let sqlQueryResponse = executeSql();
  assertions = assertions.concat([
    test.assertEqual(1, results.totalCount),
    test.assertEqual(0, results.errorCount),
    test.assertEqual(1, results.completedItems.length),
    test.assertEqual(1, customerUris.length),
    test.assertEqual("/mapped/content/customerInfo.json", customerUris[0]),
    test.assertEqualJson(["/Order/2002.json", "/Order/2012.json"], orderUris),
    test.assertEqualJson(["/Product/10.json", "/Product/30.json", "/Product/40.json"], productUris),
    /* Not checking for permissions of the main entity instance since we have tests for it and also permissions passed through options
    won't get applied before runFlow() is called. */
    test.assertEqual("read", orderDocPermissions.permissions["data-hub-common"][0]),
    test.assertEqual("update", orderDocPermissions.permissions["data-hub-common"][1]),
    test.assertEqual("read", productDocPermissions.permissions["data-hub-operator"][0]),
    test.assertEqual("update", productDocPermissions.permissions["data-hub-operator"][1]),
    test.assertEqual("firstName=Customer.Customer.firstName; lastName=Customer.Customer.lastName; orderId=Order.Order.orderId", sqlQueryResponse[0]),
    test.assertEqual("firstName=Cynthia; lastName=Waters; orderId=2002", sqlQueryResponse[1]),
    test.assertEqual("firstName=Cynthia; lastName=Waters; orderId=2012", sqlQueryResponse[2])
  ]);
}

function runXMLMapping(){
  const customerUriRegex = new RegExp('^\/Customer\/[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}.xml$');
  const content = hubUtils.queryToContentDescriptorArray(cts.documentQuery("/content/customerInfo.xml"), {}, xdmp.databaseName(xdmp.database()));
  const sourceUrisBeforeStepRun = hubTest.getUrisInCollection("raw-content");

  let results = datahub.flow.runFlow('customerFlow', 'test-job', content, {targetCollectionsAdditivity: true, outputFormat: 'xml', mapping:{name:'mapCustomersXML'}}, 2);
  let customerUris = hubTest.getUrisInCollection("Customer").sort();
  const sourceUrisAfterStepRun = hubTest.getUrisInCollection("raw-content");
  assertions = assertions.concat([
    test.assertEqual(1, results.totalCount),
    test.assertEqual(0, results.errorCount),
    test.assertEqual(1, results.completedItems.length),
    test.assertEqual(2, customerUris.length, "1 generated by running 'mapCustomersJSON' and the other by running 'mapCustomersXML'"),
    test.assertTrue(customerUriRegex.test(customerUris[0]), "The uri suffix is changed based on output format"),
    test.assertEqual(2, sourceUrisBeforeStepRun.length, "'raw-content' contains 2 source docs"),
    test.assertEqual(8, sourceUrisAfterStepRun.length, "raw-content' should contain 8 docs(2 source docs + 6 entity instances)"),
  ]);
}

function executeSql() {
  let queryResponse = xdmp.eval('xdmp.sql(\'select Customer.Customer.firstName,Customer.Customer.lastName,"Order"."Order".orderId  from Customer, "Order" where "Order".orderedBy = Customer.customerId order by "Order"."Order".orderId\')');
  var res = new Array();
  for (var row of queryResponse) {
    res.push(fn.concat("firstName=", row[0], "; lastName=", row[1], "; orderId=", row[2]));
  }
  return res;
}
runJSONMapping();
runXMLMapping();
assertions;

