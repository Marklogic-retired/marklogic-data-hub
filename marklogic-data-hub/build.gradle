plugins {
    id 'net.saliman.properties' version '1.5.1'
    id 'java'
    id 'maven-publish'
    id 'com.marklogic.ml-gradle' version '4.8.0'
    // Declaring this at each subproject level, as declaring it at root level resulted in an error about the plugin
    // not being able to resolve its "dataFiles" configuration
    id "io.snyk.gradle.plugin.snykplugin" version "0.4"
}

repositories {
    mavenCentral()
    maven { url 'https://developer.marklogic.com/maven2/' }
}

group = 'com.marklogic'

sourceCompatibility = 1.8
targetCompatibility = 1.8


ext.junit4Version = '4.12'
ext.junitVintageVersion = '4.12.0-RC3'
ext.junitPlatformVersion = '1.3.1'
ext.junitJupiterVersion = '5.3.1'

// Disabling javadoc warnings, as we have hundreds of them, and until we want to do something about them,
// seeing them when running a Gradle task (like publishToMavenLocal) is just useless noise
javadoc.options.addStringOption('Xdoclint:none', '-quiet')

// See https://github.com/snyk/gradle-plugin for docs
snyk {
    severity = 'medium'
    api = snykToken
    autoDownload = true
    autoUpdate = true
}

dependencies {
    //implementation 'com.marklogic:marklogic-client-api:4.2.0'
    /* implementation('com.marklogic:ml-app-deployer:3.16.0'){
        exclude group: 'org.springframework', module: 'spring-context'
    }*/
    implementation 'xerces:xercesImpl:2.12.2'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter', version: '2.0.6.RELEASE'

    implementation 'com.marklogic:marklogic-client-api:6.6.0'
    implementation 'com.marklogic:mlcp-util:1.0.1'
    implementation 'com.marklogic:marklogic-data-movement-components:1.0'
    implementation 'com.marklogic:ml-javaclient-util:4.8.0'
    implementation 'com.marklogic:ml-app-deployer:4.8.0'

    implementation 'commons-io:commons-io:2.16.1'
    implementation 'org.apache.commons:commons-text:1.12.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation "com.squareup.okhttp3:okhttp:4.12.0"

    // JUnit Jupiter API and TestEngine implementation
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

    //testImplementation "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"

    testImplementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:2.0.20"
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.0.6.RELEASE'

    //testImplementation 'com.marklogic:mlcp-util:1.0.1'
    testImplementation 'org.slf4j:slf4j-simple:2.0.13'
    testImplementation("com.marklogic:mlcp:11.0.3") {
        exclude group: 'org.apache.avro', module: 'avro-tools'
        exclude group: 'org.apache.commons', module: 'commons-csv'
    }

    testImplementation 'org.jdom:jdom2:2.0.6.1'
    testImplementation 'org.xmlunit:xmlunit-legacy:2.10.0'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
    testImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'
    testImplementation 'org.easymock:easymock:3.4'
}
import com.marklogic.mgmt.ManageClient
import com.marklogic.mgmt.resource.hosts.HostManager


configurations.all {
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "log4j", module: "log4j"
    exclude group: "xerces", module: "xercesImpl"
    exclude group: "xml-apis", module: "xml-apis"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task cleanUI(type: Delete) {
    delete 'src/main/resources/ml-modules/root/trace-ui'
}

processResources {
    filesMatching("**/version.properties") {
        expand(project: project)
    }
}

jar {
    enabled = true
}

javadoc {
    options.overview = 'src/main/resources/overview.html'
}

Node pomCustomizations = new NodeBuilder().project {
    name 'marklogic-data-hub'
    packaging 'jar'
    textdescription 'Library for Creating an Operational Data Hub on MarkLogic'
    url 'https://github.com/marklogic/marklogic-data-hub'

    scm {
        url 'git@github.com:marklogic/marklogic-data-hub.git'
        connection 'scm:git@github.com:marklogic/marklogic-data-hub.git'
        developerConnection 'scm:git@github.com:marklogic/marklogic-data-hub.git'
    }

    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            name 'MarkLogic'
            email 'java-sig@marklogic.com'
            organization 'MarkLogic'
            organizationUrl 'https://www.marklogic.com'
        }
        developer {
            name 'MarkLogic Github Contributors'
            email 'general@developer.marklogic.com'
            organization 'Github Contributors'
            organizationUrl 'https://github.com/marklogic/marklogic-data-hub/graphs/contributors'
        }
    }
}

publishing {
    publications {
        main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().appendNode('description', pomCustomizations.textdescription.text())
                asNode().append(pomCustomizations.developers)
                asNode().append(pomCustomizations.name)
                asNode().append(pomCustomizations.packaging)
                asNode().append(pomCustomizations.url)
                asNode().append(pomCustomizations.scm)
                asNode().append(pomCustomizations.licenses)
            }
        }
    }
    repositories {
        maven {
            if (project.hasProperty("mavenUser")) {
                credentials {
                    username mavenUser
                    password mavenPassword
                }
            }
            url publishUrl
            allowInsecureProtocol = true
        }
    }
}

ext {
    // mlAppConfig is an instance of com.marklogic.appdeployer.AppConfig
    mlAppConfig {

        moduleTokensPropertiesSources = new ArrayList<>()

        // override some default values with our values
        modulesDatabaseName = mlModulesDbName
        triggersDatabaseName = mlStagingTriggersDbName
        schemasDatabaseName = mlStagingSchemasDbName
        restPort = Integer.parseInt(mlJobPort)

        // Configure custom tokens for our json files
        customTokens.put("%%mlStagingAppserverName%%", mlStagingAppserverName)
        customTokens.put("%%mlStagingPort%%", mlStagingPort)
        customTokens.put("%%mlStagingDbName%%", mlStagingDbName)

        customTokens.put("%%mlFinalAppserverName%%", mlFinalAppserverName)
        customTokens.put("%%mlFinalPort%%", mlFinalPort)
        customTokens.put("%%mlFinalDbName%%", mlFinalDbName)

        customTokens.put("%%mlJobAppserverName%%", mlJobAppserverName)
        customTokens.put("%%mlJobPort%%", mlJobPort)
        customTokens.put("%%mlJobDbName%%", mlJobDbName)

        customTokens.put("%%mlModulesDbName%%", mlModulesDbName)
        customTokens.put("%%mlStagingTriggersDbName%%", mlStagingTriggersDbName)
        customTokens.put("%%mlStagingSchemasDbName%%", mlStagingSchemasDbName)

        modulePaths = ["marklogic-data-hub/src/main/resources/ml-modules"]

    }
}

def propFile = file("gradle.properties")
String fileContents = propFile.text
boolean sslRun = Boolean.parseBoolean(System.properties['ssl'])
boolean certAuth = Boolean.parseBoolean(System.properties['certauth'])
def props = new Properties()
propFile.withInputStream { props.load(it) }

task bootstrap(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'com.marklogic.bootstrap.Installer'
}

task teardown(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'com.marklogic.bootstrap.UnInstaller'
}

test {
    useJUnitPlatform()
    minHeapSize = "128m"
    maxHeapSize = "256m"
    exclude 'com/marklogic/bootstrap/**'
    classpath = project.sourceSets.test.runtimeClasspath
}

task testAcceptance(type: Test) {
    useJUnitPlatform {
        include 'com/marklogic/hub/**'
        if (!(certAuth || sslRun)) {
            include 'com/marklogic/hub/PiiE2E.class'
        }
    }
}

task testIntegration(type: Test) {
    useJUnitPlatform {
        include 'com/marklogic/hub_integration/**'
    }
}

task testBootstrap(type: Test) {
    useJUnitPlatform {
        include 'com/marklogic/bootstrap/**'
    }
}

task setupSSL {
    doFirst {
        def bootStrapHost = null
        if (sslRun || certAuth) {
            com.marklogic.mgmt.ManageClient manageClient = new ManageClient(new com.marklogic.mgmt.ManageConfig(mlHost, 8002, mlSecurityUsername, mlSecurityPassword))
            com.marklogic.mgmt.resource.hosts.HostManager hostManager = new HostManager(manageClient)
            bootStrapHost = hostManager.getHostNames().get(0)
            if (!bootStrapHost.toLowerCase().contains("marklogic.com")) {
                throw new GradleException("The test with current options will run only in marklogic.com domain")
            }

            javaexec {
                classpath = sourceSets.test.runtimeClasspath
                main = 'com.marklogic.bootstrap.SSLsetup'
                args = [mlHost, mlSecurityUsername, mlSecurityPassword, certAuth, sslRun]
            }
        }
        if (sslRun) {
            //checking if one of the property is already set
            if (props.getProperty('mlJobSimpleSsl') == null) {
                propFile.append("\n" +
                    "mlJobSimpleSsl=true\n" +
                    "mlFinalSimpleSsl=true\n" +
                    "mlAdminScheme=https\n" +
                    "mlManageScheme=https\n" +
                    "mlAppServicesSimpleSsl=true\n" +
                    "mlManageSimpleSsl=true\n" +
                    "mlStagingSimpleSsl=true")
            }
        }
        if (certAuth) {
            if (props.getProperty('mlStagingAuth') == null) {
                propFile.append("\n" +
                    "mlStagingAuth=certificate\n" +
                    "mlFinalAuth=certificate\n" +
                    "mlHost=" + bootStrapHost + "\n" +
                    "mlAdminScheme=https\n" +
                    "mlFinalScheme=https\n" +
                    "mlStagingScheme=https\n" +
                    "mlManageScheme=https\n" +
                    "mlJobScheme=https\n" +
                    "mlJobAuth=certificate")
            }
        }
    }
}

setupSSL.dependsOn(testClasses)
bootstrap.dependsOn(setupSSL)
test.dependsOn(bootstrap)
testIntegration.dependsOn(bootstrap)
testAcceptance.dependsOn(bootstrap)
testBootstrap.dependsOn(bootstrap)
//Uncomment this line if hub has to be uninstalled after test
//test.finalizedBy(teardown)
