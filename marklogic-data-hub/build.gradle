plugins {
    id 'net.saliman.properties' version '1.4.4'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.6'
    id 'com.marklogic.ml-gradle' version '2.1.0'
}

repositories {
    jcenter()
    maven { url 'http://repo.spring.io/milestone' }
    maven { url 'http://developer.marklogic.com/maven2/' }
}

group = 'com.marklogic'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile 'org.springframework.batch:spring-batch-core:3.0.6.RELEASE'
    compile 'com.marklogic:marklogic-xcc:8.0.5'
    compile 'com.marklogic:java-client-api:3.0.4'
    compile 'com.marklogic:ml-javaclient-util:2.6.1'
    compile 'com.marklogic:ml-app-deployer:2.0'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.commons:commons-csv:1.2'
    compile 'org.glassfish.jaxb:txw2:2.2.11'
    testCompile 'org.springframework.batch:spring-batch-test:3.0.6.RELEASE'
    testCompile 'junit:junit:4.12'
    testCompile 'xmlunit:xmlunit:1.3'
    testCompile 'org.hamcrest:hamcrest-junit:2.0.0.0'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
   options.overview = 'src/main/resources/overview.html'
}

Node pomCustomizations = new NodeBuilder(). project {
    name 'marklogic-data-hub'
    packaging 'jar'
    textdescription 'Library for Creating an Enterprise Data Hub on MarkLogic'
    url 'https://github.com/marklogic/marklogic-data-hub'

    scm {
        url 'git@github.com:marklogic/marklogic-data-hub.git'
        connection 'scm:git@github.com:marklogic/marklogic-data-hub.git'
        developerConnection 'scm:git@github.com:marklogic/marklogic-data-hub.git'
    }

    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            name 'MarkLogic'
            email 'java-sig@marklogic.com'
            organization 'MarkLogic'
            organizationUrl 'https://www.marklogic.com'
        }
        developer {
            name 'MarkLogic Github Contributors'
            email 'general@developer.marklogic.com'
            organization 'Github Contributors'
            organizationUrl 'https://github.com/marklogic/marklogic-data-hub/graphs/contributors'
        }
    }
}

publishing {
    publications {
        main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().appendNode('description', pomCustomizations.textdescription.text())
                asNode().append(pomCustomizations.developers)
                asNode().append(pomCustomizations.name)
                asNode().append(pomCustomizations.packaging)
                asNode().append(pomCustomizations.url)
                asNode().append(pomCustomizations.scm)
                asNode().append(pomCustomizations.licenses)
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['main']
    pkg {
        repo = 'maven'
        name = project.name
        desc = pomCustomizations.textdescription.text()
        // userOrg = user
        licenses = ['Apache-2.0']
        websiteUrl = pomCustomizations.url
        vcsUrl = pomCustomizations.scm.url
        issueTrackerUrl = 'https://github.com/marklogic/marklogic-data-hub/issues'
    }
}

ext {
    // mlAppConfig is an instance of com.marklogic.appdeployer.AppConfig
    mlAppConfig {
        // override some default values with our values
        modulesDatabaseName = mlModulesDbName
        triggersDatabaseName = mlTriggersDbName
        schemasDatabaseName = mlSchemasDbName
        restPort = Integer.parseInt(mlStagingPort)

        // Configure custom tokens for our json files
        customTokens.put("%%STAGING_SERVER_NAME%%", mlStagingAppserverName)
        customTokens.put("%%STAGING_SERVER_PORT%%", mlStagingPort)
        customTokens.put("%%STAGING_DB_NAME%%", mlStagingDbName)

        customTokens.put("%%FINAL_SERVER_NAME%%", mlFinalAppserverName)
        customTokens.put("%%FINAL_SERVER_PORT%%", mlFinalPort)
        customTokens.put("%%FINAL_DB_NAME%%", mlFinalDbName)

        customTokens.put("%%TRACE_SERVER_NAME%%", mlTraceAppserverName)
        customTokens.put("%%TRACE_SERVER_PORT%%", mlTracePort)
        customTokens.put("%%TRACE_DB_NAME%%", mlTraceDbName)

        customTokens.put("%%MODULES_DB_NAME%%", mlModulesDbName)

        modulePaths = ["marklogic-data-hub/src/main/resources/ml-modules"]
    }
}

ext {
    // don't create the REST Api. We will do it manually
    mlAppDeployer.commands.remove(mlAppDeployer.getCommand("DeployRestApiServersCommand"))
    mlAppDeployer.commands.remove(mlAppDeployer.getCommand("UpdateRestApiServersCommand"))

    // remove the original deploy content database command
    // as we do not need it.
    def deployDbCmd = mlAppDeployer.getCommand("DeployContentDatabasesCommand")
    mlAppDeployer.commands.remove(deployDbCmd)

    // install the staging database
    def stagingDbCommand = new com.marklogic.appdeployer.command.databases.DeployDatabaseCommand("staging-database.json")
    stagingDbCommand.setForestsPerHost(Integer.parseInt(mlStagingForestsPerHost));
    mlAppDeployer.commands.add(stagingDbCommand)
    mlDatabaseCommands.add(stagingDbCommand)

    // install the final database
    def finalDbCommand = new com.marklogic.appdeployer.command.databases.DeployDatabaseCommand("final-database.json")
    finalDbCommand.setForestsPerHost(Integer.parseInt(mlFinalForestsPerHost));
    mlAppDeployer.commands.add(finalDbCommand)
    mlDatabaseCommands.add(finalDbCommand)

    // install the trace database
    def traceDbCommand = new com.marklogic.appdeployer.command.databases.DeployDatabaseCommand("trace-database.json")
    traceDbCommand.setForestsPerHost(Integer.parseInt(mlTraceForestsPerHost));
    mlAppDeployer.commands.add(traceDbCommand)
    mlDatabaseCommands.add(traceDbCommand)

    // install the modules database
    def modulesDbCommand = new com.marklogic.appdeployer.command.databases.DeployDatabaseCommand("modules-database.json")
    mlAppDeployer.commands.add(modulesDbCommand)
    mlDatabaseCommands.add(modulesDbCommand)

    // temp workaround for ml-gradle issue #78
    // https://github.com/rjrudin/ml-gradle/issues/78
    def lmc = mlAppDeployer.getCommand("LoadModulesCommand")
    lmc.setModulesLoader(new com.marklogic.client.modulesloader.impl.DefaultModulesLoader(mlAppConfig.newXccAssetLoader()))
}
