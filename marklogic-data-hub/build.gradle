plugins {
    id 'net.saliman.properties' version '1.4.6'
    id 'java'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.7.2'
    id 'com.marklogic.ml-gradle' version '3.12.0'
    id 'com.moowork.node' version '1.1.1'
    id 'org.springframework.boot' version '2.0.6.RELEASE'
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
}

repositories {
    jcenter()
    maven { url 'http://repo.spring.io/milestone' }
    maven { url 'https://developer.marklogic.com/maven2/' }
}

group = 'com.marklogic'

sourceCompatibility = 1.8
targetCompatibility = 1.8


ext.junit4Version        = '4.12'
ext.junitVintageVersion  = '4.12.0-RC3'
ext.junitPlatformVersion = '1.3.1'
ext.junitJupiterVersion  = '5.3.1'

dependencies {
    compile 'com.marklogic:marklogic-client-api:4.1.2'
    compile('com.marklogic:ml-app-deployer:3.12.0'){
        exclude group: 'org.springframework', module: 'spring-context'
    }
    compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: '2.0.6.RELEASE'
    compile 'com.marklogic:mlcp-util:0.9.0'
    compile 'com.marklogic:marklogic-data-movement-components:1.0'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.commons:commons-text:1.1'

    // JUnit Jupiter API and TestEngine implementation
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

    //testCompile "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.0.6.RELEASE'

    // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
    testRuntime "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"

    testCompile 'xmlunit:xmlunit:1.3'
    testCompile 'org.skyscreamer:jsonassert:1.5.0'
    testCompile 'org.hamcrest:hamcrest-junit:2.0.0.0'
    testCompile 'org.easymock:easymock:3.4'
    testCompile 'ch.qos.logback:logback-classic:1.1.11'
    testCompile 'org.slf4j:log4j-over-slf4j:1.7.13'
    testCompile("com.marklogic:mlcp-util:0.3.0")
    testCompile("com.marklogic:mlcp:9.0.7") {
      exclude group: 'org.apache.avro', module: 'avro-tools'
      exclude group: 'org.apache.commons', module: 'commons-csv'
    }
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-websocket")
}
import com.marklogic.mgmt.ManageClient
import com.marklogic.mgmt.resource.hosts.HostManager


configurations.all {
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "log4j", module: "log4j"
}


node {
  // Version of node to use.
  version = '8.9.4'

  // // Version of npm to use.
  npmVersion = '5.7.1'

  download = true

  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodejs")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.projectDir}/src/trace-ui")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task cleanUI(type: Delete) {
  delete 'src/main/resources/ml-modules/root/trace-ui'
}

task npmInstallUI(type: NpmTask) {
    args = ['install']
    dependsOn tasks.cleanUI
}

task buildUI(type: NpmTask) {
    args = ['run', 'build.prod']
    dependsOn tasks.npmInstallUI
}

task copyUIAssets(type: Copy) {
    from 'src/trace-ui/dist'
    into 'src/main/resources/ml-modules/root/trace-ui'
    dependsOn tasks.buildUI
}

processResources {
    filesMatching("**/version.properties") {
        expand(project: project)
    }
}

if (!(
    gradle.startParameter.taskNames*.toLowerCase().contains("bootrun") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("test") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("publishplugins") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("publishtomavenlocal") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("bintrayupload") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("javadoc") ||
    project.hasProperty('skipui')
    )
   ) {
  processResources.dependsOn copyUIAssets
}

tasks.clean.dependsOn cleanUI

jar{ 
    enabled = true
}

bootRun {
    enabled = false
}

javadoc {
   options.overview = 'src/main/resources/overview.html'
}

Node pomCustomizations = new NodeBuilder(). project {
    name 'marklogic-data-hub'
    packaging 'jar'
    textdescription 'Library for Creating an Operational Data Hub on MarkLogic'
    url 'https://github.com/marklogic/marklogic-data-hub'

    scm {
        url 'git@github.com:marklogic/marklogic-data-hub.git'
        connection 'scm:git@github.com:marklogic/marklogic-data-hub.git'
        developerConnection 'scm:git@github.com:marklogic/marklogic-data-hub.git'
    }

    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            name 'MarkLogic'
            email 'java-sig@marklogic.com'
            organization 'MarkLogic'
            organizationUrl 'https://www.marklogic.com'
        }
        developer {
            name 'MarkLogic Github Contributors'
            email 'general@developer.marklogic.com'
            organization 'Github Contributors'
            organizationUrl 'https://github.com/marklogic/marklogic-data-hub/graphs/contributors'
        }
    }
}

publishing {
    publications {
        main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().appendNode('description', pomCustomizations.textdescription.text())
                asNode().append(pomCustomizations.developers)
                asNode().append(pomCustomizations.name)
                asNode().append(pomCustomizations.packaging)
                asNode().append(pomCustomizations.url)
                asNode().append(pomCustomizations.scm)
                asNode().append(pomCustomizations.licenses)
            }
        }
    }
    repositories {
        maven {
          if(project.hasProperty("mavenUser")) {
            credentials {
            username mavenUser
            password mavenPassword
            }
          }
          url publishUrl
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['main']
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = 'marklogic'
        desc = pomCustomizations.textdescription.text()
        licenses = ['Apache-2.0']
        websiteUrl = pomCustomizations.url
        vcsUrl = pomCustomizations.scm.url
        issueTrackerUrl = 'https://github.com/marklogic/marklogic-data-hub/issues'
    }
}

ext {
    // mlAppConfig is an instance of com.marklogic.appdeployer.AppConfig
    mlAppConfig {

        moduleTokensPropertiesSources = new ArrayList<>()

        // override some default values with our values
        modulesDatabaseName = mlModulesDbName
        triggersDatabaseName = mlStagingTriggersDbName
        schemasDatabaseName = mlStagingSchemasDbName
        restPort = Integer.parseInt(mlJobPort)

        // Configure custom tokens for our json files
        customTokens.put("%%mlStagingAppserverName%%", mlStagingAppserverName)
        customTokens.put("%%mlStagingPort%%", mlStagingPort)
        customTokens.put("%%mlStagingDbName%%", mlStagingDbName)

        customTokens.put("%%mlFinalAppserverName%%", mlFinalAppserverName)
        customTokens.put("%%mlFinalPort%%", mlFinalPort)
        customTokens.put("%%mlFinalDbName%%", mlFinalDbName)

        customTokens.put("%%mlJobAppserverName%%", mlJobAppserverName)
        customTokens.put("%%mlJobPort%%", mlJobPort)
        customTokens.put("%%mlJobDbName%%", mlJobDbName)

        customTokens.put("%%mlModulesDbName%%", mlModulesDbName)
        customTokens.put("%%mlStagingTriggersDbName%%", mlStagingTriggersDbName)
        customTokens.put("%%mlStagingSchemasDbName%%", mlStagingSchemasDbName)

        modulePaths = ["marklogic-data-hub/src/main/resources/ml-modules"]

    }
}

def propFile = file("gradle.properties")
String fileContents = propFile.text
boolean sslRun = Boolean.parseBoolean(System.properties['ssl'])
boolean certAuth = Boolean.parseBoolean(System.properties['certauth'])
def props = new Properties()
propFile.withInputStream { props.load(it) }

task bootstrap(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.marklogic.bootstrap.Installer'
}

task teardown(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.marklogic.bootstrap.UnInstaller'
}

test {
    useJUnitPlatform()
    minHeapSize = "128m"
    maxHeapSize = "256m"
    exclude 'com/marklogic/bootstrap/**'
    classpath = project.sourceSets.test.runtimeClasspath
}

task testAcceptance(type: Test) {
    useJUnitPlatform  {
        include 'com/marklogic/hub/**'
        if (!(certAuth || sslRun)){
            include 'com/marklogic/hub/PiiE2E.class'
        }
    }
}

task testIntegration(type: Test) {
    useJUnitPlatform  {
        include 'com/marklogic/hub_integration/**'
    }
}

task testBootstrap(type: Test) {
    useJUnitPlatform  {
        include 'com/marklogic/bootstrap/**'
    }
}

task setupSSL{
    doFirst{
        def bootStrapHost = null
        if(sslRun || certAuth){
            com.marklogic.mgmt.ManageClient manageClient = new ManageClient(new com.marklogic.mgmt.ManageConfig(mlHost, 8002, mlSecurityUsername, mlSecurityPassword))
            com.marklogic.mgmt.resource.hosts.HostManager hostManager = new HostManager(manageClient)
            bootStrapHost = hostManager.getHostNames().get(0)
            if(! bootStrapHost.toLowerCase().contains("marklogic.com")){
                throw new GradleException("The test with current options will run only in marklogic.com domain")
            }

            javaexec {
                classpath = sourceSets.test.runtimeClasspath
                main = 'com.marklogic.bootstrap.SSLsetup'
                args = [mlHost, mlSecurityUsername, mlSecurityPassword, certAuth, sslRun]
                }
            }
            if(sslRun) {
                //checking if one of the property is already set
                if(props.getProperty('mlJobSimpleSsl')==null){
                    propFile.append("\n" +
                            "mlJobSimpleSsl=true\n" +
                            "mlFinalSimpleSsl=true\n" +
                            "mlAdminScheme=https\n" +
                            "mlManageScheme=https\n" +
                            "mlAppServicesSimpleSsl=true\n" +
                            "mlManageSimpleSsl=true\n" +
                            "mlStagingSimpleSsl=true")
                }
            }
            if(certAuth) {
                if(props.getProperty('mlStagingAuth')==null){
                    propFile.append("\n" +
                            "mlStagingAuth=certificate\n" +
                            "mlFinalAuth=certificate\n" +
                            "mlHost="+bootStrapHost+"\n"+
                            "mlAdminScheme=https\n" +
                            "mlFinalScheme=https\n" +
                            "mlStagingScheme=https\n" +
                            "mlManageScheme=https\n" +
                            "mlJobScheme=https\n" +
                            "mlJobAuth=certificate")
            }
        }
    }
}

setupSSL.dependsOn(testClasses)
bootstrap.dependsOn(setupSSL)
test.dependsOn(bootstrap)
testIntegration.dependsOn(bootstrap)
testAcceptance.dependsOn(bootstrap)
testBootstrap.dependsOn(bootstrap)
//Uncomment this line if hub has to be uninstalled after test
//test.finalizedBy(teardown)
