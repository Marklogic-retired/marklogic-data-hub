plugins {
    id 'net.saliman.properties'
    id 'java-library'
    id 'java-test-fixtures'
    id 'maven-publish'
    id 'com.marklogic.ml-gradle' version '4.5.2'
    id "com.github.node-gradle.node" version "2.2.4"
    id 'com.marklogic.ml-development-tools' version '6.2.0'

    // Declaring this at each subproject level, as declaring it at root level resulted in an error about the plugin
    // not being able to resolve its "dataFiles" configuration
    id "io.snyk.gradle.plugin.snykplugin" version "0.4"
}

// Disabling javadoc warnings, as we have hundreds of them, and until we want to do something about them,
// seeing them when running a Gradle task (like publishToMavenLocal) is just useless noise
javadoc.options.addStringOption('Xdoclint:none', '-quiet')

// See https://github.com/snyk/gradle-plugin for docs
snyk {
    severity = 'medium'
    api = snykToken
    autoDownload = true
    autoUpdate = true
}

group = 'com.marklogic'

ext {
    dataServicesGroup = "Data Services"
    dataServicesPath = "src/main/resources/ml-modules/root/data-hub/data-services"

    thirdPartySourcePath = "src/main/resources/ml-modules/root/data-hub/third-party"
}

configurations {
    mlcp
}

dependencies {
    api project(":marklogic-data-hub-api")

    implementation "org.apache.commons:commons-lang3:3.12.0"

    // Required by the 'legacy' collector implementation
    implementation "org.apache.httpcomponents:httpclient:4.5.14"

    // Required for CSV support in ingestion steps
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.14.1"

    implementation "org.slf4j:slf4j-api:2.0.7"
    implementation "org.jdom:jdom2:2.0.6.1"

    // Required for some code that accesses OkHttp APIs directly; intended to match the version of
    // OkHttp that the Java Client brings in
    implementation "com.squareup.okhttp3:okhttp:4.10.0"

    // Required for 'legacy' job support
    implementation 'com.marklogic:marklogic-data-movement-components:2.5.0'

    implementation 'commons-io:commons-io:2.11.0'

    constraints {
        implementation('org.springframework:spring-beans:5.3.23') {
            because 'spring-beans:5.3.7 is vulnerable to remote code execution and other critical security vulnerabilities'
        }
        implementation('org.springframework:spring-jcl:5.3.23') {
            because 'spring-jcl:5.3.7 is vulnerable to remote code execution and other critical security vulnerabilities'
        }
        implementation('org.springframework:spring-core:5.3.23') {
            because 'spring-core:5.3.7 is vulnerable to remote code execution and other critical security vulnerabilities'
        }
    }

    testFixturesApi(testImplementation(project(":marklogic-data-hub-test")))
    testFixturesApi "com.fasterxml.jackson.core:jackson-databind:2.11.1"
    testFixturesApi "org.junit.jupiter:junit-jupiter:5.7.2"
    testFixturesImplementation 'commons-io:commons-io:2.11.0'

    testImplementation 'com.marklogic:mlcp-util:1.0.1'

    // Projects that depend on this project's testFixtures will have access to these resources.
    // But this project apparently needs to use testImplementation to reference them in tests.
    testImplementation files("src/testFixtures/resources")

    testImplementation "org.junit.jupiter:junit-jupiter:5.7.2"
    testImplementation "org.springframework:spring-test:5.3.22"

    // For managing a pool of HubConfigImpl objects
    testFixturesApi "org.apache.commons:commons-pool2:2.10.0"

    testFixturesApi 'xmlunit:xmlunit:1.6'

    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
    testImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'
    testImplementation 'org.easymock:easymock:3.4'
    testImplementation 'org.apache.logging.log4j:log4j-api:2.17.2'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    testImplementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.2'
    testImplementation 'org.slf4j:log4j-over-slf4j:2.0.7'
    testImplementation 'org.slf4j:slf4j-simple:2.0.7'
    testImplementation("com.marklogic:mlcp:10.0.9.5") {
      exclude group: 'commons-modeler', module: 'commons-modeler'
      exclude group: 'ch.qos.logback', module: 'logback-classic'
      exclude group: 'org.apache.avro', module: 'avro-tools'
      exclude group: 'org.apache.commons', module: 'commons-csv'
    }

    testImplementation "com.marklogic:marklogic-junit5:1.3.0"
    mlBundle "com.marklogic:marklogic-unit-test-modules:1.3.0"
}

configurations.all {
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "log4j", module: "log4j"
}

task extractFastXmlParserZip(type: Copy) {
    doFirst {
        new File(thirdPartySourcePath).mkdirs()
    }
    description = "Extract fast-xml-parser.zip so that its files will be available when bootstrapping the test app and when building the DHF core JAR"
    from zipTree('src/main/third-party/fast-xml-parser-3.17.1.zip')
    destinationDir = new File(thirdPartySourcePath)
}

// Ensure that the fast-xml-parser files are available before any DHF jars are built
processResources.dependsOn extractFastXmlParserZip

node {
    version = '14.15.4'
    npmVersion = '6.14.10'

    download = true

    // distBaseUrl is not set here; this instead relies on the nodeDistributionBaseUrl repository
    // that is configured in the root build.gradle file

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

processResources {
    filesMatching("**/version.properties") {
        expand(project: project)
    }
}

task generateDataService(type: JavaExec) {
    description = "Generate DS source files based on a service name and endpoint name specified via -PserviceName and -PendpointName"
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.marklogic.hub.tools.DataServiceGenerator'
    args = [
        project.hasProperty("serviceName") ? project.findProperty("serviceName") : "",
        project.hasProperty("endpointName") ? project.findProperty("endpointName") : ""
    ]
}


// Dynamically generate a task for each data-service directory, where the task can generate a Java interface for the data service
new File("src/main/resources/ml-modules/root/data-hub/data-services").listFiles().each { file ->
    if (file.isDirectory() && new File(file, "service.json").exists()) {
        task "generate${file.getName()}Interface"(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask, group: dataServicesGroup) {
            description = "Must run this from the ./marklogic-data-hub directory"
            serviceDeclarationFile = dataServicesPath + "/${file.getName()}/service.json"
        }
    }
}

task generateDataServiceInterfaces {
    description = "Generate Java interfaces for all Data Services. Must run this from the ./marklogic-data-hub directory"
    dependsOn {
        tasks.findAll { task -> dataServicesGroup.equals(task.group)}
    }
}

task generateSparkInterface(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask, group: dataServicesGroup) {
    description = "Must run this from the ./marklogic-data-hub directory"
    serviceDeclarationFile = "src/main/resources/ml-modules/root/marklogic-data-hub-spark-connector/service.json"
    javaBaseDirectory = "../marklogic-data-hub-spark-connector/src/main/java"
}

jar{
    enabled = true
}

javadoc {
   options.overview = 'src/main/resources/overview.html'
}

Node pomCustomizations = new NodeBuilder(). project {
    name 'marklogic-data-hub'
    packaging 'jar'
    textdescription 'Library for Creating an Operational Data Hub on MarkLogic'
    url 'https://github.com/marklogic/marklogic-data-hub'

    scm {
        url 'git@github.com:marklogic/marklogic-data-hub.git'
        connection 'scm:git@github.com:marklogic/marklogic-data-hub.git'
        developerConnection 'scm:git@github.com:marklogic/marklogic-data-hub.git'
    }

    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            name 'MarkLogic'
            email 'java-sig@marklogic.com'
            organization 'MarkLogic'
            organizationUrl 'https://www.marklogic.com'
        }
        developer {
            name 'MarkLogic Github Contributors'
            email 'general@developer.marklogic.com'
            organization 'Github Contributors'
            organizationUrl 'https://github.com/marklogic/marklogic-data-hub/graphs/contributors'
        }
    }
}

publishing {
    publications {
        main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().appendNode('description', pomCustomizations.textdescription.text())
                asNode().append(pomCustomizations.developers)
                asNode().append(pomCustomizations.name)
                asNode().append(pomCustomizations.packaging)
                asNode().append(pomCustomizations.url)
                asNode().append(pomCustomizations.scm)
                asNode().append(pomCustomizations.licenses)
            }
        }
    }
    repositories {
        maven {
            if (project.hasProperty("mavenUser")) {
                credentials {
                    username mavenUser
                    password mavenPassword
                }
            }
            url publishUrl
            allowInsecureProtocol = true
        }
    }
}

ext {
    // mlAppConfig is an instance of com.marklogic.appdeployer.AppConfig
    mlAppConfig {

        moduleTokensPropertiesSources = new ArrayList<>()

        // override some default values with our values
        modulesDatabaseName = mlModulesDbName
        triggersDatabaseName = mlStagingTriggersDbName
        schemasDatabaseName = mlStagingSchemasDbName
        restPort = Integer.parseInt(mlJobPort)

        // Configure custom tokens for our json files
        customTokens.put("%%mlStagingAppserverName%%", mlStagingAppserverName)
        customTokens.put("%%mlStagingPort%%", mlStagingPort)
        customTokens.put("%%mlStagingDbName%%", mlStagingDbName)

        customTokens.put("%%mlFinalAppserverName%%", mlFinalAppserverName)
        customTokens.put("%%mlFinalPort%%", mlFinalPort)
        customTokens.put("%%mlFinalDbName%%", mlFinalDbName)

        customTokens.put("%%mlJobAppserverName%%", mlJobAppserverName)
        customTokens.put("%%mlJobPort%%", mlJobPort)
        customTokens.put("%%mlJobDbName%%", mlJobDbName)

        customTokens.put("%%mlModulesDbName%%", mlModulesDbName)
        customTokens.put("%%mlStagingTriggersDbName%%", mlStagingTriggersDbName)
        customTokens.put("%%mlStagingSchemasDbName%%", mlStagingSchemasDbName)

        modulePaths = [
            new File(getProjectDir(), "src/main/resources/ml-modules").getAbsolutePath(),
            new File(getProjectDir(), "src/test/ml-modules").getAbsolutePath()
        ]
    }
}

task bootstrap(type: JavaExec) {
    description = "Install the test application - an instance of DHF - so that the tests can be run against it"
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'com.marklogic.bootstrap.TestAppInstaller'
    systemProperty "mlHost", mlHost
}
bootstrap.dependsOn extractFastXmlParserZip
bootstrap.dependsOn mlPrepareBundles // ensures that marklogic-unit-test is downloaded
test.mustRunAfter bootstrap

task dhsBootstrap(type: JavaExec) {
    description = "Install the test application in a DHS instance"
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'com.marklogic.bootstrap.TestAppInstaller'
    // Pass some Gradle properties as system properties so they can be easily overridden
    systemProperty "mlHost", mlHost
    systemProperty "hubDhs", "true"
    systemProperty "hubSsl", "true"
    systemProperty "mlUsername", mlUsername
    systemProperty "mlPassword", mlPassword
    systemProperty "mlSecurityUsername", mlUsername
    systemProperty "mlSecurityPassword", mlPassword
    systemProperty "mlFlowDeveloperRole", "flowDeveloper"
    systemProperty "mlFlowOperatorRole", "flowOperator"
}
dhsBootstrap.dependsOn extractFastXmlParserZip
dhsBootstrap.finalizedBy mlPrepareBundles

// Configure the Gradle "test" task
test {
    systemProperty "mlHost", mlHost
    useJUnitPlatform()
    minHeapSize = "128m"
    maxHeapSize = "256m"
    classpath = project.sourceSets.test.runtimeClasspath
}

task bootstrapAndTest(dependsOn:["bootstrap", "test"])

task testAcceptance(type: Test) {
    systemProperty "mlHost", mlHost
    useJUnitPlatform  {
        include 'com/marklogic/hub_unit_test/RunMarkLogicUnitTestsTest*'
        include 'com/marklogic/hub/**'
    }
}
testAcceptance.dependsOn bootstrap

task testDhsTests(type: Test) {
    description = "Runs a subset of tests known to work against DHS; not everyone test can run against a DHS instance " +
        "as it may depend on roles/privileges that DHS does not allow"
    useJUnitPlatform  {
        include 'com/marklogic/hub/dataservices/**'
        // This test is failing due to an old 5.2.x DS module that gets installed by DHS 5.2.x
        exclude 'com/marklogic/hub/dataservices/VerifyEndpointPrivileges*'

        include 'com/marklogic/hub/dhs/**'
        include 'com/marklogic/hub/flow/**'
        include 'com/marklogic/hub/hubcentral/**'
        include 'com/marklogic/hub/mapping/**'
        include 'com/marklogic/hub/master/**'
        include 'com/marklogic/hub/security/**'
    }

    // Pass some Gradle properties as system properties so they can be easily overridden
    systemProperty "mlHost", mlHost
    systemProperty "hubDhs", "true"
    systemProperty "hubSsl", "true"
    systemProperty "mlUsername", mlUsername
    systemProperty "mlPassword", mlPassword
    systemProperty "mlSecurityUsername", mlUsername
    systemProperty "mlSecurityPassword", mlPassword
    systemProperty "mlFlowDeveloperRole", "flowDeveloper"
    systemProperty "mlFlowOperatorRole", "flowOperator"
}
testDhsTests.dependsOn dhsBootstrap

task testIntegration(type: Test) {
    systemProperty "mlHost", mlHost
    useJUnitPlatform  {
        include 'com/marklogic/hub_integration/**'
    }
}
testIntegration.dependsOn bootstrap

task testUnit(type: Test) {
    description = "Run the marklogic-unit-test tests, which also forces those modules to be loaded"
    useJUnitPlatform {
        include 'com/marklogic/hub_unit_test/RunMarkLogicUnitTestsTest*'
    }
}

// Avoids a bug in Java 1.8 with reading zip files in our tests. See https://bugs.openjdk.java.net/browse/JDK-8156179
tasks.withType(Test) {
    jvmArgs += "-Dsun.zip.disableMemoryMapping=true"
}
