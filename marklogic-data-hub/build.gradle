plugins {
    id 'net.saliman.properties' version '1.4.6'
    id 'java'
    id 'maven-publish'
    id 'com.marklogic.ml-gradle' version '4.3.4'
    id "com.github.node-gradle.node" version "3.2.1"
    id 'org.springframework.boot' version '2.6.7'
    id 'com.marklogic.ml-development-tools' version '5.5.3'
}

mainClassName='com.marklogic.hub.ApplicationConfig'
repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://developer.marklogic.com/maven2/' }
}

group = 'com.marklogic'

sourceCompatibility = 1.8
targetCompatibility = 1.8


ext.junitPlatformVersion = '1.8.2'
ext.junitJupiterVersion  = '5.8.2'

// This enables including a logging jar in the application artifacts produced by this project - the installer and the client jars
// without that jar ending up in the library artifact.
configurations {
    datahubLogging
}

dependencies {
    implementation ('com.marklogic:marklogic-client-api:5.5.3'){
        exclude group: 'com.fasterxml.woodstox', module: 'woodstox-core'
        // Oddly, the OkHttp 4.4.0 dependency includes version 1.2.70 and 1.3.x of these dependencies. This causes
        // class conflict errors. So they're excluded from here, and we force inclusion of 1.3.x below.
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-common'
    }
    implementation('com.marklogic:ml-app-deployer:4.3.3')
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.13.2'

    implementation group: 'xerces', name: 'xercesImpl', version: '2.12.2'
    implementation ('org.jdom:jdom2:2.0.6.1') {
        exclude group: 'xercesc', module: 'xercesImpl'
    }

    implementation group: 'org.springframework.boot', name: 'spring-boot', version: '2.6.7'
    implementation group: 'org.springframework.integration', name: 'spring-integration-http', version: '5.5.11'
    implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: '2.6.7'

    implementation 'com.marklogic:mlcp-util:1.0'
    implementation ('com.marklogic:marklogic-data-movement-components:2.4.0'){
        // prefer the version declared above
        exclude group: 'com.marklogic', module: 'marklogic-client-api'
    }
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.commons:commons-text:1.9'
    datahubLogging 'ch.qos.logback:logback-classic:1.2.11'
    // For installer program
    implementation "com.beust:jcommander:1.82"

    //https://github.com/jaegertracing/jaeger-client-java/tree/master/jaeger-core
    implementation("io.jaegertracing:jaeger-core:1.8.0")
    implementation("io.jaegertracing:jaeger-thrift:1.8.0")

    // JUnit Jupiter API and TestEngine implementation
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testImplementation "org.junit.platform:junit-platform-commons:${junitPlatformVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

    testImplementation group: 'org.springframework', name: 'spring-test', version: '5.3.19'

    testImplementation 'xmlunit:xmlunit:1.6'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
    testImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'
    testImplementation 'org.easymock:easymock:4.3'
    testImplementation 'ch.qos.logback:logback-classic:1.2.11'
    testImplementation 'org.slf4j:log4j-over-slf4j:1.7.36'
    testImplementation("com.marklogic:mlcp:10.0.9") {
      exclude group: 'org.apache.avro', module: 'avro-tools'
      exclude group: 'org.apache.commons', module: 'commons-csv'
    }

    // Provides support for invoking marklogic-unit-test tests via JUnit
    testImplementation ('com.marklogic:marklogic-junit5:1.2.0'){
        // prefer the version declared above
        exclude group: 'com.marklogic', module: 'marklogic-client-api'
    }
    mlBundle "com.marklogic:marklogic-unit-test-modules:1.2.0"
}

import com.marklogic.mgmt.ManageClient
import com.marklogic.mgmt.resource.hosts.HostManager

configurations.all {
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "log4j", module: "log4j"
}

// The Spring Boot bootJar task produces an executable jar with all dependencies that runs the DHF installer
// This jar is only meant to be used by the DHS team for installing DHF into DHS
bootJar {
    archiveClassifier = "installer"
    mainClassName = "com.marklogic.hub.dhs.installer.Main"
    from(configurations.datahubLogging.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

task clientJar(type: Jar) {
    description = "Build an executable jar to be used by DHF clients; as of 5.2.0, this is just for running flows"
    manifest {
        attributes "Main-Class": "com.marklogic.hub.cli.client.Main"
    }
    archiveClassifier = "client"
    from(configurations.datahubLogging.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    exclude "spring-boot*.jar"
    exclude "*jaeger*.jar"
    with jar
}
build.dependsOn clientJar

node {
  // Version of node to use.
  version = '14.15.5'
  // Version of npm to use.
  npmVersion = '6.14.17'

  download = true

  distBaseUrl = "https://nodejs.org/dist"

  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodejs")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.projectDir}/src/trace-ui")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task cleanUI(type: Delete) {
  delete 'src/main/resources/ml-modules/root/trace-ui'
}

task npmInstallUI(type: NpmTask) {
    args = ['install']
    dependsOn tasks.cleanUI
}

task buildUI(type: NpmTask) {
    args = ['run', 'build.prod']
    dependsOn tasks.npmInstallUI
}

task copyUIAssets(type: Copy) {
    from 'src/trace-ui/dist'
    into 'src/main/resources/ml-modules/root/trace-ui'
    dependsOn tasks.buildUI
}

processResources {
    filesMatching("**/version.properties") {
        expand(project: project)
    }

    // Includes installer-specific files into the jar produced by bootJar
    from ("src/installer") {
        into "."
    }
}

ext {
    dataServicesGroup = "Data Services"
    dataServicesPath = "src/main/resources/ml-modules/root/data-hub/5/data-services"
}

task generateSourceDataInterface(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask, group: dataServicesGroup) {
    serviceDeclarationFile = dataServicesPath + "/mastering/service.json"
}

task generateStepDefinitionInterface(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask, group: dataServicesGroup) {
    serviceDeclarationFile = dataServicesPath + "/stepDefinition/service.json"
}

task generateDataServiceInterfaces {
    description = "Generate Java interfaces for all Data Services. Must run this from the ./marklogic-data-hub directory"
    dependsOn {
        tasks.findAll { task -> dataServicesGroup.equals(task.group)}
    }
}

if (!(
    gradle.startParameter.taskNames*.toLowerCase().contains("bootrun") ||
        gradle.startParameter.taskNames*.toLowerCase().contains("test") ||
        gradle.startParameter.taskNames*.toLowerCase().contains("testunit") ||
        gradle.startParameter.taskNames*.toLowerCase().contains("publishplugins") ||
        gradle.startParameter.taskNames*.toLowerCase().contains("publishtomavenlocal") ||
        gradle.startParameter.taskNames*.toLowerCase().contains("javadoc") ||
        gradle.startParameter.taskNames*.toLowerCase().contains("bootjar") ||
        gradle.startParameter.taskNames*.toLowerCase().contains("marklogic-data-hub:bootjar") ||
        gradle.startParameter.taskNames*.toLowerCase().contains("clientjar") ||
        gradle.startParameter.taskNames*.toLowerCase().contains("marklogic-data-hub:clientjar") ||
        project.hasProperty('skipui')
)
) {
    processResources.dependsOn copyUIAssets
}

tasks.clean.dependsOn cleanUI

jar{
    enabled = true
}

bootRun {
    enabled = false
}

javadoc {
   options.overview = 'src/main/resources/overview.html'
}

Node pomCustomizations = new NodeBuilder(). project {
    name 'marklogic-data-hub'
    packaging 'jar'
    textdescription 'Library for Creating an Operational Data Hub on MarkLogic'
    url 'https://github.com/marklogic/marklogic-data-hub'

    scm {
        url 'git@github.com:marklogic/marklogic-data-hub.git'
        connection 'scm:git@github.com:marklogic/marklogic-data-hub.git'
        developerConnection 'scm:git@github.com:marklogic/marklogic-data-hub.git'
    }

    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            name 'MarkLogic'
            email 'java-sig@marklogic.com'
            organization 'MarkLogic'
            organizationUrl 'https://www.marklogic.com'
        }
        developer {
            name 'MarkLogic Github Contributors'
            email 'general@developer.marklogic.com'
            organization 'Github Contributors'
            organizationUrl 'https://github.com/marklogic/marklogic-data-hub/graphs/contributors'
        }
    }
}

publishing {
    publications {
        main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifact bootJar
            artifact clientJar

            pom.withXml {
                asNode().appendNode('description', pomCustomizations.textdescription.text())
                asNode().append(pomCustomizations.developers)
                asNode().append(pomCustomizations.name)
                asNode().append(pomCustomizations.packaging)
                asNode().append(pomCustomizations.url)
                asNode().append(pomCustomizations.scm)
                asNode().append(pomCustomizations.licenses)
            }
        }
    }
    repositories {
        maven {
            if (project.hasProperty("mavenUser")) {
                credentials {
                    username mavenUser
                    password mavenPassword
                }
            }
            url publishUrl
        }
    }
}

ext {
    // mlAppConfig is an instance of com.marklogic.appdeployer.AppConfig
    mlAppConfig {

        moduleTokensPropertiesSources = new ArrayList<>()

        // override some default values with our values
        modulesDatabaseName = mlModulesDbName
        triggersDatabaseName = mlStagingTriggersDbName
        schemasDatabaseName = mlStagingSchemasDbName
        restPort = Integer.parseInt(mlJobPort)

        // Configure custom tokens for our json files
        customTokens.put("%%mlStagingAppserverName%%", mlStagingAppserverName)
        customTokens.put("%%mlStagingPort%%", mlStagingPort)
        customTokens.put("%%mlStagingDbName%%", mlStagingDbName)

        customTokens.put("%%mlFinalAppserverName%%", mlFinalAppserverName)
        customTokens.put("%%mlFinalPort%%", mlFinalPort)
        customTokens.put("%%mlFinalDbName%%", mlFinalDbName)

        customTokens.put("%%mlJobAppserverName%%", mlJobAppserverName)
        customTokens.put("%%mlJobPort%%", mlJobPort)
        customTokens.put("%%mlJobDbName%%", mlJobDbName)

        customTokens.put("%%mlModulesDbName%%", mlModulesDbName)
        customTokens.put("%%mlStagingTriggersDbName%%", mlStagingTriggersDbName)
        customTokens.put("%%mlStagingSchemasDbName%%", mlStagingSchemasDbName)

        modulePaths = ["marklogic-data-hub/src/main/resources/ml-modules", "marklogic-data-hub/src/test/ml-modules"]
    }
}

def propFile = file("gradle.properties")
boolean sslRun = Boolean.parseBoolean(System.properties['ssl'])
boolean certAuth = Boolean.parseBoolean(System.properties['certauth'])
def props = new Properties()
propFile.withInputStream { props.load(it) }

task bootstrap(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.marklogic.bootstrap.Installer'
}

task teardown(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.marklogic.bootstrap.UnInstaller'
}

test {
    useJUnitPlatform()
    minHeapSize = "128m"
    maxHeapSize = "256m"
    exclude 'com/marklogic/bootstrap/**'
    classpath = project.sourceSets.test.runtimeClasspath
}

task testAcceptance(type: Test) {
    useJUnitPlatform  {
        include 'com/marklogic/hub/**'
        if (!(certAuth || sslRun)){
            include 'com/marklogic/hub/PiiE2E.class'
        }
    }
}

task testIntegration(type: Test) {
    useJUnitPlatform  {
        include 'com/marklogic/hub_integration/**'
    }
}

task testBootstrap(type: Test) {
    useJUnitPlatform  {
        include 'com/marklogic/bootstrap/**'
    }
}

task testUnit(type: Test) {
    description = "Run the marklogic-unit-test tests, which also forces those modules to be loaded"
    useJUnitPlatform {
        include 'com/marklogic/hub_unit_test/RunMarkLogicUnitTestsTest*'
    }
}

task setupSSL{
    doFirst{
        def bootStrapHost = null
        if(sslRun || certAuth){
            com.marklogic.mgmt.ManageClient manageClient = new ManageClient(new com.marklogic.mgmt.ManageConfig(mlHost, 8002, mlSecurityUsername, mlSecurityPassword))
            com.marklogic.mgmt.resource.hosts.HostManager hostManager = new HostManager(manageClient)
            bootStrapHost = hostManager.getHostNames().get(0)
            if(! bootStrapHost.toLowerCase().contains("marklogic.com")){
                throw new GradleException("The test with current options will run only in marklogic.com domain")
            }

            javaexec {
                classpath = sourceSets.test.runtimeClasspath
                main = 'com.marklogic.bootstrap.SSLsetup'
                args = [mlHost, mlSecurityUsername, mlSecurityPassword, certAuth, sslRun]
                }
            }
            if(sslRun) {
                //checking if one of the property is already set
                if(props.getProperty('mlJobSimpleSsl')==null){
                    propFile.append("\n" +
                            "mlJobSimpleSsl=true\n" +
                            "mlFinalSimpleSsl=true\n" +
                            "mlAdminScheme=https\n" +
                            "mlManageScheme=https\n" +
                            "mlAppServicesSimpleSsl=true\n" +
                            "mlManageSimpleSsl=true\n" +
                            "mlStagingSimpleSsl=true")
                }
            }
            if(certAuth) {
                if(props.getProperty('mlStagingAuth')==null){
                    propFile.append("\n" +
                            "mlStagingAuth=certificate\n" +
                            "mlFinalAuth=certificate\n" +
                            "mlHost="+bootStrapHost+"\n"+
                            "mlAdminScheme=https\n" +
                            "mlManageScheme=https\n" +
                            "mlJobAuth=certificate")
            }
        }
    }
}

bootstrap.finalizedBy mlPrepareBundles // ensures that marklogic-unit-test is downloaded

setupSSL.dependsOn(testClasses)
bootstrap.dependsOn(setupSSL)
test.dependsOn(bootstrap)
testIntegration.dependsOn(bootstrap)
testAcceptance.dependsOn(bootstrap)
testBootstrap.dependsOn(bootstrap)
//Uncomment this line if hub has to be uninstalled after test
//test.finalizedBy(teardown)
