buildscript {
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE"
		classpath "com.moowork.gradle:gradle-node-plugin:1.3.1"
	}
}

sourceCompatibility = "9"
targetCompatibility = "9"

apply plugin: "java"
apply plugin: "org.springframework.boot"
apply plugin: 'maven-publish'
apply plugin: "io.spring.dependency-management"
apply plugin: 'war'
apply plugin: "com.moowork.node"

mainClassName = "com.marklogic.hub.oneui.Application"

ext {
	taskGroup = "Spring Boot UI"
}

ext.junit4Version        = '4.12'
ext.junitVintageVersion  = '4.12.0-RC3'
ext.junitPlatformVersion = '1.3.1'
ext.junitJupiterVersion  = '5.3.1'

bootJar {
	baseName = springBootJarName
}

repositories {
	jcenter()
	mavenCentral()
	mavenLocal()
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-web"
	compile group: 'org.springframework.security', name: 'spring-security-core', version: '5.2.1.RELEASE'
	compile group: 'org.springframework.security', name: 'spring-security-config', version: '5.2.1.RELEASE'
	compile group: 'org.springframework.security', name: 'spring-security-web', version: '5.2.1.RELEASE'
	compile group: 'org.springframework', name: 'spring-web', version: '5.2.2.RELEASE'
	compile group: 'org.springframework', name: 'spring-webmvc', version: '5.2.2.RELEASE'
	compile group: 'org.springframework', name: 'spring-websocket', version: '5.2.2.RELEASE'
	compile("org.springframework.boot:spring-boot-starter-websocket")
	compile("org.springframework.boot:spring-boot-starter-thymeleaf")

	compile("org.aspectj:aspectjweaver:1.8.9")
	compile("org.springframework:spring-messaging")
	compile "com.marklogic:marklogic-client-api:5.0.1"
    compile project(":marklogic-data-hub")

	//spring boot test libs
	testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.3.RELEASE'
	testImplementation 'org.springframework.security:spring-security-test'
	// JUnit Jupiter API and TestEngine implementation
	testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
	testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

	testCompile "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"
}

task installDependencies(type: NpmTask, group: taskGroup) {
	description = "Install UI dependencies before building the UI files"
	args = ["install"]
	execOverrides { it.workingDir = reactUiPath }
}

task buildUi(type: NpmTask, dependsOn: installDependencies, group: taskGroup) {
	description = "Builds the UI files so that they can be copied to the Spring Boot application"
	args = ["run", "build"]
	execOverrides { it.workingDir = reactUiPath }
}

task deleteSpringBootUiFiles(type: Delete, group: taskGroup) {
	description = "Delete the UI files that may have already been copied over to the Spring Boot UI directory"
	delete springBootUiPath
}

task copyUiFiles(type: Copy, dependsOn: deleteSpringBootUiFiles, group: taskGroup) {
	description = "Copies the UI files to a directory where Spring Boot will include them in the executable bootJar file"
	from reactUiPath + "/build"
	into springBootUiPath
}

// Before the Spring Boot jar is built, build the UI files and copy them over
build.dependsOn buildUi
build.dependsOn copyUiFiles
copyUiFiles.mustRunAfter buildUi


test {
	exclude 'com/marklogic/hub/curation/integrationtests/**'
	exclude 'com/marklogic/hub/oneui/integrationtests/**'
	useJUnitPlatform()
}
