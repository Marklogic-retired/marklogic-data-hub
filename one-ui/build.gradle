buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE"
        classpath "com.github.node-gradle:gradle-node-plugin:2.2.3"
    }
}

apply plugin: "java"
apply plugin: "org.springframework.boot"
apply plugin: 'maven-publish'
apply plugin: "io.spring.dependency-management"
apply plugin: 'war'
apply plugin: "com.github.node-gradle.node"

mainClassName = "com.marklogic.hub.oneui.Application"

sourceCompatibility = "9"
targetCompatibility = "9"

ext {
    taskGroup = "Spring Boot UI"
}

ext.junit4Version = '4.12'
ext.junitVintageVersion = '4.12.0-RC3'
ext.junitPlatformVersion = '1.3.1'
ext.junitJupiterVersion = '5.3.1'

bootJar {
    baseName = springBootJarName
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile group: 'org.springframework.security', name: 'spring-security-core', version: '5.2.1.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-config', version: '5.2.1.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-web', version: '5.2.1.RELEASE'
    compile group: 'org.springframework', name: 'spring-web', version: '5.2.2.RELEASE'
    compile group: 'org.springframework', name: 'spring-webmvc', version: '5.2.2.RELEASE'
    compile group: 'org.springframework', name: 'spring-websocket', version: '5.2.2.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.2.2.RELEASE'
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")

    compile("org.aspectj:aspectjweaver:1.8.9")
    compile("org.springframework:spring-messaging")

    compile project(":marklogic-data-hub")

    //spring boot test libs
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.3.RELEASE'
    testImplementation 'org.springframework.security:spring-security-test'
    // JUnit Jupiter API and TestEngine implementation
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

    testCompile "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.0.0'
}
node {
    // Version of node to use.
    version = '12.16.1'

    // // Version of npm to use.
    npmVersion = '6.13.4'

    download = true
    distBaseUrl = 'http://nodejs.org/dist'

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/ui")


}
task installDependencies(type: NpmTask, group: taskGroup) {
    description = "Install UI dependencies before building the UI files"
    args = ["install"]
    execOverrides { it.workingDir = reactUiPath }
}

task buildUi(type: NpmTask, dependsOn: installDependencies, group: taskGroup) {
    description = "Builds the UI files so that they can be copied to the Spring Boot application"
    args = ["run", "build"]
    execOverrides { it.workingDir = reactUiPath }
}

task deleteSpringBootUiFiles(type: Delete, group: taskGroup) {
    description = "Delete the UI files that may have already been copied over to the Spring Boot UI directory"
    delete springBootUiPath
}

task copyUiFiles(type: Copy, dependsOn: deleteSpringBootUiFiles, group: taskGroup) {
    description = "Copies the UI files to a directory where Spring Boot will include them in the executable bootJar file"
    from reactUiPath + "/build"
    into springBootUiPath
}

// Before the Spring Boot jar is built, build the UI files and copy them over
build.dependsOn buildUi
build.dependsOn copyUiFiles
copyUiFiles.mustRunAfter buildUi


test {
    exclude 'com/marklogic/hub/curation/integrationtests/**'
    exclude 'com/marklogic/hub/oneui/integrationtests/**'
    useJUnitPlatform()
}
