/*
 * Copyright 2012-2019 MarkLogic Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://developer.marklogic.com/maven2' }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:1.2.1"
    }
}


plugins {
    id 'java-test-fixtures'
    id 'net.saliman.properties' version '1.4.6'
    id "groovy"
    id "java-gradle-plugin"
    id "maven-publish"
    id 'org.springframework.boot' version '2.7.18'
    id "io.spring.dependency-management" version "1.1.4"
}

apply plugin: "com.gradle.plugin-publish"

sourceCompatibility = 1.8
targetCompatibility = 1.8

bootJar.enabled = false
jar.enabled = true

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://developer.marklogic.com/maven2' }
}

dependencies {
    implementation gradleApi()
    implementation (project(':marklogic-data-hub'))
    implementation ('com.marklogic:ml-gradle:4.6.0')
    implementation 'org.jdom:jdom2:2.0.6.1'
    implementation 'com.marklogic:marklogic-xcc:11.0.2'
    implementation 'org.slf4j:slf4j-simple:2.0.9'

    testFixturesApi "org.junit.jupiter:junit-jupiter:5.10.1"
    testImplementation "org.junit.jupiter:junit-jupiter:5.10.1"

    testImplementation 'commons-io:commons-io:2.15.1'
    testImplementation localGroovy()
    testImplementation 'xmlunit:xmlunit:1.3'
    testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'
    testImplementation('org.spockframework:spock-core:1.3-groovy-2.5') {
        exclude module: 'groovy-all'
    }
    testImplementation ('org.springframework.boot:spring-boot-starter-test:2.7.18')  {
        exclude module: "logback-classic"
    }
}

springBoot {
    mainClass = 'com.marklogic.hub.ApplicationConfig'
}


test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
    }
    // fullcycle tests also exercise provisioning, so on thie PR removing
    // TODO put fullcycle tests in another project?
    //include 'com/marklogic/gradle/fullcycle/**'
    include 'com/marklogic/gradle/task/**'
    classpath = project.sourceSets.main.runtimeClasspath + project.sourceSets.test.runtimeClasspath
}

tasks.register('testFullCycle', Test) {
    useJUnit {
        include 'com/marklogic/gradle/fullcycle/**'
    }
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
    from sourceSets.main.allGroovy
}

bootRun {
    enabled = false
}

group = 'com.marklogic'

publishing {
    publications {
        main(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
    repositories {
        maven {
          if(project.hasProperty("mavenUser")) {
            credentials {
            username mavenUser
            password mavenPassword
            }
          }
          url publishUrl
        }
    }
}

gradlePlugin {
    website = 'https://marklogic.github.io/marklogic-data-hub/'
    vcsUrl = 'https://github.com/marklogic/marklogic-data-hub.git'
    description = 'ml-data-hub A gradle plugin for Data Hub tasks'

    plugins {
        mldatahubPlugin {
            id = 'com.marklogic.ml-data-hub'
            implementationClass = 'com.marklogic.gradle.DataHubPlugin'
            displayName = 'Gradle tasks for MarkLogic Data Hub'
            description = 'Gradle plugin for configuring and deploying the MarkLogic Data Hub'
            tags.set(['marklogic', 'data hub'])
        }
    }
}
