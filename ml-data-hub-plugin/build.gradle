/*
 * Copyright 2012-2019 MarkLogic Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */



plugins {
    id 'net.saliman.properties' version '1.5.1'
    id "groovy"
    id "java-gradle-plugin"
    id "maven-publish"
    id "com.gradle.plugin-publish" version "1.3.0"
    id 'org.springframework.boot' version '2.7.18'
    id "io.snyk.gradle.plugin.snykplugin" version "0.4"
}

apply plugin: "io.spring.dependency-management"

sourceCompatibility = 1.8
targetCompatibility = 1.8

bootJar.enabled = false
jar {
    enabled = true
    archiveClassifier = ''
}

// See https://github.com/snyk/gradle-plugin for docs
snyk {
    severity = 'medium'
    api = snykToken
    autoDownload = true
    autoUpdate = true
}

repositories {
    mavenCentral()
    maven { url 'https://developer.marklogic.com/maven2' }
}

dependencies {
    implementation gradleApi()
    implementation(project(':marklogic-data-hub')) {
        exclude group: 'ch.qos.logback'
    }
    implementation('com.marklogic:ml-gradle:4.8.0') {
        exclude group: 'ch.qos.logback'
    }
    implementation 'commons-io:commons-io:2.16.1'
    implementation "org.apache.commons:commons-lang3:3.17.0"
    //implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation 'org.springframework.boot:spring-boot-autoconfigure:2.7.18'

    testImplementation localGroovy()
    testImplementation gradleTestKit()
    testImplementation 'xmlunit:xmlunit:1.6'


    testImplementation('org.spockframework:spock-spring:2.0-M3-groovy-3.0') {
        exclude module: 'groovy-all'
        exclude module: 'groovy-json'
        exclude module: 'groovy-macro'
        exclude module: 'groovy-nio'
        exclude module: 'groovy-sql'
        exclude module: 'groovy-test'
        exclude module: 'groovy-xml'
        exclude module: 'groovy-templates'
        exclude module: 'groovy'
    }
    testImplementation('org.spockframework:spock-core:2.0-M3-groovy-3.0') {
        exclude module: 'groovy-all'
        exclude module: 'groovy-json'
        exclude module: 'groovy-macro'
        exclude module: 'groovy-nio'
        exclude module: 'groovy-sql'
        exclude module: 'groovy-test'
        exclude module: 'groovy-xml'
        exclude module: 'groovy-templates'
        exclude module: 'groovy'
    }

    testImplementation('org.springframework.boot:spring-boot-starter-test:2.1.8.RELEASE') {
        exclude module: "logback-classic"
    }
    testImplementation 'org.jdom:jdom2:2.0.6.1'

}

tasks.named("bootJar") {
    mainClass = 'com.marklogic.hub.ApplicationConfig'
}


test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
    }
    // fullcycle tests also exercise provisioning, so on thie PR removing
    // TODO put fullcycle tests in another project?
    //include 'com/marklogic/gradle/fullcycle/**'
    include 'com/marklogic/gradle/task/**'
    classpath = project.sourceSets.main.runtimeClasspath + project.sourceSets.test.runtimeClasspath
    useJUnitPlatform()
}

tasks.register('testFullCycle', Test) {
    useJUnit {
        include 'com/marklogic/gradle/fullcycle/**'
    }
}

bootRun {
    enabled = false
}

group = 'com.marklogic'
version = '4.3.3'
java { withSourcesJar() }

publishing {
    publications {
        main(MavenPublication) {
            groupId = 'com.marklogic.ml-data-hub'
            artifactId = 'jar'
            version = project.version
            from components.java
        }
    }
    repositories {
        maven {
            if (project.hasProperty("mavenUser")) {
                credentials {
                    username mavenUser
                    password mavenPassword
                }
            }
            url publishUrl
            allowInsecureProtocol = true
        }
    }
}

gradlePlugin {
    website = 'https://marklogic.github.io/marklogic-data-hub/'
    vcsUrl = 'https://github.com/marklogic/marklogic-data-hub.git'
    description = 'ml-data-hub A gradle plugin for Data Hub tasks'

    plugins {
        create('mldatahubPlugin') {
            id = 'com.marklogic.ml-data-hub'
            implementationClass = 'com.marklogic.gradle.DataHubPlugin'
            displayName = 'Gradle tasks for MarkLogic Data Hub'
            description = 'Gradle plugin for configuring and deploying the MarkLogic Data Hub'
            tags.set(['marklogic', 'data hub'])
        }
    }
}
