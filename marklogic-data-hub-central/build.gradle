buildscript {
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:2.2.8.RELEASE"
		classpath "com.github.node-gradle:gradle-node-plugin:2.2.4"
        classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:1.0.2'
	}
}

plugins {
    id "net.saliman.properties" version "1.5.1"
    id "java"
    id "nebula.ospackage" version "8.4.1"
}

apply plugin: "org.springframework.boot"
apply plugin: "maven-publish"
apply plugin: "io.spring.dependency-management"
apply plugin: "war"
apply plugin: "com.github.node-gradle.node"
apply plugin: "jsonschema2pojo"
apply from: 'build-rpm.gradle'

sourceCompatibility = "9"
targetCompatibility = "9"

ext {
    taskGroup = "Spring Boot UI"
}

ext.junitPlatformVersion = '1.4.2'
ext.junitJupiterVersion = '5.4.2'

bootWar {
    baseName = springBootJarName
    // Used for running hub-central as a system service
    // Also allows us to customize options like JAVA_HOME using a config file
    // https://docs.spring.io/spring-boot/docs/current/reference/html/deployment.html#deployment-script-customization-when-it-runs
    launchScript()
}

// To pass Gradle properties for HubCentral to Spring Boot, copy them into the JVM environment
bootRun.doFirst {
    environment "mlHost", mlHost
    environment "hubUseLocalDefaults", hubUseLocalDefaults
    environment "hubSsl", hubSsl
    environment "spring.profiles.active", springProfiles
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {
    // No idea why this is necessary, but when Gradle brings the core project over, it bumps the okhttp3 dependency
    // down from 4.4.0 to 3.x, which then breaks all kinds of stuff. So exclude the two okhttp3 dependencies and
    // then explicitly depending on the desired versions.
    compile (project(":marklogic-data-hub")) {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
        exclude group: "com.squareup.okhttp3", module: "logging-interceptor"
    }

    // Excluding okhttp3 dependency as it bumps down the dependency from 4.4.0 to 3.x
    implementation ('com.microsoft.azure:azure-keyvault-secrets-spring-boot-starter:2.2.4') {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
    }
    implementation 'com.azure:azure-storage-blob:12.8.0'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.847'
    implementation 'com.amazonaws:aws-java-sdk-ssm:1.11.847'

    runtime "com.squareup.okhttp3:okhttp:4.4.0"
    runtime "com.squareup.okhttp3:logging-interceptor:4.4.0"

    // Used to generate Swagger docs at /swagger-ui.html
    compile "io.springfox:springfox-swagger2:2.9.2"
    compile 'io.springfox:springfox-swagger-ui:2.9.2'

    // Main dependency for a Spring Boot web application
    compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"

    // Dependency to serialize and deserialize XML. The default version for the current springBootVersion is referenced.
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml"

    // Used for hosting static resources when running as an executable jar/war
    runtime "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"

    // Enables Spring Security - https://docs.spring.io/spring-security/site/docs/current/reference/html5/
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"

    // Enables WebSocket - https://spring.io/guides/gs/messaging-stomp-websocket/
    compile "org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}"

    // Enables Spring Boot actuator - https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready
    runtime "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"

    testImplementation(testFixtures(project(":marklogic-data-hub")))

    testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.springframework.security:spring-security-test:${springSecurityVersion}"

    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

    testCompile "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"
    testCompile "org.mockito:mockito-core:3.0.0"
    testCompile "org.mockito:mockito-junit-jupiter:3.0.0"
}

// We need this to access test resources such as "entity-reference-model" project from core data hub project
sourceSets.test.resources.srcDir "../marklogic-data-hub/src/test/resources"

// jsonSchema2Pojo is used to generate Java classes that are then used in Swagger annotations for documentation purposes
// See more at https://github.com/joelittlejohn/jsonschema2pojo/tree/master/jsonschema2pojo-gradle-plugin
jsonSchema2Pojo {
    source = files("../specs/models")
    targetDirectory = file("src/main/java")
    targetPackage = "com.marklogic.hub.central.schemas"
}

task deleteSchemaPojos(type: Delete) {
    delete fileTree("src/main/java/com/marklogic/hub/central/schemas") {
        include "*.java"
    }
}
generateJsonSchema2Pojo.mustRunAfter deleteSchemaPojos

task generateSchemaPojos {
    description = "Delete all existing schema classes, then use jsonSchema2Pojo to generate new ones"
    dependsOn = ["deleteSchemaPojos", "generateJsonSchema2Pojo"]
}

node {
    // Version of node to use.
    version = '12.18.3'

    // // Version of npm to use.
    npmVersion = '6.14.6'

    download = true
    distBaseUrl = "${nodeDistributionBaseUrl}"

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/ui")


}
task installDependencies(type: NpmTask, group: taskGroup) {
    description = "Install UI dependencies before building the UI files"
    args = ["install"]
    execOverrides { it.workingDir = reactUiPath }
}

task buildUi(type: NpmTask, dependsOn: installDependencies, group: taskGroup) {
    description = "Builds the UI files so that they can be copied to the Spring Boot application"
    args = ["run", "build"]
    execOverrides { it.workingDir = reactUiPath }
}

task deleteSpringBootUiFiles(type: Delete, group: taskGroup) {
    description = "Delete the UI files that may have already been copied over to the Spring Boot UI directory"
    delete springBootUiPath
}

task copyUiFiles(type: Copy, dependsOn: deleteSpringBootUiFiles, group: taskGroup) {
    description = "Copies the UI files to a directory where Spring Boot will include them in the executable bootJar file"
    from reactUiPath + "/build"
    into springBootUiPath
}

// Before the Spring Boot jar is built, build the UI files and copy them over
if (!(
    gradle.startParameter.taskNames*.toLowerCase().contains("publishplugins") ||
        gradle.startParameter.taskNames*.toLowerCase().contains("bintrayUpload") ||
        gradle.startParameter.taskNames*.toLowerCase().contains("javadoc") ||
        // bootRun doesn't need the UI, as it's assumed that the UI is being run separately via npm start
        gradle.startParameter.taskNames*.toLowerCase().contains("bootrun") ||
        gradle.startParameter.taskNames*.toLowerCase().contains("generateschemapojos") ||
        project.hasProperty('skipui')
)
) {
    tasks.processResources.dependsOn(buildUi, copyUiFiles)
}

test {
	exclude 'com/marklogic/hub/curation/integrationtests/**'
	exclude 'com/marklogic/hub/central/integrationtests/**'
    exclude 'com/marklogic/hub/curation/controllers/fullcycle/**'
	useJUnitPlatform()
}

tasks.buildRpm.dependsOn(buildUi, copyUiFiles, bootWar)

task testUI(type: NpmTask, dependsOn: installDependencies, group: taskGroup){
    description = "Runs the UI unit tests"
    args = ["run", "test"]
    execOverrides { it.workingDir = reactUiPath }
}
test.finalizedBy('testUI')

build.dependsOn buildRpm

