buildscript {
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "com.github.node-gradle:gradle-node-plugin:2.2.4"
        classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:1.1.1'
	}
}

plugins {
    id "net.saliman.properties"
    id "application"

    // Used for packaging HC as an rpm file
    id "nebula.ospackage" version "8.4.1"

    id "io.snyk.gradle.plugin.snykplugin" version "0.4"
}

apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "war"
apply plugin: "com.github.node-gradle.node"
apply plugin: "jsonschema2pojo"
apply from: 'build-rpm.gradle'

// See https://github.com/snyk/gradle-plugin for docs
snyk {
    severity = 'medium'
    api = snykToken
    autoDownload = true
    autoUpdate = true
}

application {
    mainClass = 'com.marklogic.hub.central.Application'
}

ext {
    taskGroup = "Spring Boot UI"
}

bootWar {
    archiveBaseName = springBootJarName
    // Used for running hub-central as a system service
    // Also allows us to customize options like JAVA_HOME using a config file
    // https://docs.spring.io/spring-boot/docs/current/reference/html/deployment.html#deployment-script-customization-when-it-runs
    launchScript()
}

// To pass Gradle properties for HubCentral to Spring Boot, copy them into the JVM environment
bootRun.doFirst {
    environment "mlHost", mlHost
    environment "spring.profiles.active", springProfiles
}

dependencies {
    // No idea why, but when Gradle brings the core project over, it bumps the okhttp3 dependency
    // down from 4.x to 3.x, which then breaks all kinds of stuff. So exclude the two okhttp3 dependencies and
    // then explicitly depending on the desired versions.
    implementation (project(":marklogic-data-hub")) {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
        exclude group: "com.squareup.okhttp3", module: "logging-interceptor"
    }
    // Depend on the versions that ML Java Client 5.5.0 depends on
    implementation "com.squareup.okhttp3:okhttp:4.7.2"
    implementation "com.squareup.okhttp3:logging-interceptor:4.7.2"

    implementation "org.apache.commons:commons-lang3:3.12.0"

    implementation 'com.azure:azure-identity:1.2.5'
    implementation 'com.azure:azure-security-keyvault-secrets:4.2.8'
    implementation 'com.azure:azure-storage-blob:12.8.0'

    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.30'
    implementation 'com.amazonaws:aws-java-sdk-ssm:1.12.30'

    constraints {
        // Using 2.12.4 to match Spring Boot
        implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.12.4') {
            because 'gradle automatically ups the version to 2.12.4 but Palamida scan still thinks that version 2.6.7 ' +
                    'is being used so setting the version forcibly here to avoid confusing Palamida'
        }
    }


    // Used to generate Swagger docs at /swagger-ui.html
    implementation "io.springfox:springfox-boot-starter:3.0.0"

    // Main dependency for a Spring Boot web application
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"

    // Dependency to serialize and deserialize XML; using 2.12.4 to match Spring Boot
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.12.4"

    // Used for hosting static resources when running as an executable jar/war
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"

    // Enables Spring Security - https://docs.spring.io/spring-security/site/docs/current/reference/html5/
    implementation "org.springframework.security:spring-security-web:${springSecurityVersion}"
    implementation "org.springframework.security:spring-security-config:${springSecurityVersion}"

    // Enables WebSocket - https://spring.io/guides/gs/messaging-stomp-websocket/
    implementation "org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}"

    // Enables Spring Boot actuator - https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"

    testImplementation(testFixtures(project(":marklogic-data-hub")))

    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.springframework.security:spring-security-test:${springSecurityVersion}"

    testImplementation "javax.ws.rs:javax.ws.rs-api:2.1.1"
}

// We need this to access test resources such as "entity-reference-model" project from core data hub project
sourceSets.test.resources.srcDir "../marklogic-data-hub/src/test/resources"

// jsonSchema2Pojo is used to generate Java classes that are then used in Swagger annotations for documentation purposes
// See more at https://github.com/joelittlejohn/jsonschema2pojo/tree/master/jsonschema2pojo-gradle-plugin
// Note that when this plugin registers itself, it forces compileJava to depend on it. So anytime Java code is compiled,
// this plugin will generate Java classes for our JSON schemas.
jsonSchema2Pojo {
    source = files("../specs/models")
    targetDirectory = file("src/main/java")
    targetPackage = "com.marklogic.hub.central.schemas"
}

task deleteSchemaPojos(type: Delete) {
    delete fileTree("src/main/java/com/marklogic/hub/central/schemas") {
        include "*.java"
    }
}
generateJsonSchema2Pojo.mustRunAfter deleteSchemaPojos

task generateSchemaPojos {
    description = "Delete all existing schema classes, then use jsonSchema2Pojo to generate new ones"
    dependsOn = ["deleteSchemaPojos", "generateJsonSchema2Pojo"]
}

node {
    // Version of node to use.
    version = '14.15.4'

    // // Version of npm to use.
    npmVersion = '6.14.10'

    download = true
    distBaseUrl = "${nodeDistributionBaseUrl}"

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/ui")
}

task installDependencies(type: NpmTask, group: taskGroup) {
    description = "Install UI dependencies before building the UI files"
    args = ["install"]
    execOverrides { it.workingDir = reactUiPath }
}

task buildUi(type: NpmTask, dependsOn: installDependencies, group: taskGroup) {
    description = "Builds the UI files so that they can be copied to the Spring Boot application"
    args = ["run", "build"]
    execOverrides { it.workingDir = reactUiPath }
}

task deleteSpringBootUiFiles(type: Delete, group: taskGroup) {
    description = "Delete the UI files that may have already been copied over to the Spring Boot UI directory"
    delete springBootUiPath
}

task copyUiFiles(type: Copy, dependsOn: deleteSpringBootUiFiles, group: taskGroup) {
    description = "Copies the UI files to a directory where Spring Boot will include them in the executable bootJar file"
    from reactUiPath + "/build"
    into springBootUiPath
}

task lintUI(type: NpmTask, dependsOn: installDependencies, group: taskGroup) {
    description = "Linting UI files. Task fails, if any lint errors, with exit value = 1 and success with exit value = 0, if no lint errors"
    args = ["run", "lint", "."]
    execOverrides { it.workingDir = reactUiPath }
}


// When creating the HC war file, need to build the UI files and add them to the classpath so that the war file includes them
ext {
    def taskNames = gradle.startParameter.taskNames*.toLowerCase()
    shouldBuildUiFiles = taskNames.contains("build") || taskNames.contains("buildrpm") || taskNames.contains("bootwar")
}
if (shouldBuildUiFiles) {
    tasks.processResources.dependsOn(buildUi, copyUiFiles)
}


test {
	useJUnitPlatform()
}

tasks.buildRpm.dependsOn bootWar

task testUI(type: NpmTask, dependsOn: installDependencies, group: taskGroup){
    description = "Runs the UI unit tests"
    args = ["run", "test"]
    execOverrides { it.workingDir = reactUiPath }
}

build.dependsOn buildRpm

