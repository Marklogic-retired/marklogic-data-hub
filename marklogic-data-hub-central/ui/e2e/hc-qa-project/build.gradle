import com.marklogic.gradle.task.HubTask;
import com.marklogic.client.DatabaseClient;

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }
    dependencies {
        if (project.hasProperty("testing")) {
            classpath "com.marklogic:ml-data-hub:5.4-SNAPSHOT"
        } else {
            classpath "gradle.plugin.com.marklogic:ml-data-hub:5.4.0"
        }
    }
}

plugins {
    id "net.saliman.properties" version "1.5.1"
    id "java"
}
apply plugin: "com.marklogic.ml-data-hub"

repositories {
    jcenter()
    maven { url "http://developer.marklogic.com/maven2/" }
}

configurations {
    mlcp
}

dependencies {
    mlcp "com.marklogic:mlcp:10.0.2"
    mlcp files("lib")
}

task loadThesaurus(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    username = project.findProperty("mlUsername")
    password = project.findProperty("mlPassword")
    command = "IMPORT"
    database = "data-hub-FINAL"
    input_file_path = "input/thesaurus"
    output_collections = "http://marklogic.com/xdmp/thesaurus,http://marklogic.com/xdmp/documents"
    output_permissions = "data-hub-common,read,data-hub-common,update"
    output_uri_replace = ".*input,''"
    host = project.findProperty("mlHost")
    ssl = project.findProperty("hubSsl")
    port = Integer.parseInt(project.findProperty("mlcpPort"))
}

hubDeployAsDeveloper.finalizedBy("loadThesaurus")

class DocCount extends HubTask {
    DatabaseClient client
    String script
    int expected
    @TaskAction
    def getDocCount() {
        try {
            int result = Integer.parseInt(client.newServerEval().javascript(script).evalAs(String.class));
            if(result != expected) {
                throw new GradleException("Record count did not match. Expected ${expected} in ${client.getDatabase()} database, got "+ result)
            } else {
                println("Flow/steps were run successfully and got expected number of records in ${client.getDatabase()} database")
            }
        } finally {
            client.release()
        }
    }
}

task verifyStagingCounts(type: DocCount) {
    client = hubConfig.newStagingClient()
    script = "cts.estimate(cts.collectionQuery(['loadCustomersJSON', 'loadCustomersXML', 'order-input', 'loadPersonJSON', 'loadPersonXML']))"
    expected = 40
}

task verifyFinalCounts(type: DocCount) {
    client = hubConfig.newFinalClient()
    script = "cts.estimate(cts.collectionQuery(['mdm-dictionary', 'mapCustomersJSON', 'mapCustomersXML', 'map-orders', 'mapPersonJSON']))"
    expected = 35
}
