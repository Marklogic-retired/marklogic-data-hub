buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }

    }
    dependencies {
        if (project.hasProperty("testing")) {
            classpath "com.marklogic:ml-data-hub:6.0.0-rc1"
        } else {
            classpath "com.marklogic:ml-data-hub:5.7.1"
        }
    }
}

plugins {
    id "net.saliman.properties" version "1.5.1"
    id "java"
}
apply plugin: "com.marklogic.ml-data-hub"

repositories {
    mavenCentral()
    maven { url "https://developer.marklogic.com/maven2/" }
    maven {url "https://nexus.marklogic.com/repository/maven-releases/"}
}

configurations {
    mlcp
}

dependencies {
    mlcp "com.marklogic:mlcp:10.0.9"
    mlcp files("lib")
}

task loadThesaurus(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    username = project.findProperty("mlUsername")
    password = project.findProperty("mlPassword")
    command = "IMPORT"
    database = "data-hub-FINAL"
    input_file_path = "input/thesaurus"
    output_collections = "http://marklogic.com/xdmp/thesaurus,http://marklogic.com/xdmp/documents"
    output_permissions = "data-hub-common,read,data-hub-common,update"
    output_uri_replace = ".*input,''"
    host = project.findProperty("mlHost")
    ssl = project.findProperty("hubSsl")
    port = Integer.parseInt(project.findProperty("mlcpPort"))
}

hubDeployAsDeveloper.finalizedBy("loadThesaurus")

class DocCount extends com.marklogic.gradle.task.HubTask {
    @Internal com.marklogic.client.DatabaseClient client
    @Input String script
    @Input int expected

    @TaskAction
    def calculateDocCount() {
        try {
            int result = Integer.parseInt(client.newServerEval().javascript(script).evalAs(String.class));
            if(result != expected) {
                throw new GradleException("Record count did not match. Expected ${expected} in ${client.getDatabase()} database, got "+ result)
            } else {
                println("Flow/steps were run successfully and got expected number of records in ${client.getDatabase()} database")
            }
        } finally {
            client.release()
        }
    }
}

task loadListToIgnore(type: com.marklogic.gradle.task.ServerEvalTask) {
  description 'Load required files for values to ignore functionality'
  client = hubConfig.newStagingClient()
  javascript = '''
 declareUpdate();
  const permissions = [
      xdmp.permission('data-hub-common-writer', 'update'),
      xdmp.permission('data-hub-common', 'read')
    ];

  const collections = [
    'http://marklogic.com/data-hub/exclusion-list',
    'loadValuesToIgnore'
  ];

  const uri1  = 'values-to-ignore1.json'
  const list1 = {"FirstName": "Robert","LastName": "Gonzales","SSN": "222-22-2221","Address": "456 Jones St","ZipCode": "42222","Verified": true}
  xdmp.documentInsert(uri1, list1, {permissions,collections})

  const uri2  = 'values-to-ignore2.json'
  const list2 = {"FirstName": "Bob","LastName": "Gonzales","SSN": "222-22-2221","Address": "456 Jones St","ZipCode": "42222","Verified": true}
  xdmp.documentInsert(uri2, list2, {permissions,collections})

  const uri3  = 'values-to-ignore3.json'
  const list3 = {"FirstName": "Marge","LastName": "Bouvier Simpson","SSN": "222-22-2221","Address": "456 Jones S","ZipCode": "22222","Verified": true}
  xdmp.documentInsert(uri3, list3, {permissions,collections})

  const uri4  = 'values-to-ignore4.json'
  const list4 = {"FirstName": "Margot","LastName": "Bouvier Simpson","SSN": "222-22-2221","Address": "456 Jones St","ZipCode": "22222","Verified": true}
  xdmp.documentInsert(uri4, list4, {permissions,collections})
  '''
}

task verifyStagingCounts(type: DocCount) {
    client = hubConfig.newStagingClient()
    script = "fn.count(cts.uris('', [], cts.collectionQuery(['loadCustomersJSON', 'loadCustomersXML', 'order-input', 'loadPersonJSON', 'loadPersonXML'])))"
    expected = 40
}

task verifyFinalCounts(type: DocCount) {
    client = hubConfig.newFinalClient()
    script = "fn.count(cts.uris('', [], cts.collectionQuery(['mdm-dictionary', 'mapCustomersJSON', 'mapCustomersXML', 'map-orders', 'mapPersonJSON'])))"
    expected = 35
}

task addDocProperties(type: com.marklogic.gradle.task.ServerEvalTask) {
    doFirst {
    client = hubConfig.newFinalClient()
    xquery = "(" +
                "xdmp:document-set-properties(\"/xml/customers/CustXMLDoc1.xml\", (<foo />))," +
                "xdmp:document-set-properties(\"/thesaurus/nicknames.xml\", (<foo />))" +
             ")"
    }
}

task clearJobsContent(type: com.marklogic.gradle.task.ServerEvalTask) {
    doFirst {
        client = hubConfig.newJobDbClient()
        xquery = "(" +
                "cts:collections() ! xdmp:collection-delete(.)" +
                ")"
    }
}

task clearStagingContent(type: com.marklogic.gradle.task.ServerEvalTask) {
    doFirst {
        client = hubConfig.newStagingClient()
        xquery = "(" +
                "cts:collections() ! xdmp:collection-delete(.)" +
                ")"
    }
}

task clearFinalContent(type: com.marklogic.gradle.task.ServerEvalTask) {
    doFirst {
        client = hubConfig.newFinalClient()
        xquery = "(" +
                "cts:collections() ! xdmp:collection-delete(.)" +
                ")"
    }
}

def stepsForFlow = [ personJSON: Arrays.asList("1","2","3"), personXML: Arrays.asList("1")]

["CurateCustomerJSON","CurateCustomerXML", "CurateCustomerWithRelatedEntitiesJSON", "personJSON", "personXML", "convertedFlow", "CurateClientJSON", "officeFlow", "productFlow"].each {theFlowName ->
    task "run${theFlowName}" (type: com.marklogic.gradle.task.RunFlowTask, group: "Run flow") {
        description = "Run the steps for flow ${theFlowName}"
        flowName = theFlowName
        steps = stepsForFlow[theFlowName]
    }
}

task runFlows() {
    def tasks = [runCurateCustomerJSON, runCurateCustomerXML, runCurateCustomerWithRelatedEntitiesJSON, runpersonJSON, runpersonXML, runconvertedFlow, runCurateClientJSON, runofficeFlow, runproductFlow]
    for (int i = 0; i < tasks.size() - 1; i++) {
        tasks[i + 1].mustRunAfter(tasks[i])
    }
    dependsOn(tasks)
}

task reset() {
    dependsOn clearStagingContent
    dependsOn clearFinalContent
    dependsOn hubDeployArtifacts
    dependsOn hubDeployUserArtifacts
    dependsOn runFlows
    dependsOn addDocProperties
    dependsOn loadListToIgnore
    dependsOn verifyStagingCounts
    dependsOn verifyFinalCounts
}