{
  "name": "CurateCustomerJSON",
  "steps": {
    "1": {
      "stepId": "loadCustomersJSON-ingestion"
    },
    "2": {
      "stepId": "mapCustomersJSON-mapping"
    },
    "3" : {
      "name" : "generate-dictionary",
      "description" : "",
      "options" : {
        "additionalCollections" : [ ],
        "sourceQuery" : "cts.documentQuery('/flows/CurateCustomerJSON.flow.json')",
        "targetEntity" : "",
        "collections" : [ "generate-dictionary" ],
        "sourceDatabase" : "data-hub-FINAL",
        "sourceCollection" : "",
        "outputFormat" : "json",
        "targetDatabase" : "data-hub-FINAL"
      },
      "customHook" : null,
      "batchSize" : 0,
      "threadCount" : 0,
      "stepDefinitionName" : "generate-dictionary",
      "stepDefinitionType" : "CUSTOM"
    },
    "4" : {
      "name" : "match-customer",
      "description" : "",
      "options" : {
        "provenanceGranularityLevel": "fine",
        "additionalCollections" : [ ],
        "sourceQuery" : "cts.collectionQuery([\"mapCustomersJSON\"])",
        "targetEntity" : "Customer",
        "sourceDatabase" : "data-hub-FINAL",
        "collections" : [ "match-customer", "Customer" ],
        "matchOptions" : {
          "dataFormat" : "json",
          "algorithms" : {
            "algorithm" : [ {
              "name" : "double-metaphone",
              "function" : "double-metaphone",
              "namespace" : "http://marklogic.com/smart-mastering/algorithms",
              "at" : "/com.marklogic.smart-mastering/algorithms/double-metaphone.xqy"
            }, {
              "name" : "thesaurus",
              "function" : "thesaurus",
              "namespace" : "http://marklogic.com/smart-mastering/algorithms",
              "at" : "/com.marklogic.smart-mastering/algorithms/thesaurus.xqy"
            }, {
              "name" : "zip-match",
              "function" : "zip-match",
              "namespace" : "http://marklogic.com/smart-mastering/algorithms",
              "at" : "/com.marklogic.smart-mastering/algorithms/zip.xqy"
            }, {
              "name" : "standard-reduction",
              "function" : "standard-reduction"
            }, {
              "name" : "dob-match",
              "function" : "dob-match",
              "namespace" : "http://marklogic.com/smart-mastering/algorithms",
              "at" : "/custom-modules/custom/dob-match.xqy"
            } ]
          },
          "collections" : {
            "content" : [ ]
          },
          "scoring" : {
            "add" : [ {
              "propertyName" : "name",
              "weight" : "10"
            }],
            "expand" : [ {
              "propertyName" : "name",
              "algorithmRef" : "double-metaphone",
              "weight" : "10",
              "dictionary" : "/dictionary/names.xml",
              "distanceThreshold" : "100"
            }, {
              "propertyName" : "name",
              "algorithmRef" : "thesaurus",
              "weight" : "10",
              "thesaurus" : "/thesaurus/nicknames.xml"
            }, {
              "propertyName" : "birthDate",
              "algorithmRef" : "dob-match",
              "weight" : "10"
            }, {
              "propertyName" : "Address.zip",
              "algorithmRef" : "zip-match",
              "zip" : [ {
                "origin" : 5,
                "weight" : "10"
              }, {
                "origin" : 9,
                "weight" : "10"
              } ]
            } ],
            "reduce" : [ {
              "allMatch" : {
                "property" : [ "Address.street" ]
              },
              "algorithmRef" : "standard-reduction",
              "weight" : "5"
            } ]
          },
          "actions" : {
            "action" : [ {
              "name" : "customMatch",
              "at" : "/custom-modules/custom/custom-match-action.sjs",
              "function" : "customMatch"
            } ]
          },
          "thresholds" : {
            "threshold" : [ {
              "above" : "19",
              "label" : "Match",
              "action" : "merge"
            }, {
              "above" : "9",
              "label" : "Likely Match",
              "action" : "notify"
            }, {
              "above" : "4",
              "label" : "Slight Match",
              "action" : "customMatch"
            } ]
          },
          "tuning" : {
            "maxScan" : 200
          }
        },
        "sourceCollection" : "mapCustomersJSON",
        "outputFormat" : "json",
        "targetDatabase" : "data-hub-FINAL"
      },
      "customHook" : { },
      "batchSize" : 0,
      "threadCount" : 0,
      "stepDefinitionName" : "default-matching",
      "stepDefinitionType" : "MATCHING"
    },
    "5" : {
      "name" : "merge-customer",
      "description" : "",
      "options" : {
        "provenanceGranularityLevel": "fine",
        "additionalCollections" : [ ],
        "sourceQuery" : "cts.collectionQuery([\"match-customer\"])",
        "targetEntity" : "Customer",
        "sourceDatabase" : "data-hub-FINAL",
        "collections" : [ "master-customer", "Customer" ],
        "mergeOptions" : {
          "matchOptions" : "",
          "algorithms" : {
            "stdAlgorithm" : {
              "timestamp" : {
                "path" : "/envelope/headers/createdOn"
              }
            },
            "custom" : [ {
              "name" : "mergeDob",
              "function" : "mergeDob",
              "at" : "/custom-modules/custom/dob-merge.sjs"
            } ],
            "collections" : {
              "onNoMatch" : {
                "add" : {
                  "collection" : [ "no-match" ]
                },
                "remove" : {
                  "collection" : [ "" ]
                },
                "set" : {
                  "collection" : [ "" ]
                }
              },
              "onNotification" : {
                "add" : {
                  "collection" : [ "likely-match" ]
                },
                "remove" : {
                  "collection" : [ "" ]
                },
                "set" : {
                  "collection" : [ "" ]
                }
              },
              "onMerge" : {
                "add" : {
                  "collection" : [ "" ]
                },
                "remove" : {
                  "collection" : [ "no-match", "likely-match" ]
                },
                "set" : {
                  "collection" : [ "" ]
                }
              }
            }
          },
          "mergeStrategies" : [ {
            "sourceWeights" : [ ],
            "name" : "retain-single-value",
            "algorithmRef" : "standard",
            "maxValues" : "1",
            "length" : {
              "weight" : "10"
            }
          } ],
          "merging" : [ {
            "propertyName" : "Address.street",
            "algorithmRef" : "standard",
            "maxValues" : "1",
            "length" : {
              "weight" : "10"
            },
            "sourceWeights" : [ ],
            "strategy" : "retain-single-value"
          }, {
            "propertyName" : "birthDate",
            "algorithmRef" : "mergeDob",
            "sourceWeights" : [ ]
          }, {
            "propertyName" : "Address.zip",
            "algorithmRef" : "standard",
            "maxValues" : "1",
            "length" : {
              "weight" : "10"
            },
            "sourceWeights" : [ ],
            "strategy" : "retain-single-value"
          } ]
        },
        "sourceCollection" : "match-customer",
        "outputFormat" : "json",
        "targetDatabase" : "data-hub-FINAL"
      },
      "customHook" : { },
      "batchSize" : 0,
      "threadCount" : 0,
      "stepDefinitionName" : "default-merging",
      "stepDefinitionType" : "MERGING"
    },
    "6": {
      "name" : "master-customer",
      "description" : "",
      "options" : {
        "acceptsBatch": true,
        "stepUpdate": true,
        "sourceDatabase": "data-hub-FINAL",
        "targetDatabase": "data-hub-FINAL",
        "provenanceGranularityLevel": "fine",
        "additionalCollections" : [ ],
        "sourceQuery" : "cts.collectionQuery([\"mapCustomersJSON\"])",
        "targetEntity" : "Customer",
        "collections" : [ "master-customer", "Customer" ],
        "mergeOptions" : {
          "algorithms" : {
            "stdAlgorithm" : {
              "timestamp" : {
                "path" : "/envelope/headers/createdOn"
              }
            },
            "custom" : [ {
              "name" : "mergeDob",
              "function" : "mergeDob",
              "at" : "/custom-modules/custom/dob-merge.sjs"
            } ],
            "collections" : {
              "onNoMatch" : {
                "add" : {
                  "collection" : [ "no-match" ]
                },
                "remove" : {
                  "collection" : [ "" ]
                },
                "set" : {
                  "collection" : [ "" ]
                }
              },
              "onNotification" : {
                "add" : {
                  "collection" : [ "likely-match" ]
                },
                "remove" : {
                  "collection" : [ "" ]
                },
                "set" : {
                  "collection" : [ "" ]
                }
              },
              "onMerge" : {
                "add" : {
                  "collection" : [ "" ]
                },
                "remove" : {
                  "collection" : [ "no-match", "likely-match" ]
                },
                "set" : {
                  "collection" : [ "" ]
                }
              }
            }
          },
          "mergeStrategies" : [ {
            "sourceWeights" : [ ],
            "name" : "retain-single-value",
            "algorithmRef" : "standard",
            "maxValues" : "1",
            "length" : {
              "weight" : "10"
            }
          } ],
          "merging" : [ {
            "propertyName" : "Address.street",
            "algorithmRef" : "standard",
            "maxValues" : "1",
            "length" : {
              "weight" : "10"
            },
            "sourceWeights" : [ ],
            "strategy" : "retain-single-value"
          }, {
            "propertyName" : "birthDate",
            "algorithmRef" : "mergeDob",
            "sourceWeights" : [ ]
          }, {
            "propertyName" : "Address.zip",
            "algorithmRef" : "standard",
            "maxValues" : "1",
            "length" : {
              "weight" : "10"
            },
            "sourceWeights" : [ ],
            "strategy" : "retain-single-value"
          } ]
        },
        "matchOptions" : {
          "dataFormat" : "json",
          "algorithms" : {
            "algorithm" : [ {
              "name" : "double-metaphone",
              "function" : "double-metaphone",
              "namespace" : "http://marklogic.com/smart-mastering/algorithms",
              "at" : "/com.marklogic.smart-mastering/algorithms/double-metaphone.xqy"
            }, {
              "name" : "thesaurus",
              "function" : "thesaurus",
              "namespace" : "http://marklogic.com/smart-mastering/algorithms",
              "at" : "/com.marklogic.smart-mastering/algorithms/thesaurus.xqy"
            }, {
              "name" : "zip-match",
              "function" : "zip-match",
              "namespace" : "http://marklogic.com/smart-mastering/algorithms",
              "at" : "/com.marklogic.smart-mastering/algorithms/zip.xqy"
            }, {
              "name" : "standard-reduction",
              "function" : "standard-reduction"
            }, {
              "name" : "dob-match",
              "function" : "dob-match",
              "namespace" : "http://marklogic.com/smart-mastering/algorithms",
              "at" : "/custom-modules/custom/dob-match.xqy"
            } ]
          },
          "collections" : {
            "content" : [ ]
          },
          "scoring" : {
            "add" : [ {
              "propertyName" : "name",
              "weight" : "10"
            }],
            "expand" : [ {
              "propertyName" : "name",
              "algorithmRef" : "double-metaphone",
              "weight" : "10",
              "dictionary" : "/dictionary/names.xml",
              "distanceThreshold" : "100"
            }, {
              "propertyName" : "name",
              "algorithmRef" : "thesaurus",
              "weight" : "10",
              "thesaurus" : "/thesaurus/nicknames.xml"
            }, {
              "propertyName" : "birthDate",
              "algorithmRef" : "dob-match",
              "weight" : "10"
            }, {
              "propertyName" : "Address.zip",
              "algorithmRef" : "zip-match",
              "zip" : [ {
                "origin" : 5,
                "weight" : "10"
              }, {
                "origin" : 9,
                "weight" : "10"
              } ]
            } ],
            "reduce" : [ {
              "allMatch" : {
                "property" : [ "Address.street" ]
              },
              "algorithmRef" : "standard-reduction",
              "weight" : "5"
            } ]
          },
          "actions" : {
            "action" : [ {
              "name" : "customMatch",
              "at" : "/custom-modules/custom/custom-match-action.sjs",
              "function" : "customMatch"
            } ]
          },
          "thresholds" : {
            "threshold" : [ {
              "above" : "19",
              "label" : "Match",
              "action" : "merge"
            }, {
              "above" : "9",
              "label" : "Likely Match",
              "action" : "notify"
            }, {
              "above" : "4",
              "label" : "Slight Match",
              "action" : "customMatch"
            } ]
          },
          "tuning" : {
            "maxScan" : 200
          }
        },
        "sourceCollection" : "mapCustomersJSON",
        "outputFormat" : "json",
        "permissions": "data-hub-common,read,data-hub-common,update"
      },
      "customHook" : { },
      "batchSize" : 0,
      "threadCount" : 0,
      "stepDefinitionName" : "default-mastering",
      "stepDefinitionType" : "MASTERING"
    }
  },
  "lastUpdated": "2020-06-04T23:01:35.566392Z"
}
