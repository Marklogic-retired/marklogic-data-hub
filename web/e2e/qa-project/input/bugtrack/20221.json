{"id":20221, "kind":"Bug", "createdAt":"2012-12-06T11:54:33.7112-08:00", "status":"Will not fix", "title":"fn:replace returns \"Invalid regular expression\" if regex is too long", "category":"xdmp", "severity":"Major", "priority":{"level":"5", "title":""}, "submittedBy":{"username":"fsnow", "name":"Frank Snow", "email":"fsnow@marklogic.com"}, "assignTo":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}, "description":"I was trying to parse out 7 parameters  from a string of about 1600 characters where most of the string is fixed. I narrowed down the error to the case below where a string matching itself returns an error at length 1464, but not if shorter. This limit is the same in 5.0-4.1 and 6.0-2. The error also occurs with fn:analyze-string(), but not with fn:matches().\r\n\r\nThe error is:\r\n\r\nXDMP-REGEX: (err:FORX0002) fn:replace(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...\", \"\") -- Invalid regular expression\r\n\r\n\r\n", "samplequery":"declare function local:character-repeat($c, $count)\r\n{\r\n  fn:string-join(\r\n    for $i in (1 to $count)\r\n    return $c\r\n  , \"\")\r\n};\r\n\r\nlet $long := local:character-repeat(\"a\", 1464)\r\nreturn fn:replace($long, $long, \"\")", "sampledata":"", "version":"5.0-4.1", "tofixin":"5.0-5", "fixedin":"N/A", "platform":"all", "memory":"", "processors":"", "note":"", "subscribers":[{"username":"fsnow", "name":"Frank Snow", "email":"fsnow@marklogic.com"}, {"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}, {"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}], "attachments":[], "relationships":[{"type":"", "to":""}], "clones":[], "cloneOf":"", "support":{"headline":"", "supportDescription":"", "publishStatus":"Not Ready", "tickets":[], "customerImpact":{"level":"N/A", "title":""}, "workaround":""}, "tags":["xdmp", "fsnow"], "changeHistory":[{"time":"2012-12-08T23:08:32.657012-08:00", "updatedBy":{"username":"gvaidees", "name":"Ganesh Vaideeswaran", "email":"Ganesh.Vaideeswaran@marklogic.com"}, "change":{"status":{"from":"", "to":"Verify"}, "assignTo":{"from":{"username":"gvaidees", "name":"Ganesh Vaideeswaran", "email":"Ganesh.Vaideeswaran@marklogic.com"}, "to":{"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}}}, "files":[], "show":true}, {"time":"2012-12-08T23:08:32.657012-08:00", "updatedBy":{"username":"gvaidees", "name":"Ganesh Vaideeswaran", "email":"Ganesh.Vaideeswaran@marklogic.com"}, "change":{"assignTo":{"from":{"username":"gvaidees", "name":"Ganesh Vaideeswaran", "email":"Ganesh.Vaideeswaran@marklogic.com"}, "to":{"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}}}, "files":[], "show":true}, {"time":"2012-12-08T23:08:32.657012-08:00", "updatedBy":{"username":"gvaidees", "name":"Ganesh Vaideeswaran", "email":"Ganesh.Vaideeswaran@marklogic.com"}, "change":{"tofixin":{"from":"", "to":"5.0-5"}}, "files":[], "show":true}, {"time":"2012-12-10T12:40:59.380955-08:00", "updatedBy":{"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}, "change":{"assignTo":{"from":{"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}, "to":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}}}, "files":[], "show":true}, {"time":"2013-01-03T20:52:44.192042-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"This limit is imposed by TRE. The following stack throws error:\r\n REG_ESPACE,\t\t/* Out of memory.  */\r\n\r\n>\tMarkLogic.exe!regucomp(regex_t * preg=0x000000007d5d3460, const unsigned int * regex=0x000000007beb8590, unsigned __int64 len=1465, int cflags=128)  Line 136\tC\r\n \tMarkLogic.exe!xdmp::RegExp::RegExp(const std::basic_string<char,std::char_traits<char>,std::allocator<char> > & _regex=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bool _match=false, bool _s=false, bool _m=false, bool _i=false, bool _x=false, bool _p=false, bool _xmlschema=false)  Line 110 + 0x46 bytes\tC++\r\n \tMarkLogic.exe!xdmp::GlobalDynamicEnv::getTRE(const std::basic_string<char,std::char_traits<char>,std::allocator<char> > & regexp=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bool match=false, bool s=false, bool m=false, bool i=false, bool x=false, bool p=false, bool xmlschema=false)  Line 1175 + 0x80 bytes\tC++\r\n \tMarkLogic.exe!xdmp::xdmp_replace(const svc::Handle<xdmp::FourArgBuiltinExpr> & expr={...}, const xdmp::LocationInfo & lineno={...}, xdmp::DynamicEnv & dynamicEnv={...}, const svc::Handle<xdmp::StaticEnv> & hStaticEnv={...}, const svc::Handle<xdmp::Value> & v1={...}, const svc::Handle<xdmp::Value> & v2={...}, const svc::Handle<xdmp::Value> & v3={...}, const svc::Handle<xdmp::Value> & v4={...})  Line 1349 + 0x4a bytes\tC++\r\n \tMarkLogic.exe!xdmp::fn_replace(const svc::Handle<xdmp::FourArgBuiltinExpr> & expr={...}, const xdmp::LocationInfo & lineno={...}, xdmp::DynamicEnv & dynamicEnv={...}, const svc::Handle<xdmp::StaticEnv> & hStaticEnv={...}, const svc::Handle<xdmp::Value> & v1={...}, const svc::Handle<xdmp::Value> & v2={...}, const svc::Handle<xdmp::Value> & v3={...}, const svc::Handle<xdmp::Value> & v4={...})  Line 1922 + 0x66 bytes\tC++"}, {"time":"2013-01-03T21:05:40.430606-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"The here is a modified form of the test that clarifies that there are limitations on the regex pattern only and not on the input.\r\n\r\ndeclare function local:character-repeat($c, $count)\r\n{\r\n  fn:string-join(\r\n    for $i in (1 to $count)\r\n    return $c\r\n  , \"\")\r\n};\r\n \r\nlet $long1 := local:character-repeat(\"a\", 10000)\r\nlet $long2 := local:character-repeat(\"a\", 1465)\r\nreturn fn:replace($long1, $long2, \"\")"}, {"time":"2013-01-03T21:10:00.164555-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"We typically do not change code in the third party library. I would recommend that we just document the limitation."}, {"time":"2013-01-09T21:33:25.784778-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"On Wed, 09 Jan 2013 13:18:19 -0800, Gajanan Chinchwadkar <Gajanan.Chinchwadkar@marklogic.com> wrote:\r\n\r\n> Mary,\r\n>\r\n> I don't know if you had a chance to look at this bug in the 5.0-5 \r\n> triage meeting. This bug is about the limit on the regex pattern size \r\n> that is imposed by TRE. I have added a small portion of stack in the bug.\r\n>\r\n> I think we should not fix TRE; just document the limitation. Please \r\n> let me know what is your take on it.\r\n>\r\n> Rgds,\r\n>\r\n> Gajanan\r\n\r\nYeah, I think that's fine in this case.\r\n\r\n//mh\r\n"}, {"time":"2013-01-09T21:35:42.894675-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Danny,\r\n\r\nThis limitation just needs to be documented. It is applicable to fn:replace() and fn:analyze-string(). Patterns of length more than 1463 do not work."}, {"time":"2013-01-09T21:35:42.894675-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{"status":{"from":"", "to":"Will not fix"}, "assignTo":{"from":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "to":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}}}, "files":[], "show":true}, {"time":"2013-01-09T21:35:42.894675-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{"assignTo":{"from":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "to":{"username":"dsokolsky", "name":"Danny Sokolsky", "email":"dsokolsky@marklogic.com"}}}, "files":[], "show":true}], "updatedAt":"2013-01-09T21:35:42.894675-08:00", "renderDescriptionAs":"normal", "renderSampleQueryAs":"normal"}