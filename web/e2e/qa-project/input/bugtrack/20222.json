{"id":20222, "kind":"Bug", "createdAt":"2012-12-06T12:43:32.008072-08:00", "status":"Closed", "title":"crash with 'order by' ", "category":"XQuery", "severity":"Critical", "priority":{"level":"5", "title":""}, "submittedBy":{"username":"rpelton", "name":"Rick Pelton", "email":"rick.pelton@marklogic.com"}, "assignTo":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}, "description":"Filed on behalf of Gazelle / Twin Dolphin. With 6.0-2 certain 'order by' clauses crash the server.\r\n\r\nHere's a simple query that requires no configuration. It crashes out of the box with qconsole and the Documents database. The idea is that the documents might contain /a/c or /a/b/c, and so we enumerate both paths rather than using /a//c.\r\n\r\n(for $i in cts:search(\r\ncollection(), cts:and-query(()))\r\norder by $i/a/(. | b)/c\r\nreturn $i)[1 to 2]\r\n\r\n\r\nHere's a portion of the pstack:\r\n\r\nThread 188 (Thread 0x7f4e333ff700 (LWP 8778)):\r\n#0 0x000000345400f09d in waitpid () from /lib64/libpthread.so.0\r\n#1 0x00000000029bf9d9 in xdmp::pstack(char const*) ()\r\n#2 0x00000000029bfbda in sigsegvHandler ()\r\n#3 <signal handler called>\r\n#4 0x0000000002e975e1 in xdmp::UnionStepMatchTester::UnionStepMatchTester(svc::Handle<xdmp::StaticEnv> const&, svc::Handle<xdmp::StepMatchTester> const&, __gnu_cxx::__normal_iterator<svc::Handle<xdmp::PathExpr> const*, std::vector<svc::Handle<xdmp::PathExpr>, std::allocator<svc::Handle<xdmp::PathExpr> > > >, unsigned long, bool) ()\r\n#5 0x0000000001970a76 in xdmp::GeneralStepExpr::stepMatchTester(svc::Handle<xdmp::StepMatchTester> const&, bool, bool) const ()\r\n#6 0x00000000019bc69c in xdmp::NameTest::getOrderingRangeIndex(xdmp::DynamicEnv&, unsigned long, __gnu_cxx::__normal_iterator<svc::Handle<xdmp::StepExpr> const*, std::vector<svc::Handle<xdmp::StepExpr>, std::allocator<svc::Handle<xdmp::StepExpr> > > >, unsigned long, __gnu_cxx::__normal_iterator<svc::Handle<xdmp::StepExpr> const*, std::vector<svc::Handle<xdmp::StepExpr>, std::allocator<svc::Handle<xdmp::StepExpr> > > >, unsigned long, unsigned long, unsigned long&, xdmp::ScalarType&, unsigned long&, svc::Handle<xdmp::Query>&) const ()\r\n#7 0x00000000019583db in xdmp::AxisStepExpr::getOrderingRangeIndex(xdmp::DynamicEnv&, unsigned long, __gnu_cxx::__normal_iterator<svc::Handle<xdmp::StepExpr> const*, std::vector<svc::Handle<xdmp::StepExpr>, td::allocator<svc::Handle<xdmp::StepExpr> > > >, unsigned long, __gnu_cxx::__normal_iterator<svc::Handle<xdmp::StepExpr> const*, std::vector<svc::Handle<xdmp::StepExpr>, std::allocator<svc::Handle<xdmp::StepExpr> > > >, unsigned long, unsigned long, unsigned long&, xdmp::ScalarType&, unsigned long&, svc::Handle<xdmp::Query>&) const ()\r\n#8 0x00000000019617e8 in xdmp::PathExpr::getOrderingRangeIndex(xdmp::DynamicEnv&, unsigned long, __gnu_cxx::__normal_iterator<svc::Handle<xdmp::StepExpr> const*, std::vector<svc::Handle<xdmp::StepExpr>,std::allocator<svc::Handle<xdmp::StepExpr> > > >, unsigned long, unsigned long&, xdmp::ScalarType&, unsigned long&, svc::Handle<xdmp::Query>&) const ()\r\n#9 0x0000000001966425 in xdmp::FLWORExpr::flworCollectOrderingClauses(xdmp::DynamicEnv&, unsigned long, unsigned long, __gnu_cxx::__normal_iterator<svc::Handle<xdmp::StepExpr> const*, std::vector<svc::Handle<xdmp::StepExpr>, std::allocator<svc::Handle<xdmp::StepExpr> > > >, unsigned long, xdmp::Ordering&, xdmp::OrQuery&) const ()\r\n#10 0x00000000011f63c2 in xdmp::PathExpr::_forSearchOrderBy(xdmp::FLWOREnv&, xdmp::ForClause const&, xdmp::FLWORExpr const&, unsigned long, std::vector<svc::Handle<xdmp::StepExpr>, std::allocator<svc::Handle<xdmp::StepExpr> > >&, svc::Handle<xdmp::QueryVal>&, bool, bool, bool, xdmp::ScoreKind, float, std::vector<unsigned long, std::allocator<unsigned long> >&, svc::Handle<xdmp::NodeIterator>&, svc::Handle<xdmp::NodeIterator>&, svc::Handle<xdmp::Ordering>&) const ()\r\n#11 0x00000000011fa0d8 in xdmp::PathExpr::forSearchOrderBy1(xdmp::FLWOREnv&, xdmp::ForClause const&, xdmp::FLWORExpr const&, unsigned long, svc::Handle<xdmp::QueryVal>&, bool, bool, bool, xdmp::ScoreKind, float, std::vector<unsigned long, std::allocator<unsigned long> >&, std::vector<xdmp::FLWOROrderBy1Entry, std::allocator<xdmp::FLWOROrderBy1Entry> >&) const ()\r\n#12 0x00000000011a1cb1 in xdmp::CTSSearchExpr::forEvalOrderBy1(xdmp::FLWOREnv&, xdmp::ForClause const&, xdmp::FLWORExpr const&, unsigned long, std::vector<xdmp::FLWOROrderBy1Entry, std::allocator<xdmp::FLWOROrderBy1Entry> >&) const ()\r\n#13 0x000000000188b96f in xdmp::ForClause::flworEval(xdmp::FLWOREnv&, xdmp::FLWORExpr const&, unsigned long) const ()\r\n#14 0x0000000001871f92 in xdmp::FLWORExpr::subEval(xdmp::DynamicEnv&, long, unsigned long, svc::Handle<xdmp::Value>&) const ()\r\n#15 0x000000000188ca0d in xdmp::PredicateExpr::eval(xdmp::DynamicEnv&, svc::Handle<xdmp::Value>&) const ()\r\n#16 0x000000000187c71f in xdmp::StatementExpr::eval(xdmp::DynamicEnv&, svc::Handle<xdmp::Value>&) const ()\r\n#17 0x0000000002ed3ca7 in xdmp::MainModule::eval(xdmp::DynamicEnv&, svc::Handle<xdmp::Value>&) const ()\r\n\r\nWorkaround: remove the '(. | b)' portion of the XPath: order by $i/a//c\r\n", "samplequery":"", "sampledata":"", "version":"6.0-2", "tofixin":"6.0-3", "fixedin":"6.0-3", "platform":"all", "memory":"", "processors":"", "note":"", "subscribers":[{"username":"rpelton", "name":"Rick Pelton", "email":"rick.pelton@marklogic.com"}, {"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, {"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}], "attachments":[], "relationships":[{"type":"", "to":""}], "clones":[], "cloneOf":"", "support":{"headline":"Under certain circumstances, v6.0.2 server crashes when path in order by clause contains a union step ", "supportDescription":"MarkLogic Server v6.0.2.x crashes when path in order by clause contains a union step and one side of the union is a dot operator\r\n", "publishStatus":"Publish", "tickets":[], "customerImpact":{"level":"Medium", "title":"Requires significant or unnatural effort to work around issue or to prevent significant business impact"}, "workaround":""}, "tags":["XQuery", "rpelton"], "changeHistory":[{"time":"2012-12-06T12:43:32.008072-08:00", "updatedBy":{"username":"rpelton", "name":"Rick Pelton", "email":"rick.pelton@marklogic.com"}, "change":{"assignTo":{"from":{"username":"rpelton", "name":"Rick Pelton", "email":"rick.pelton@marklogic.com"}, "to":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}}}, "files":[], "show":true}, {"time":"2012-12-06T21:58:33.097125-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"123052", "paths":["xdmp/branches/b6_0/src/XQuery.cpp"], "affectedBugs":[]}, "comment":"Fix for bug:20222.\n"}, {"time":"2012-12-06T22:09:24.937073-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"123055", "paths":["xdmp/trunk/src/XQuery.cpp"], "affectedBugs":[]}, "comment":"Fix for bug:20222.\n"}, {"time":"2012-12-06T22:12:37.930406-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{"status":{"from":"", "to":"Test"}, "assignTo":{"from":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "to":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}}}, "files":[], "show":true, "comment":"An interesting test here will be to design a document that has paths satisfying both sides of the union and check what gets inserted in the range index using cts:values().\r\n\r\nAnother interesting test will be to insert document that satisfies path /a/c and second document with /a/b/c. The values node 'c' should be different in the two docs so that we can verify that the ordering is not messed up."}, {"time":"2012-12-07T03:02:45.633753-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{"assignTo":{"from":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "to":{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}}}, "files":[], "show":true}, {"time":"2013-03-21T15:24:48.439229-07:00", "updatedBy":{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}, "change":{"status":{"from":"", "to":"Ship"}, "assignTo":{"from":{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}, "to":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}}}, "files":[], "show":true, "comment":"Verified on build 6.0-20130221 that there is no crash. But there is still a case which does not work. I'll file a separate bug for that."}, {"time":"2013-04-22T16:28:08.804507-07:00", "updatedBy":{"username":"rpelton", "name":"Rick Pelton", "email":"rick.pelton@marklogic.com"}, "change":{"status":{"from":"", "to":"Closed"}, "assignTo":{"from":{"username":"rpelton", "name":"Rick Pelton", "email":"rick.pelton@marklogic.com"}, "to":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}}}, "files":[], "show":true}], "updatedAt":"2013-04-22T16:28:08.804507-07:00", "fixedAt":"2012-12-06T22:12:37.930406-08:00", "fixedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "shippedAt":"2013-03-21T15:24:48.439229-07:00", "shippedBy":{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}, "closedAt":"2013-04-22T16:28:08.804507-07:00", "closedBy":{"username":"rpelton", "name":"Rick Pelton", "email":"rick.pelton@marklogic.com"}, "renderDescriptionAs":"normal"}