{"id":20884, "kind":"Bug", "createdAt":"2013-02-21T14:56:58.525577-08:00", "status":"Closed", "title":"REGR: Difference in count in test reverse_query5.xml", "category":"xdmp", "severity":"Major", "priority":{"level":"5", "title":""}, "submittedBy":{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}, "assignTo":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}, "description":"MarkLogic Version 7.0-20130221\r\n\r\n1. Create new db, forest and associate them.\r\n2. Enable word searches, word positions and fast reverse searches.\r\n3. Load test data:\r\n\r\nfor $doc at $idx in\r\nxdmp:document-get(\"QA_HOME/testdata/3.2/lang_q1.xml\")//test\r\nlet $doc-uri := concat( \"/docs/dir\", xs:string(ceiling($idx div 8)), \"/doc\", $idx, \".xml\")\r\nlet $collections := ( \"coll-all\", if ( $doc[@xml:lang=\"en\"]) then \"en\" else if\r\n                        ( $doc[@xml:lang=\"fr\"]) then \"fr\" else ())\r\nreturn xdmp:document-insert($doc-uri, $doc, xdmp:default-permissions(), $collections);\r\n\r\nfor $i at $index in (1, 5, 10, 15, 20)\r\nlet $doc := <test>{for $j at $idx in $i to $i+5 return for $k in 1 to $idx return $j}</test>\r\nreturn xdmp:document-insert(concat(\"/docs/dir10/doc\",$index+80, \".xml\"), $doc)\r\n\r\n4. Load results file:\r\nxdmp:document-insert(\"/results.xml\", <results><filtered/><unfiltered/></results>)\r\n\r\n5. Create a fragment root with element 'res-set'.\r\n\r\n6. Load registered queries into the database:\r\n\r\n let $terms := (\"runs\", \"etes\", \"Isn't\", \"rubbish\", \"raghu's test plan rubbish\", \"parlez\",\"&#x0441;&#x0442;&#x0443;&#x043b; parler\")\r\nlet $terms2 := (\"running\", \"&#234;tes\", \"rubbish\", \"isn't\", \"test-plan\", \"good\", \"better &#x6f22;\")\r\nlet $langs := ( \"en\", \"fr\", \"foobar\")\r\nlet $stemming := (\"stemmed\", \"unstemmed\")\r\nlet $options := (\"default\", \"case-insensitive\", \"case-sensitive\",\"punctuation-insensitive\", \"punctuation-sensitive\", \"diacritic-insensitive\", \"diacritic-sensitive\")\r\nlet $elements := (\"both\")\r\nlet $distance := (0, 1, 2, 3, 4)\r\nlet $order := (\"ordered\", \"unordered\")\r\nfor $term at $idx in $terms\r\n return\r\n  for $lang in $langs\r\n   return\r\n    for $stem in $stemming\r\n     return\r\n      for $option in $options\r\n       return\r\n        for $element in $elements\r\n         return\r\n          for $dist in $distance\r\n           return\r\n            for $ord in $order\r\n             return\r\n                let $opt := if( $stem eq \"default\" and $option eq \"default\" and $lang eq \"default\") then ()\r\n                    else if($stem eq \"default\" and $option eq \"default\") then concat(\"lang=\",$lang)\r\n                    else if($stem eq \"default\" and $lang eq \"default\") then $option\r\n                    else if($option eq \"default\" and $lang eq \"default\") then $stem\r\n                    else if($stem eq \"default\") then ($option, concat(\"lang=\",$lang))\r\n                    else if($lang eq \"default\") then ($option, $stem)\r\n                    else if($option eq \"default\") then ($stem, concat(\"lang=\",$lang))\r\n                    else ($option, $stem, concat(\"lang=\",$lang))\r\n                let $e-names := if ( $element eq \"both\" ) then ( xs:QName(\"test\") , xs:QName(\"text\")) else xs:QName($element)\r\n                let $nq-opt := if ( $ord eq \"default\" ) then () else $ord\r\n                let $nq := cts:near-query((cts:word-query($term, $opt),cts:element-word-query($e-names, $terms2[$idx], $opt)), $dist, $nq-opt)\r\n                      let $query := cts:registered-query( cts:register($nq), \"unfiltered\")\r\n                let $save-exact-query := if($stem eq \"default\" and $option eq \"default\") then\r\n                                  let $nq := cts:near-query((cts:word-query($term, ($opt,\"exact\")),cts:element-word-query($e-names, $terms2[$idx], ($opt,\"exact\"))), $dist, $nq-opt)\r\n                                  let $q := cts:registered-query( cts:register($nq), \"unfiltered\")\r\n                                  return xdmp:document-insert(concat(\"/queries/r-q/r-q\", $idx, if($lang eq \"default\") then () else concat(\"-\",$lang),\"-exact\",if($ord eq \"default\") then () else concat(\"-\", $ord),\"-d\", $dist, \".xml\"), <query>{$q}</query>)                                   else ()\r\n                let $save-srch := xdmp:document-insert(concat(\"/queries/r-q/r-q\", $idx, if($lang eq \"default\") then () else concat(\"-\",$lang), if($stem eq \"default\") then () else concat(\"-\", $stem), if($option eq \"default\") then () else concat(\"-\", $option), if($ord eq \"default\") then () else concat(\"-\", $ord), \"-d\", $dist,\".xml\"), <query>{$query}</query>)\r\n                return $save-srch\r\n\r\n7. Run saved registered queries against data set:\r\nxquery version \"1.0-ml\";\r\ndeclare boundary-space preserve;\r\nimport module namespace ridx=\"http://marklogic.com/rev-idx\" at \"rev-idx.xqy\";\r\n\r\nfor $query in cts:search(/query, cts:directory-query(\"/queries/r-q/\"))\r\nlet $display-summary := fn:false()\r\norder by base-uri($query) collation \"http://marklogic.com/collation//MO\"\r\nreturn ridx:save-results($query, $display-summary)\r\n     \r\n8. check documents->matching queries mapping information for registered queries\r\n\r\n<unfiltered>{count(/results/unfiltered/*/*[contains(., \"r-q\")])}</unfiltered>,\r\n<filtered>{count(/results/filtered/*/*[contains(., \"r-q\")])}</filtered>\r\n\r\nExpected result: <unfiltered>12454</unfiltered><filtered>12454</filtered>\r\nObserved result: <unfiltered>8688</unfiltered><filtered>8688</filtered>", "samplequery":"", "sampledata":"", "version":"7.0-nightly", "tofixin":"7.0-ea1", "fixedin":"N/A", "platform":"all", "memory":"", "processors":"", "note":"", "subscribers":[{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}, {"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}], "attachments":[], "relationships":[{"type":"", "to":""}], "clones":[], "cloneOf":"", "support":{"headline":"", "supportDescription":"", "publishStatus":"Not Ready", "tickets":[], "customerImpact":{"level":"N/A", "title":""}, "workaround":""}, "tags":["xdmp", "msrinivasan"], "changeHistory":[{"time":"2013-02-21T14:56:58.525577-08:00", "updatedBy":{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}, "change":{"assignTo":{"from":{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}, "to":{"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}}}, "files":[], "show":true}, {"time":"2013-02-21T16:56:46.744156-08:00", "updatedBy":{"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Hi Maha,\r\nCan you narrow down which statement caused the problem?"}, {"time":"2013-02-22T11:42:41.798676-08:00", "updatedBy":{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}, "change":{"status":{"from":"", "to":"Closed"}, "assignTo":{"from":{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}, "to":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}}}, "files":[], "show":true, "comment":"I spoke with Mary about this and this is a duplicate of 20689. This only needs a key update in all 5.0, 6.0 and 7.0. I will do that now. Hence closing this bug. Thanks!"}], "updatedAt":"2013-02-22T11:42:41.798676-08:00", "closedAt":"2013-02-22T11:42:41.798676-08:00", "closedBy":{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}, "renderDescriptionAs":"normal"}