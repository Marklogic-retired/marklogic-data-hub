{"id":20312, "kind":"Bug", "createdAt":"2012-12-10T16:11:20.641013-08:00", "status":"Closed", "title":"d-node restart with lexis query", "category":"search", "severity":"Catastrophic", "priority":{"level":"5", "title":""}, "submittedBy":{"username":"fsalonga", "name":"Frank Salonga", "email":"franklin.salonga@marklogic.com"}, "assignTo":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}, "description":"from this case: https://help.marklogic.com/staff/Tickets/Ticket/View/12201\r\n\r\nd-node restarts when you submit the example query. note that you must have the indicated forest attached and the instance must be in a clustered configuration, with the query submitted via a query console window on the e-node.\r\n\r\nNote that Lexis requires this for functionality in their R3.5 release scheduled for this month. They will likely need a hotfix on top of 5.0-4.1.", "samplequery":"declare namespace lncr = \"http://www.lexis-nexis.com/lncr\";\r\n\r\nlet $query := cts:query(\r\n      <cts:and-query xmlns:cts=\"http://marklogic.com/cts\">\r\n                <cts:collection-query>\r\n                  <cts:uri>ONLINE</cts:uri>\r\n                </cts:collection-query>\r\n                <cts:directory-query>\r\n                  <cts:uri>/lnc/</cts:uri>\r\n                </cts:directory-query>\r\n                <cts:element-query>\r\n                  <cts:element xmlns:lncr=\"http://www.lexis-nexis.com/lncr\">lncr:segment</cts:element>\r\n                  <cts:and-query>\r\n                    <cts:element-attribute-range-query operator=\"=\">\r\n                      <cts:element xmlns:lncr=\"http://www.lexis-nexis.com/lncr\">lncr:segment</cts:element>\r\n                      <cts:attribute>name</cts:attribute>\r\n                      <cts:value xsi:type=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">name</cts:value>\r\n                      <cts:option>collation=http://marklogic.com/collation/codepoint</cts:option>\r\n                    </cts:element-attribute-range-query>\r\n                    <cts:word-query>\r\n                      <cts:text xml:lang=\"en\">work</cts:text>\r\n                      <cts:option>case-insensitive</cts:option>\r\n                      <cts:option>punctuation-insensitive</cts:option>\r\n                    </cts:word-query>\r\n                    <cts:not-query>\r\n                      <cts:or-query>\r\n                                <cts:word-query>\r\n                                  <cts:text xml:lang=\"en\">network</cts:text>\r\n                                  <cts:option>case-insensitive</cts:option>\r\n                                  <cts:option>punctuation-insensitive</cts:option>\r\n                                </cts:word-query>\r\n                      </cts:or-query>\r\n                    </cts:not-query>\r\n                  </cts:and-query>\r\n                </cts:element-query>\r\n                <cts:or-query>\r\n                  <cts:element-value-query weight=\"0\">\r\n                    <cts:element xmlns:lncr=\"http://www.lexis-nexis.com/lncr\">lncr:highLevelContentTypeIdentifier</cts:element>\r\n                    <cts:text xml:lang=\"en\">urn:hlct:2</cts:text>\r\n                  </cts:element-value-query>\r\n                </cts:or-query>\r\n      </cts:and-query>)\r\n\r\nlet $forest-id := xdmp:forest(\"ADMIN_MATERIALS_F1\")\r\nreturn cts:search(fn:doc(), $query, (), (), $forest-id)[1]//lncr:title\r\n", "sampledata":"relevant data is mounted in the ADMIN_MATERIALS_F1 forest on my workstation (fsalonga-z620), currently clustered to rh5-intel64-7", "version":"6.0-1", "tofixin":"6.0-2.1", "fixedin":"6.0-2.1", "platform":"linux(64-bit)", "memory":"", "processors":"", "note":"", "subscribers":[{"username":"fsalonga", "name":"Frank Salonga", "email":"franklin.salonga@marklogic.com"}, {"username":"cjl", "name":"Christopher Lindblad", "email":"cjl@cerisent.com"}, {"username":"mary", "name":"Mary Holstege", "email":"mary@cerisent.com"}, {"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, {"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}], "attachments":[{"name":"admin-materials-cert-package.xml", "uri":"root/support/bugtracking/attachments/20247/admin-materials-cert-package.xml"}, {"name":"571K-55Y0-004S-N1P8-00000-00.xml", "uri":"root/support/bugtracking/attachments/20247/571K-55Y0-004S-N1P8-00000-00.xml"}], "relationships":[{"type":"", "to":""}], "clones":[], "cloneOf":20247, "support":{"headline":"cts:not-query nested inside cts:element-query causes server restart in some cases.", "supportDescription":"In a scenario where the database has a large number of elements on which element-query is run and the element query has a cts:not query inside it, the server runs out of stack and restarts.", "publishStatus":"Publish", "tickets":[], "customerImpact":{"level":"High", "title":"Significant business impact with no reasonable workaround"}, "workaround":""}, "tags":["search", "fsalonga"], "changeHistory":[{"time":"2012-12-10T19:58:24.877414-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{"status":{"from":"", "to":"Verify"}, "assignTo":{"from":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "to":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}}}, "files":[], "show":true}, {"time":"2012-12-10T19:58:24.877414-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{"assignTo":{"from":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "to":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}}}, "files":[], "show":true}, {"time":"2012-12-10T19:58:24.877414-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{"tofixin":{"from":"", "to":"5.0-5"}}, "files":[], "show":true}, {"time":"2012-12-11T14:25:30.033526-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Verified the behavior by running the example query against the E-node. The D-node status does show a restart.\r\n\r\nThe next step in the investigation will be to reproduce the bug against a debug build. The forest is being copied right now to my machine."}, {"time":"2012-12-12T10:52:48.828796-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Errorlog on Frank's machine shows these errors.\r\n\r\n\r\n/var/opt/MarkLogic/Logs/ErrorLog_2.txt:2012-12-10 12:05:44.823 Alert: XDMP-FORES\r\nTERR: Error in merge of forest ADMIN_MATERIALS_F1: XDMP-MERGESPACE: Not merging \r\ndue to disk space limitations, need=1775MB, have=1554MB\r\n/var/opt/MarkLogic/Logs/ErrorLog_2.txt:2012-12-10 12:05:46.998 Error: ForestUpda\r\ntePath::clear: ADMIN_MATERIALS_F1 akeys=(10729571812004102845/170090671101625617\r\n62, 1783722963324297986/14368518154603374446, 17501112010188129861/3675759154596\r\n382507, 3137760753049249116/1071390751816455865, 9469801924307953143/32436068786\r\n28252477, ... (87)) Error: XDMP-FORESTNOT: Forest ADMIN_MATERIALS_F1 not availab\r\nle: XDMP-FORESTERR: Error in merge of forest ADMIN_MATERIALS_F1: XDMP-MERGESPACE\r\n: Not merging due to disk space limitations, need=1775MB, have=1554MB\r\n/var/opt/MarkLogic/Logs/ErrorLog_2.txt:2012-12-10 12:13:05.591 Critical: Limitin\r\ng merge on forest ADMIN_MATERIALS_F1 to fit disk space\r\n/var/opt/MarkLogic/Logs/ErrorLog_2.txt:2012-12-10 12:43:56.969 Critical: Limitin\r\ng merge on forest ADMIN_MATERIALS_F1 to fit disk space\r\n/var/opt/MarkLogic/Logs/ErrorLog_2.txt:2012-12-10 12:50:14.744 Critical: Limitin\r\ng merge on forest ADMIN_MATERIALS_F1 to fit disk space\r\n/var/opt/MarkLogic/Logs/ErrorLog_2.txt:2012-12-10 12:54:17.071 Critical: Limitin\r\ng merge on forest ADMIN_MATERIALS_F1 to fit disk space\r\n/var/opt/MarkLogic/Logs/ErrorLog_2.txt:2012-12-10 12:57:08.145 Critical: Limitin\r\ng merge on forest ADMIN_MATERIALS_F1 to fit disk space\r\n/var/opt/MarkLogic/Logs/ErrorLog_2.txt:2012-12-10 13:06:36.812 Critical: Limitin\r\ng merge on forest ADMIN_MATERIALS_F1 to fit disk space\r\n/var/opt/MarkLogic/Logs/ErrorLog_2.txt:2012-12-10 13:12:34.172 Critical: Limitin\r\ng merge on forest ADMIN_MATERIALS_F1 to fit disk space\r\n/var/opt/MarkLogic/Logs/ErrorLog_2.txt:2012-12-10 13:14:04.474 Alert: XDMP-FORES\r\nTERR: Error in merge of forest ADMIN_MATERIALS_F1: XDMP-MERGESPACE: Not merging \r\ndue to disk space limitations, need=26060MB, have=4015MB\r\n/var/opt/MarkLogic/Logs/ErrorLog_2.txt:2012-12-10 13:14:04.962 Error: ForestUpda\r\ntePath::clear: ADMIN_MATERIALS_F1 akeys=(7285491509906241280/7958040979026284261\r\n, 9529510859408930461/8452154104880259189, 187929393293812377/127511092531783551\r\n47, 7086602991472987533/10974402521615858352, 3833603770551900031/71530557415147\r\n30592, ... (83)) Error: XDMP-FORESTNOT: Forest ADMIN_MATERIALS_F1 not available:\r\n XDMP-FORESTERR: Error in merge of forest ADMIN_MATERIALS_F1: XDMP-MERGESPACE: N\r\not merging due to disk space limitations, need=26060MB, have=4015MB\r\n/var/opt/MarkLogic/Logs/ErrorLog_2.txt:2012-12-10 13:58:10.316 Alert: XDMP-FORES\r\nTERR: Error in merge of forest ADMIN_MATERIALS_F1: XDMP-MERGESPACE: Not merging \r\ndue to disk space limitations, need=26041MB, have=4057MB\r\n/var/opt/MarkLogic/Logs/ErrorLog_2.txt:2012-12-10 13:58:14.167 Alert: XDMP-FORES\r\nTERR: Error in startup of forest ADMIN_MATERIALS_F1: XDMP-RECOVERY: Recovery err\r\nor on forest ADMIN_MATERIALS_F1 after 1 redo records -- {{fsn=5760072, chksum=0x\r\n255277f0, words=16245}, op=insert, time=1355173936, mfor=1915583355499289044, mt\r\nim=13549169571104170, mfsn=5760072, fmcl=7590269624943423165, fmf=19155833554992\r\n89044, fmfsn=5760072, sk=4847060319590147379} XDMP-FORESTNOT: Forest ADMIN_MATER\r\nIALS_F1 not available: XDMP-FORESTERR: Error in merge of forest ADMIN_MATERIALS_\r\nF1: XDMP-MERGESPACE: Not merging due to disk space limitations, need=26041MB, ha\r\nve=4057MB\r\n/var/opt/MarkLogic/Logs/ErrorLog_2.txt:2012-12-10 14:26:19.524 Error: PooledThre\r\nad::run: XDMP-DISABLED: Service disabled on fsalonga-z620.marklogic.com: Stoppin\r\ng by SIGTERM\r\n\r\n\r\n"}, {"time":"2012-12-12T18:14:01.597451-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Stack captured under debugger. Notice that it starts from frame 5281. All the lower frames show  xdmp::EPosRep::_push_into().\r\n\r\n(gdb) up\r\n#5281 0x000000000221916d in xdmp::EPosRep::_push_into (this=0x7ffec2b0dc30, \r\n    vec=std::vector of length 31677, capacity 32768 = {...}, parentAt=3)\r\n    at PostingIterator.cpp:1409\r\n1409\t      child._push_into(vec,beginAt);\r\n(gdb) up\r\n#5282 0x000000000221916d in xdmp::EPosRep::_push_into (this=0x7ffec2b0dc90, \r\n    vec=std::vector of length 31677, capacity 32768 = {...}, parentAt=0)\r\n    at PostingIterator.cpp:1409\r\n1409\t      child._push_into(vec,beginAt);\r\n(gdb) up\r\n#5283 0x000000000221916d in xdmp::EPosRep::_push_into (this=0x7ffec2b0dd10, \r\n    vec=std::vector of length 31677, capacity 32768 = {...}, \r\n    parentAt=4294967295) at PostingIterator.cpp:1409\r\n1409\t      child._push_into(vec,beginAt);\r\n(gdb) up\r\n#5284 0x000000000222c1ae in xdmp::EPosRep::push_into (this=0x7ffec2b0dd10, \r\n    vec=std::vector of length 31677, capacity 32768 = {...})\r\n    at PostingIterator.h:1288\r\n1288\t  _push_into(vec,UINT_MAX);\r\n(gdb) up\r\n#5285 0x0000000002218fc4 in xdmp::EPosRep::filterEPosByPos (\r\n    this=0x7ffec2b0dd70, v1=std::vector of length 11, capacity 32 = {...}, \r\n    tmp=std::vector of length 738, capacity 24876 = {...}, \r\n    vec=std::vector of length 31677, capacity 32768 = {...})\r\n    at PostingIterator.cpp:1390\r\n1390\t      eposRep.push_into(vec);\r\n(gdb) up\r\n#5286 0x0000000002221e23 in xdmp::AndNotTwoPostingIterators::_positions (\r\n    this=0x4bd9070) at PostingIterator.cpp:3284\r\n3284\t        EPosRep(*pEPos,0).filterEPosByPos(v2,posv1,posv2);\r\n(gdb) up\r\n#5287 0x000000000222bbbd in xdmp::PostingIterator::positions1 (this=0x4bd9070)\r\n    at PostingIterator.h:151\r\n151\t  if (posid!=docid) const_cast<PostingIterator*>(this)->_positions();\r\n(gdb) up\r\n#5288 0x0000000002230027 in xdmp::AndNotTwoPostingIterators::ckps (\r\n    this=0x4bd9070, it1=..., it2=0x4bd8f20) at PostingIterator.cpp:3178\r\n3178\t      return !positions1().empty();\r\n(gdb) up\r\n#5289 0x000000000222172f in xdmp::AndNotTwoPostingIterators::_checkPositions (\r\n    this=0x4bd9070) at PostingIterator.cpp:3193\r\n3193\t  return ckps(*hIt1,&*hIt2);\r\n(gdb) up\r\n#5290 0x000000000222bb7f in xdmp::PostingIterator::checkPositions (\r\n    this=0x4bd9070) at PostingIterator.h:135\r\n135\t  bool checkPositions() { return needPositions? _checkPositions() : true; }\r\n(gdb) up\r\n#5291 0x00000000022319d0 in xdmp::ElementPostingIterator::_checkPositions (\r\n    this=0x4c00b60) at PostingIterator.cpp:4913\r\n4913\t  if (!hIt->checkPositions()) return false;\r\n(gdb) up\r\n#5292 0x000000000222bb7f in xdmp::PostingIterator::checkPositions (\r\n    this=0x4c00b60) at PostingIterator.h:135\r\n135\t  bool checkPositions() { return needPositions? _checkPositions() : true; }\r\n(gdb) up\r\n#5293 0x000000000222d7d0 in xdmp::AndPostingIterator::_checkPositions (\r\n    this=0x50ed800) at PostingIterator.cpp:1484\r\n1484\t    if (!it.checkPositions()) return false;\r\n(gdb) up\r\n#5294 0x000000000222dbb9 in xdmp::AndPostingIterator::curr (this=0x50ed800, \r\n    checkPos=true) at PostingIterator.cpp:1536\r\n1536\t    } else if (!AndPostingIterator::_checkPositions()) {\r\n(gdb) up\r\n#5295 0x000000000221954b in xdmp::AndPostingIterator::next (this=0x50ed800, \r\n    checkPos=true) at PostingIterator.cpp:1548\r\n1548\t  curr(checkPos);\r\n(gdb) up\r\n#5296 0x000000000254f36a in xdmp::StandResultVector::StandResultVector (\r\n    this=0x50b4d10, _hQueryPath=..., _hStand=..., hQuery=..., hOrdering=..., \r\n    _hit=..., _hTracer=..., tc=..., uriKey=0, fragsetKey=0, checkPos=true, \r\n    scoreKind=xdmp::logtfidfScoreKind, qualWeight=1, \r\n    docKind=xdmp::documentDocKind) at StandQuery.cpp:168\r\n168\t        for (PostingIterator& it=*hit; !it.done(); it.next(checkPos)) {\r\n(gdb) up\r\n#5297 0x000000000255178f in xdmp::RelevanceOrderStandResultVector::RelevanceOrderStandResultVector (this=0x50b4d10, _hQueryPath=..., _hStand=..., hQuery=..., \r\n    hOrdering=..., hit=..., hTracer=..., uriKey=0, fragsetKey=0, \r\n    checkPos=true, scoreKind=xdmp::logtfidfScoreKind, qualWeight=1, \r\n    docKind=xdmp::documentDocKind) at StandQuery.cpp:544\r\n544\t  ordinals(hStand->getOrdinals())\r\n(gdb) \r\n#5298 0x0000000002551f8b in xdmp::RelevanceOrderStandResultVectorFuture::_finish (this=0x4c0cb90) at StandQuery.cpp:660\r\n660\t    uriKey,fragsetKey,checkPos,scoreKind,qualWeight,docKind);\r\n(gdb) up\r\n#5299 0x000000000255d568 in xdmp::StandResultVectorFuture::finish (\r\n    this=0x4c0cb90) at StandQuery.h:178\r\n178\t  if (!finished) { _finish(); finished = true; }\r\n(gdb) up\r\n#5300 0x000000000255772e in xdmp::RelevanceOrderLocatorIteratorFuture::_finish\r\n    (this=0x4c0ea90) at StandQuery.cpp:1682\r\n1682\t      futures[i]->finish();\r\n(gdb) up\r\n#5301 0x0000000002135a6a in xdmp::LocatorIteratorFuture::finish (\r\n    this=0x4c0ea90) at Locator.h:420\r\n420\t  if (!finished) { _finish(); finished = true; }\r\n(gdb) up\r\n#5302 0x00000000026d7b3c in xdmp::XDQPServerSession::eval (\r\n    this=0x7ffef80901b0, req=...) at XDQPServer.cpp:1811\r\n1811\t    finish();\r\n(gdb) up\r\n#5303 0x00000000026e734f in xdmp::XDQPServerSession::run (this=0x7ffef80901b0)\r\n    at XDQPServer.cpp:3862\r\n3862\t          eval(*hReq);\r\n(gdb) up\r\n#5304 0x00000000026e8cda in xdmp::XDQPServerSessionTask::run (\r\n    this=0x7ffef82fccb0) at XDQPServer.cpp:4161\r\n4161\t  hSession->run();\r\n(gdb) up\r\n#5305 0x0000000002816645 in svc::PooledThread::run (this=0x7ffefc210800)\r\n    at ThreadPool.cpp:146\r\n146\t      task->run();\r\n"}, {"time":"2012-12-12T18:25:42.769457-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"The database has 286097 documents."}, {"time":"2012-12-12T19:54:09.113277-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Here is the smallest query that reproduces the problem. My doubt is that the cts:not-query() doesn't return positions safely or correctly. For example, see bug 20248 that also shows that (position dependent) cts:highlight doesn't work correctly in the presence of cts:not-query(). Next I am going to validate this theory.\r\n\r\ndeclare namespace lncr = \"http://www.lexis-nexis.com/lncr\";\r\n\r\nlet $query :=\r\n cts:element-query(xs:QName(\"lncr:segment\"),\r\n   cts:and-query((cts:word-query(\"work\"),cts:not-query(cts:word-query(\"network\")))))\r\n\r\nreturn cts:search(fn:doc(), $query)"}, {"time":"2012-12-13T06:44:21.197864-08:00", "updatedBy":{"username":"cjl", "name":"Christopher Lindblad", "email":"cjl@cerisent.com"}, "change":{}, "files":[], "show":true, "comment":"Positions processing is local to a single document.\r\nIf there is a bug in positions processing on a forest you should be able to narrow down to the single document and still be able to replicate the bug.\r\n"}, {"time":"2012-12-13T10:29:52.741655-08:00", "updatedBy":{"username":"cjl", "name":"Christopher Lindblad", "email":"cjl@cerisent.com"}, "change":{}, "files":[], "show":true, "comment":"Can you figure out what document it is?\r\nYou should be able to get the docid from the posting iterator and do a st.getURI(docid) in the StandResultVector constructor stack frame."}, {"time":"2012-12-13T10:34:06.976011-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Actually, I tried it this way:\r\n\r\nlet $qr := cts:term-query(43936)\r\nreturn\r\ncts:search(fn:doc(),$qr)\r\n\r\nBut that returned nothing.\r\n\r\nNow I am reducing the size of the forest because each experiment is too time consuming right now.\r\nHere is the query, I am using to reduce the size of the forest after which I will try your suggestion.\r\n\r\ndeclare namespace lncr = \"http://www.lexis-nexis.com/lncr\";\r\n\r\nlet $query1 :=\r\n cts:element-query(xs:QName(\"lncr:segment\"),cts:word-query(\"network\"))\r\nlet $docs1 := cts:search(fn:doc(), $query1, \"unfiltered\")\r\nlet $query2 :=\r\n cts:element-query(xs:QName(\"lncr:segment\"),cts:word-query(\"work\"))\r\nlet $docs2 := cts:search(fn:doc(), $query2, \"unfiltered\")\r\nlet $docs3 := $docs2[not(.=$docs1)]\r\nfor $d in fn:doc()\r\nwhere $d[not(.= $docs3)]\r\nreturn xdmp:document-delete(fn:document-uri($d))"}, {"time":"2012-12-13T10:36:35.734696-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"One more interesting point to note about this d-node crash is that it occurs only when the query is run against e-node. If we run the query directly against d-node. It doesn't happen. Does this give any hint?"}, {"time":"2012-12-13T10:45:53.33914-08:00", "updatedBy":{"username":"cjl", "name":"Christopher Lindblad", "email":"cjl@cerisent.com"}, "change":{}, "files":[], "show":true, "comment":"The number 43936 looks to me to be a docid, not a uri key.\r\nIn the debugger you should be able to call st.getURI(43936) in the StandResultVector constructor stack frame.\r\n\r\nThe stacks for processing XDQP operations from e-nodes are smaller than the stacks for local processing of XQueries.\r\nThe issue would probably go away if we changed maxPosVecSize to be smaller.\r\nIt's bigger in 5.0 than it is in 4.2.\r\nBut I would rather understand why it recurses so deeply here.\r\n\r\n"}, {"time":"2012-12-13T11:02:37.381482-08:00", "updatedBy":{"username":"cjl", "name":"Christopher Lindblad", "email":"cjl@cerisent.com"}, "change":{}, "files":[], "show":true, "comment":"If you are not in the debugger anymore you can get the uri key from the docid by doing in the stand:\r\ndd if=URIKeys bs=8 skip=43936 count=1 | od -t d8"}, {"time":"2012-12-13T11:50:56.560383-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Getting uri in the debugger do not work once we overrun the stack. I am going to instrument the StandResultVector constructor to keep uri in a variable."}, {"time":"2012-12-13T11:59:29.645419-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Finally located the document, see the URL.\r\n\r\ndeclare namespace lncr = \"http://www.lexis-nexis.com/lncr\";\r\n\r\nlet $query :=\r\n cts:element-query(xs:QName(\"lncr:segment\"),\r\n   cts:and-query((cts:word-query(\"work\"),cts:not-query(cts:word-query(\"network\")))))\r\n\r\nreturn cts:search(fn:doc(\"/lnc/571K-55Y0-004S-N1P8-00000-00.xml\"), $query, \"unfiltered\")\r\n\r\nThe next step will be to blow away all other documents form the database and then try to minimize the document itself."}, {"time":"2012-12-13T12:59:27.89598-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Here is the smallest repro:\r\n\r\nuri: \"/lnc/571K-55Y0-004S-N1P8-00000-00.xml\"\r\n\r\n<lncr:segment xmlns:lncr=\"http://www.lexis-nexis.com/lncr\">\r\nwork\r\n</lncr:segment>\r\n-----------------------------------------------\r\ndeclare namespace lncr = \"http://www.lexis-nexis.com/lncr\";\r\n\r\nlet $query :=\r\n cts:element-query(xs:QName(\"lncr:segment\"),\r\n   cts:and-query((cts:word-query(\"work\"),cts:not-query(cts:word-query(\"network\")))))\r\n\r\nreturn cts:search(fn:doc(\"/lnc/571K-55Y0-004S-N1P8-00000-00.xml\"), $query, \"unfiltered\")\r\n\r\nNext I am working on minimizing the settings on the database to isolate the problem exactly."}, {"time":"2012-12-13T13:38:37.654441-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Chris,\r\n\r\n> The issue would probably go away if we changed maxPosVecSize to be smaller. \r\n\r\nThis is probably true. After I deleted bunch of range indexes, phrase-throughs and phrase-arounds the problem disappears."}, {"time":"2012-12-13T15:49:38.406089-08:00", "updatedBy":{"username":"fsalonga", "name":"Frank Salonga", "email":"franklin.salonga@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Gajanan - to follow up, Lexis says that they see the restart across just about all the forests in their database, so simply deleting the problematic documents is probably not a viable workaround. \r\n\r\nIf it's the case the document could be transformed, and if there was a way for them to find all the affected documents, that'd be more palatable - but still far less so than an actual fix."}, {"time":"2012-12-13T16:21:42.592717-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Ok."}, {"time":"2012-12-14T07:30:53.587308-08:00", "updatedBy":{"username":"cjl", "name":"Christopher Lindblad", "email":"cjl@cerisent.com"}, "change":{}, "files":[], "show":true, "comment":"Please attach the problematic document to this bug."}, {"time":"2012-12-14T10:36:09.243772-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"124058", "paths":["xdmp/branches/b5_0/src/PostingIterator.cpp", "xdmp/branches/b5_0/src/PostingIterator.h"], "affectedBugs":[]}, "comment":"Fix for bug:20247.\n"}, {"time":"2012-12-14T10:52:12.085331-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"124060", "paths":["xdmp/trunk/src/PostingIterator.h", "xdmp/trunk/src/PostingIterator.cpp"], "affectedBugs":[]}, "comment":"Fix for bug:20247.\n"}, {"time":"2012-12-14T10:53:15.514064-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"124064", "paths":["xdmp/branches/b6_0/src/PostingIterator.h", "xdmp/branches/b6_0/src/PostingIterator.cpp"], "affectedBugs":["20284"]}, "comment":"Fix for bug:20284, a clone of bug:20247.\n"}, {"time":"2012-12-14T10:54:32.391977-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"124065", "paths":["xdmp/branches/b4_2/src/PostingIterator.h", "xdmp/branches/b4_2/src/PostingIterator.cpp"], "affectedBugs":["20285"]}, "comment":"Fix for bug:20285, a clone of bug:20247.\n"}, {"time":"2012-12-15T21:15:04.24411-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{"status":{"from":"", "to":"Test"}, "assignTo":{"from":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "to":{"username":"rpolasani", "name":"Raghu Polasani", "email":"raghu.polasani@marklogic.com"}}}, "files":[], "show":true, "comment":"I think an ideal way to deal with this testing will be:\r\nHandover a nightly to support to make sure that the crash is gone. In my tests, I got XDMP-EXPNTREECACHEFULL on e-node after the crash was fixed.\r\nSo support may have to work with them to make sure that they get expected results of the query."}, {"time":"2012-12-15T21:15:04.24411-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{"assignTo":{"from":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "to":{"username":"rpolasani", "name":"Raghu Polasani", "email":"raghu.polasani@marklogic.com"}}}, "files":[], "show":true}, {"time":"2012-12-17T13:45:01.229726-08:00", "updatedBy":{"username":"fsalonga", "name":"Frank Salonga", "email":"franklin.salonga@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Raghu - I've been trying to find a reduced test case for you to use in regression. Unfortunately, when I have a database that contains only the document Gajanan referenced (\"/lnc/571K-55Y0-004S-N1P8-00000-00.xml\"), no crashes. Looking in on the sample forest, there are two stands: 000012bf (27GB) and 000012ca (1.9GB) - unfortunately, it appears that the crash will only happen with the larger stand.\r\n\r\nGajanan - how did you find that one problematic document? If you let us know, then maybe we can find a different one (or set of docs) that Raghu could use for his regression testing."}, {"time":"2012-12-17T14:15:53.802059-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"It keeps changing. Eventually, I gave up trying to reproduce it with single doc."}, {"time":"2012-12-17T22:55:52.769637-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"124485", "paths":["xdmp/branches/b6_0-2/src/PostingIterator.h", "xdmp/branches/b6_0-2/src/PostingIterator.cpp"], "affectedBugs":[]}, "comment":"Fix for bug:20247 (b6_0 clone bug:20284)\n"}, {"time":"2012-12-17T23:06:07.400984-08:00", "updatedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"124489", "paths":["xdmp/branches/b5_0-4/src/PostingIterator.h", "xdmp/branches/b5_0-4/src/PostingIterator.cpp"], "affectedBugs":[]}, "comment":"Fix for bug:20247.\n"}, {"time":"2012-12-19T13:18:39.206895-08:00", "updatedBy":{"username":"rpolasani", "name":"Raghu Polasani", "email":"raghu.polasani@marklogic.com"}, "change":{"assignTo":{"from":{"username":"rpolasani", "name":"Raghu Polasani", "email":"raghu.polasani@marklogic.com"}, "to":{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}}}, "files":[], "show":true}, {"time":"2012-12-19T13:19:56.401844-08:00", "updatedBy":{"username":"rpolasani", "name":"Raghu Polasani", "email":"raghu.polasani@marklogic.com"}, "change":{"tofixin":{"from":"", "to":"6.0-2.1"}}, "files":[], "show":true}, {"time":"2012-12-20T10:49:10.263553-08:00", "updatedBy":{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}, "change":{"status":{"from":"", "to":"Ship"}, "assignTo":{"from":{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}, "to":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}}}, "files":[], "show":true, "comment":"Verified on build 6.0-2.1.20121218 with the same test mentioned in 20284."}, {"time":"2012-12-21T12:29:44.455114-08:00", "updatedBy":{"username":"rpelton", "name":"Rick Pelton", "email":"rick.pelton@marklogic.com"}, "change":{"status":{"from":"", "to":"Closed"}, "assignTo":{"from":{"username":"rpelton", "name":"Rick Pelton", "email":"rick.pelton@marklogic.com"}, "to":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}}}, "files":[], "show":true}], "updatedAt":"2012-12-21T12:29:44.455114-08:00", "fixedAt":"2012-12-15T21:15:04.24411-08:00", "fixedBy":{"username":"gchinchwadkar", "name":"Gajanan Chinchwadkar", "email":"Gajanan.Chinchwadkar@marklogic.com"}, "shippedAt":"2012-12-20T10:49:10.263553-08:00", "shippedBy":{"username":"msrinivasan", "name":"Mahalakshmi Srinivasan", "email":"mahalakshmi.srinivasan@marklogic.com"}, "closedAt":"2012-12-21T12:29:44.455114-08:00", "closedBy":{"username":"rpelton", "name":"Rick Pelton", "email":"rick.pelton@marklogic.com"}, "renderDescriptionAs":"normal", "renderSampleQueryAs":"normal", "renderSampleDataAs":"normal"}