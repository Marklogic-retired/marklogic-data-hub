{"id":20065, "kind":"Bug", "createdAt":"2012-09-20T16:26:38.262985-07:00", "status":"Closed", "title":"barf on valid JSON that contains unicode chars that are invalid in XML", "category":"xdmp", "severity":"Major", "priority":{"level":"5", "title":""}, "submittedBy":{"username":"ebloch", "name":"Eric Bloch", "email":"eric.bloch@marklogic.com"}, "assignTo":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}, "description":"Json string containing:  \r\n      Example\\u0017\\u0017\\n\r\n \r\nThis throws an error when converting to XML :\r\n \r\n[1.0-ml] XDMP-JSONCP: xdmp:from-json(\"{\r\n \"name\": \"connect-assetmanager-handlers&qu...\") -- Unexpected codepoint: 23 on line 249\r\n \r\nIn theory, u with any 4 hex codes after it is valid JSON from my reading of json.org\r\n\r\n", "samplequery":"", "sampledata":"", "version":"7.0-nightly", "tofixin":"7.0-ea1", "fixedin":"7.0-ea1", "platform":"all", "memory":"", "processors":"", "note":"", "subscribers":[{"username":"ebloch", "name":"Eric Bloch", "email":"eric.bloch@marklogic.com"}, {"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, {"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}, {"username":"rpolasani", "name":"Raghu Polasani", "email":"raghu.polasani@marklogic.com"}, {"username":"lling", "name":"Ling Ling", "email":"ling.ling@marklogic.com"}], "attachments":[], "relationships":[{"type":"", "to":""}], "clones":[], "cloneOf":19395, "support":{"headline":"", "supportDescription":"", "publishStatus":"Not Ready", "tickets":[], "customerImpact":{"level":"N/A", "title":""}, "workaround":""}, "tags":["xdmp", "ebloch"], "changeHistory":[{"time":"2012-09-23T09:42:52.896898-07:00", "updatedBy":{"username":"gvaidees", "name":"Ganesh Vaideeswaran", "email":"Ganesh.Vaideeswaran@marklogic.com"}, "change":{"assignTo":{"from":{"username":"gvaidees", "name":"Ganesh Vaideeswaran", "email":"Ganesh.Vaideeswaran@marklogic.com"}, "to":{"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}}}, "files":[], "show":true}, {"time":"2012-09-23T09:42:52.896898-07:00", "updatedBy":{"username":"gvaidees", "name":"Ganesh Vaideeswaran", "email":"Ganesh.Vaideeswaran@marklogic.com"}, "change":{"tofixin":{"from":"", "to":"6.0-2"}}, "files":[], "show":true}, {"time":"2012-09-24T06:38:40.777381-07:00", "updatedBy":{"username":"cjl", "name":"Christopher Lindblad", "email":"cjl@cerisent.com"}, "change":{}, "files":[], "show":true, "comment":"These characters are invalid in XQuery strings."}, {"time":"2012-09-24T09:45:17.639711-07:00", "updatedBy":{"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}, "change":{"status":{"from":"", "to":"Verify"}, "assignTo":{"from":{"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}, "to":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}}}, "files":[], "show":true}, {"time":"2012-09-24T09:45:17.639711-07:00", "updatedBy":{"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}, "change":{"assignTo":{"from":{"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}, "to":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}}}, "files":[], "show":true}, {"time":"2012-09-25T07:37:10.322347-07:00", "updatedBy":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"To clarify there are multiple independant but related issues here which may need different treatment, if any.\r\n\r\n1) This bug identifies a source JSON document with unicode escapes  like \"\\u0017\"\r\nThis document could be created inline , read from a file  , sent from XCC or REST API.\r\nThe literal string \"\\u0017\" is valid in XML and XQuery strings but doesnt mean anything special.\r\nWhen converted from JSON to XML the xdmp:from-json() function tries to parse these escapes into Unicode and the resulting unicode is invalid in either XML or XQuery strings.    \r\nThis currently throws an exception but *could* be handled by (an optional?) conversion of invalid XML/XQuery unicode chars to some replacement character like \"?\"\r\n\r\n2) Related reports from the field include data which is valid UTF8 but invalid XML or XQuery strings.\r\nThese strings cannot be created inline in XQuery as they fail the XQuery syntax or any attempts to bypass the syntax such as codepoints-to-string().\r\nI need to test to validate if these can even make it into MarkLogic in the first place.  I.e. what happens if you post an invalid XML character unescaped and try to read it in an HTTP App server.\r\nWhat happens if you send the data via XCC as a xs:string argument or text file then try to read it in ML.  What happens in the JSON conversion process in InfoStudio.\r\n\r\nIt may be impossible to handle this differently within MarkLogic and instead require the app layer to encode the data differently.\r\n\r\n"}, {"time":"2012-09-25T15:39:08.005632-07:00", "updatedBy":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Some testing and I found our string handling of invalid XML chars is inconsistant.\r\n\r\nI created a file with UTF bytes 1 to 254 (from java).\r\n\r\nTrying to read this with xdmp:document-get() I get a string of 25 bytes long ...  string-to-codepoints($s) reports its the codepoints 1 ... 25 - no errors.\r\nThen I tried by explicitly adding format and encoding , same result.\r\n\r\nThen I tried as a binary :\r\n\r\nlet $b := xdmp:document-get(\"/xxx/unicode.txt\",<options xmlns=\"xdmp:document-get\"\r\n                xmlns:http=\"xdmp:http\">\r\n           <format>binary</format>\r\n           </options> ) ,\r\n           \r\n   $s := xdmp:binary-decode($b/node(),\"utf8\")\r\n   return fn:string-to-codepoints($s)\r\n\r\nThis actually produces a xs:string ($s) with all the codepoints ! (no errors).\r\n\r\nThis shows that there are ways to get invalid unicode chars into XQuery xs:string types ... I am not sure if these should qualify as bugs or features yet.\r\n"}, {"time":"2012-10-01T11:36:29.064153-07:00", "updatedBy":{"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"Due to large blast radius, please fix it in trunk for 6.1-1."}, {"time":"2012-10-01T11:36:29.064153-07:00", "updatedBy":{"username":"rhu", "name":"Ron Hu", "email":"ron.hu@marklogic.com"}, "change":{"tofixin":{"from":"6.0-2", "to":"6.1-ea1"}}, "files":[], "show":true}, {"time":"2012-10-04T14:13:30.238306-07:00", "updatedBy":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"I spoke with Justin and here is our concensious.\r\n\r\n1) As per JSON specs http://www.ietf.org/rfc/rfc4627.txt ... non escaped UTF8 control chars are not valid JSON.\r\nWe will NOT attempt to handle these.  They will be blocked in various places as they currently are when trying to load\r\nin any text or string.\r\n\r\n2) JSON escaped characters which are not valid XML 1.0 characters (namely the control character range 0x00 - 0x1F) will\r\nbe passed through unchanged as text in xdmp:from-json() instead of throwing an exception.   \r\n   E.g   xdmp:from-json(\"ab\\u0017cd\") ->  \"ab\\u0017cd\"\r\n   \r\n3) xdmp:to-json wont need to be changed, but it willl just pass through these escaped characters back to JSON unchanged.\r\nThis means JSON -> XML -> JSON character data will round trip.\r\n\r\n4) Discovered problems with current code which allow non-XML character data in xs:strings will be handled separately as bugs, \r\nfor example the problem with xdmp:document-get() and xdmp:binary-decode as in comments.\r\nThey are separate issues.\r\n"}, {"time":"2012-10-04T14:36:45.188148-07:00", "updatedBy":{"username":"jmakeig", "name":"Justin Makeig", "email":"jmakeig@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"David, are there compatibility issues with this change? Will code that worked before break under your proposal? This is only for conversion from JSON values to next nodes. What about key name to element name mappings? I can't remember where we landed on that."}, {"time":"2012-10-04T15:02:46.940074-07:00", "updatedBy":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"This should have no compatibility issues as previously these JSON escape characters were rejected by throwing an exception. \r\nFor key names, the same conversion would occur which will definitely result in weird looking XML names, but not much weirder then JSON names with control chars.\r\nE.g.\r\n\r\n{\"A\\u0017\" : 1 }  =>   <A_5C_u0017>1</A_5C_u0017>\r\n\r\n"}, {"time":"2012-10-05T13:27:55.201909-07:00", "updatedBy":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"116702", "paths":["xdmp/trunk/src/JSONBuiltins.cpp"], "affectedBugs":[]}, "comment":"bug:19395 Rework xdmp:from-json and xdmp:to-json to accept and preserve JSON unicode escapes that cannot be represented as valid XML 1.0 charactors. \nFor example   { \"x\" : \"\\u0017\" } is now accepted without throwing an exception and produces charactor content literaly \"\\u0017\" which is valid XML (but doesnt mean the control character, in XML).  When round tripped back from xdmp:to-json will preserve the JSON unicode escape syntax of JSON so it returns back the same value.\n"}, {"time":"2012-10-05T13:31:05.632034-07:00", "updatedBy":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "change":{"tofixin":{"from":"6.1-ea1", "to":"6.0-3"}}, "files":[], "show":true}, {"time":"2012-10-05T14:02:57.616245-07:00", "updatedBy":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"116718", "paths":["xdmp/trunk/src/JSONBuiltins.cpp"], "affectedBugs":[]}, "comment":"bug:19395 Fixed a problem in xdmp:to-json (calling quoted()) when quoting strings which have a trailing backslash.\nThis now works correctly:\n\nxdmp:to-json(\nxdmp:from-json(' { \"a\\\\\" : \"\\uD802\\uDC00\\\\x\" } ' ) )\n"}, {"time":"2012-10-05T14:25:50.213799-07:00", "updatedBy":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "change":{"status":{"from":"", "to":"Test"}, "assignTo":{"from":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "to":{"username":"rpolasani", "name":"Raghu Polasani", "email":"raghu.polasani@marklogic.com"}}}, "files":[], "show":true, "comment":"Fixed, checked in, and dev tested in trunk"}, {"time":"2012-10-05T14:25:50.213799-07:00", "updatedBy":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "change":{"assignTo":{"from":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "to":{"username":"rpolasani", "name":"Raghu Polasani", "email":"raghu.polasani@marklogic.com"}}}, "files":[], "show":true}, {"time":"2012-11-12T14:14:31.435901-08:00", "updatedBy":{"username":"dgorbet", "name":"David Gorbet", "email":"David.Gorbet@marklogic.com"}, "change":{"status":{"from":"", "to":"Verify"}, "assignTo":{"from":{"username":"dgorbet", "name":"David Gorbet", "email":"David.Gorbet@marklogic.com"}, "to":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}}}, "files":[], "show":true, "comment":"Apparently you fixed this in Trunk but not in 6.0 branch. We're going to clone this and resolve that clone as fixed to represent the Trunk checkin and leave this as the 6.0 branch bug."}, {"time":"2012-11-12T14:14:31.435901-08:00", "updatedBy":{"username":"dgorbet", "name":"David Gorbet", "email":"David.Gorbet@marklogic.com"}, "change":{"assignTo":{"from":{"username":"dgorbet", "name":"David Gorbet", "email":"David.Gorbet@marklogic.com"}, "to":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}}}, "files":[], "show":true}, {"time":"2012-11-12T14:15:55.777764-08:00", "updatedBy":{"username":"dgorbet", "name":"David Gorbet", "email":"David.Gorbet@marklogic.com"}, "change":{}, "files":[], "show":true, "comment":"This is the bug you can move to test for the Trunk fix for this bug. thx."}, {"time":"2012-11-12T14:15:55.777764-08:00", "updatedBy":{"username":"dgorbet", "name":"David Gorbet", "email":"David.Gorbet@marklogic.com"}, "change":{"tofixin":{"from":"", "to":"6.1-ea1"}}, "files":[], "show":true}, {"time":"2012-11-13T09:50:39.412898-08:00", "updatedBy":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "change":{"status":{"from":"", "to":"Test"}, "assignTo":{"from":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "to":{"username":"rpolasani", "name":"Raghu Polasani", "email":"raghu.polasani@marklogic.com"}}}, "files":[], "show":true, "comment":"Fixed in trunk."}, {"time":"2012-11-13T09:50:39.412898-08:00", "updatedBy":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "change":{"assignTo":{"from":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "to":{"username":"rpolasani", "name":"Raghu Polasani", "email":"raghu.polasani@marklogic.com"}}}, "files":[], "show":true}, {"time":"2012-11-13T12:50:03.962037-08:00", "updatedBy":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"120393", "paths":["xdmp/trunk/src/JSONBuiltins.cpp"], "affectedBugs":[]}, "comment":"bug:20065 Fix regression in quoting / in JSON.  While strictly not necessary much code in the  wild needs / quoted as \\/.\n"}, {"time":"2012-11-13T13:30:18.587718-08:00", "updatedBy":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"120394", "paths":["xdmp/trunk/src/JSONBuiltins.cpp"], "affectedBugs":[]}, "comment":"bug:20065 Fix problem with escaping blackslash when converting to JSON\n"}, {"time":"2012-11-21T01:53:17.413562-08:00", "updatedBy":{"username":"rpolasani", "name":"Raghu Polasani", "email":"raghu.polasani@marklogic.com"}, "change":{"assignTo":{"from":{"username":"rpolasani", "name":"Raghu Polasani", "email":"raghu.polasani@marklogic.com"}, "to":{"username":"lling", "name":"Ling Ling", "email":"ling.ling@marklogic.com"}}}, "files":[], "show":true}, {"time":"2013-01-09T17:02:28.561137-08:00", "updatedBy":{"username":"lling", "name":"Ling Ling", "email":"ling.ling@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"127278", "paths":["qa/trunk/scripts/keys/json_custom_1.xml", "qa/trunk/scripts/tests/json_custom_1.xml", "qa/trunk/scripts/keys/json_basic_1.xml", "qa/trunk/scripts/tests/json_basic_1.xml"], "affectedBugs":[]}, "comment":"bug:20065 fix regression diff due to bug fix"}, {"time":"2013-01-09T17:06:36.552031-08:00", "updatedBy":{"username":"lling", "name":"Ling Ling", "email":"ling.ling@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"127281", "paths":["qa/trunk/scripts/keys/from_json.xml"], "affectedBugs":["20076"]}, "comment":"bug:20065 bug:20076 fix regression diff due to bug fix"}, {"time":"2013-01-10T11:48:06.750706-08:00", "updatedBy":{"username":"lling", "name":"Ling Ling", "email":"ling.ling@marklogic.com"}, "change":{}, "files":[], "show":true, "svn":{"repository":"/project/engsvn", "revision":"127349", "paths":["qa/trunk/scripts/keys/bug20065.xml", "qa/trunk/scripts/tests/bug20065.xml", "qa/trunk/scripts/list/bugs51.txt"], "affectedBugs":[]}, "comment":"bug:20065 add test to regression"}, {"time":"2013-01-10T11:48:20.530276-08:00", "updatedBy":{"username":"lling", "name":"Ling Ling", "email":"ling.ling@marklogic.com"}, "change":{"status":{"from":"", "to":"Ship"}, "assignTo":{"from":{"username":"lling", "name":"Ling Ling", "email":"ling.ling@marklogic.com"}, "to":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}}}, "files":[], "show":true}, {"time":"2013-01-10T11:48:20.530276-08:00", "updatedBy":{"username":"lling", "name":"Ling Ling", "email":"ling.ling@marklogic.com"}, "change":{"assignTo":{"from":{"username":"lling", "name":"Ling Ling", "email":"ling.ling@marklogic.com"}, "to":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}}}, "files":[], "show":true}], "updatedAt":"2013-01-10T11:48:20.530276-08:00", "fixedAt":"2012-11-13T09:50:39.412898-08:00", "fixedBy":{"username":"dlee", "name":"David  Lee", "email":"David.Lee@marklogic.com"}, "shippedAt":"2013-01-10T11:48:20.530276-08:00", "shippedBy":{"username":"lling", "name":"Ling Ling", "email":"ling.ling@marklogic.com"}, "renderDescriptionAs":"normal"}