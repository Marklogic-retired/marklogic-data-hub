{"id":2066, "kind":"Bug", "createdAt":"2005-08-09T14:47:13.803688-07:00", "status":"Closed", "title":"parser bug at codepoint 60", "category":"xdmp", "severity":"Major", "priority":{"level":"5", "title":""}, "submittedBy":{"username":"michael", "name":"Michael Blakeley", "email":"michael.blakeley@marklogic.com"}, "assignTo":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}, "description":"It looks like there's a problem with entity-references to codepoint 60 (the less-than sign). I ran across the problem while loading medline content through XDBC docInsertStream, with repair set to NONE (medline file 02n206, id 89311268), but here are some easier testcases that work in cq on linux and solaris.\n\nThis direct constructor works:\n\n<x>&#60;</x>\n\nSo does this:\n\nxdmp:quote(<x>{codepoints-to-string(60)}</x>)\n\nBut this doesn't:\n\nxdmp:unquote(\"<x>&#60;</x>\")\n\nNor does this:\n\nxdmp:unquote(\"<x>&lt;</x>\")\n\nXDMP-UNEOF: Unexpected end of file at line 1 (document starting at line 1)\n\nOddly, this is fine:\n\nxdmp:unquote(xdmp:quote(\n<x>{codepoints-to-string(60)}</x>\n))\n\nNeedless to say, this is a pretty serious problem. Letting repair work merely masks the problem, and results in data loss.", "samplequery":"", "sampledata":"", "version":"3.0-2", "tofixin":"3.0-3", "fixedin":"N/A", "platform":"solaris", "memory":"", "processors":"", "note":"", "subscribers":[{"username":"michael", "name":"Michael Blakeley", "email":"michael.blakeley@marklogic.com"}], "attachments":[], "clones":[], "cloneOf":"", "support":{"headline":"", "supportDescription":"", "publishStatus":"Not Ready", "tickets":[], "customerImpact":{"level":"N/A", "title":""}, "workaround":""}, "tags":["xdmp", "michael"], "changeHistory":[{"time":"2005-08-09T17:37:28.90306-07:00", "updatedBy":{"username":"rwang", "name":"Rachel Link", "email":"rwang@cerisent.com"}, "change":{"assignTo":{"from":{"username":"rwang", "name":"Rachel Link", "email":"rwang@cerisent.com"}, "to":{"username":"cjl", "name":"Christopher Lindblad", "email":"cjl@cerisent.com"}}}, "files":[], "show":true}, {"time":"2005-08-10T11:19:44.914683-07:00", "updatedBy":{"username":"cjl", "name":"Christopher Lindblad", "email":"cjl@cerisent.com"}, "change":{"status":{"from":"", "to":"Fix"}, "assignTo":{"from":{"username":"cjl", "name":"Christopher Lindblad", "email":"cjl@cerisent.com"}, "to":{"username":"cjl", "name":"Christopher Lindblad", "email":"cjl@cerisent.com"}}}, "files":[], "show":true, "comment":"OK, there is a bug here, but the bug is in describe, and not in the XML parser.\n\nWhat you are running into is the fact that the XQuery language parser turns XML character entities in string literals into characters.\n  \nIn other words\n    \"&lt;\" produces a 1 char string: <\nand \n    \"<foo>&lt;</foo>\" produces a 12 char string: <foo><</foo>\n\nTo get what you want you really  need to do\n    \"&amp;lt;\" produces the 4 char string: &lt;\nand\n    \"<foo>&amp;lt;</foo>\" produces the 15 char string: <foo>&lt;</foo> \n\nThe bug in describe is that it doesn't escape \"&\" in strings.\n Currently:\n    xdmp:describe(\"&amp;lt;\") => \"&lt;\"\nit should be:\n    xdmp:describe(\"&amp;lt;\") => \"&amp;lt;\"\n\nIs this a situation where you're doing string concatenation and sending the result to eval?  If so, I recommend using external variables instead. \n"}, {"time":"2005-08-10T11:36:06.49219-07:00", "updatedBy":{"username":"michael", "name":"Michael Blakeley", "email":"michael.blakeley@marklogic.com"}, "change":{"status":{"from":"", "to":"Closed"}, "assignTo":{"from":{"username":"michael", "name":"Michael Blakeley", "email":"michael.blakeley@marklogic.com"}, "to":{"username":"nobody", "name":"nobody nobody", "email":"nobody@marklogic.com"}}}, "files":[], "show":true, "comment":"Got it - thanks. To recap, the parser turns\n\nxdmp:unquote(\"<x>&lt;</x>\")\n\ninto\n\nxdmp:unquote(\"<x><</x>\")\n\n...which is obviously invalid. The correct syntax is:\n\nxdmp:unquote(\"<x>&amp;lt;</x>\")\n\nPer my original message, I found this while tracking down an exception from an XDBC docInsertStream. The actual problem was the result of a bug in my Java code, but the symptoms were close enough that I thought it was a parser bug."}], "updatedAt":"2005-08-10T11:36:06.49219-07:00", "closedAt":"2005-08-10T11:36:06.49219-07:00", "closedBy":{"username":"michael", "name":"Michael Blakeley", "email":"michael.blakeley@marklogic.com"}, "renderDescriptionAs":"normal"}