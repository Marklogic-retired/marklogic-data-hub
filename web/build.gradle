/*
 * Copyright (c) 2020 MarkLogic Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

import java.util.concurrent.Executors

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id "com.github.node-gradle.node" version "2.2.4"
    id 'org.springframework.boot' version '2.1.3.RELEASE'
}
apply plugin: 'maven-publish'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'


war {
  baseName = 'marklogic-datahub'
  version = "${version}"
  manifest {
    attributes("Implementation-Title": "Web Services and UI",
      "Implementation-Version": version)
  }

}

bootWar {
  baseName "marklogic-datahub"
}

repositories {
    jcenter()
    maven {url 'http://developer.marklogic.com/maven2/'}
}

sourceCompatibility = "1.9"
targetCompatibility = "1.9"

// While 5.4.2 works in core DHF, gradle test --tests doesn't work unless 5.3.2 is used for QS
ext.junitPlatformVersion = '1.3.2'
ext.junitJupiterVersion  = '5.3.2'

dependencies {

    compile group: 'org.springframework.security', name: 'spring-security-core', version: '5.1.4.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-config', version: '5.1.4.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-web', version: '5.1.4.RELEASE'
    compile group: 'org.springframework', name: 'spring-web', version: '5.1.5.RELEASE'
    compile group: 'org.springframework', name: 'spring-webmvc', version: '5.1.5.RELEASE'
    compile group: 'org.springframework', name: 'spring-websocket', version: '5.1.5.RELEASE'
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")

  //https://github.com/jaegertracing/jaeger-client-java/tree/master/jaeger-core
  compile("io.jaegertracing:jaeger-core:0.35.4")
  compile("io.jaegertracing:jaeger-thrift:0.35.4") {
    // We don't want this, we want the version of okhttp3 that Java Client 5.2.0 wants
    exclude group: "com.squareup.okhttp3"
  }

  compile("org.aspectj:aspectjweaver:1.8.9")
    compile("org.springframework:spring-messaging")

  // Similar to the ./marklogic-data-hub core project, have to force use of 1.3.61 here, as otherwise 1.2.x versions
  // are coming onto the classpath, breaking things.
  compile "org.jetbrains.kotlin:kotlin-stdlib:1.3.61"
  compile "org.jetbrains.kotlin:kotlin-stdlib-common:1.3.61"

  // No idea why this is necessary, but when Gradle brings the core project over, it bumps the okhttp3 dependency
  // down from 4.4.0 to 3.x, which then breaks all kinds of stuff. So exclude the two okhttp3 dependencies and
  // then explicitly depending on the desired versions.
  compile(project(":marklogic-data-hub")) {
    exclude group: "com.squareup.okhttp3", module: "okhttp"
    exclude group: "com.squareup.okhttp3", module: "logging-interceptor"
  }
  compile "com.squareup.okhttp3:okhttp:4.4.0"
  compile "com.squareup.okhttp3:logging-interceptor:4.4.0"

  compile("org.apache.commons:commons-csv:1.4")

    // Optional Boot library - see https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html
    compile("org.springframework.boot:spring-boot-devtools")

    // Needed for the Upload feature using mlcp
    compile("com.marklogic:mlcp:10.0.1") {
        exclude group: 'org.apache.avro', module: 'avro-tools'
    }
    //this really needs to go
    compile("com.marklogic:marklogic-spring-web:1.0")

    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    implementation 'org.springframework.session:spring-session-core'
    implementation 'org.springframework.session:spring-session-jdbc'

  testImplementation(testFixtures(project(":marklogic-data-hub")))

    //spring boot test libs
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.3.RELEASE'
    testImplementation 'org.springframework.security:spring-security-test'
    // JUnit Jupiter API and TestEngine implementation
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

    testCompile "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"
    testCompile "io.rest-assured:rest-assured:3.0.3"
    testCompile files(project(':marklogic-data-hub').sourceSets.test.output)
}

evaluationDependsOn(':marklogic-data-hub')
compileTestJava.dependsOn tasks.getByPath(':marklogic-data-hub:testClasses')

configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

node {
  // Version of node to use.
  version = '8.10.0'

  // // Version of npm to use.
  npmVersion = '6.13.1'

  download = true
  distBaseUrl = "${nodeDistributionBaseUrl}"

  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodejs")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.projectDir}")
}

task cleanUI(type: Delete) {
  delete 'src/main/resources/static', 'src/main/resources/templates'
}

task npmInstallUI(type: NpmTask) {
  args = ['install']
  dependsOn tasks.cleanUI
}

task buildUI(type: NpmTask) {
  args = ['run', 'build.prod']
  dependsOn tasks.npmInstallUI
}

task copyUIAssets(type: Copy) {
  from 'dist'
  into 'src/main/resources/static'
  exclude '*.html'
  dependsOn tasks.buildUI
}

task copyIndexHtml(type: Copy) {
  from 'dist'
  into 'src/main/resources/templates'
  include '*.html'
  dependsOn tasks.copyUIAssets
}

task runUI(type: NpmTask) {
  args = ['run', 'start']
  dependsOn tasks.npmInstallUI
}

task runUIMocks(type: NpmTask) {
  args = ['run', 'startmocks']
  dependsOn tasks.npmInstallUI
}

task startRest {
  doFirst {
    def executorService = Executors.newSingleThreadExecutor()
    executorService.submit({
      tasks.findMainClass.execute()
      pid = tasks.bootRun.execute()

    } as Runnable)
  }
}

task e2eLaunch(type: NpmTask) {
  args = ['run', 'e2e']
  dependsOn compileJava, buildUI, startRest
}

task e2eUI {
  dependsOn tasks.e2eLaunch
}

task stopBootrun {
  doLast {
    println("STOPPING Spring Boot")
    def connection = new URL("http://localhost:8080/shutdown").openConnection()
    connection.setRequestMethod("POST")
    connection.connect()
    println 'Shutting down application...'
    println connection.inputStream.text
  }
}

e2eUI.finalizedBy stopBootrun

if (!(
  gradle.startParameter.taskNames*.toLowerCase().contains("bootrun") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("test") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("publishplugins") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("bintrayUpload") ||
    gradle.startParameter.taskNames*.toLowerCase().contains("javadoc") ||
    project.hasProperty('skipui')
)
) {
  processResources.dependsOn copyIndexHtml
}
publishing {
  publications {
    if(!project.hasProperty('skipWeb')) {
      mavenWeb(MavenPublication) {
        group = "com.marklogic"
        version = "${version}"
        from components.web
        artifact bootWar

      }
    }
  }
  repositories {
    maven {
      if(project.hasProperty("mavenUser")) {
        credentials {
          username mavenUser
          password mavenPassword
        }
      }
      url publishUrl
    }
  }
}

//removing test dependency on e2e tests
//test.dependsOn e2eUI

bootRun {
  environment 'spring.profiles.active', 'dev'
}

springBoot {
  // not in spring boot 2 executable = true
  mainClassName = "com.marklogic.hub.web.WebApplication"
  buildInfo {
    properties {
      group = "marklogic"
      name = "marklogic-datahub"
      version = "${version}"
    }
  }
}

test {
  useJUnitPlatform()
}
