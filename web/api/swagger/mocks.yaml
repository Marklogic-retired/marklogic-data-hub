---
swagger: "2.0"
info:
  description: "This is a sample of a QuickStart DataHub Swagger doucment defining\
    \ endpoints to be mocked"
  version: "1.0.0"
  title: "QuickStart DataHub API"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:4200"
basePath: "/api"
tags: []
schemes:
- "http"
paths:
  /flows:
    get:
      tags:
      - "flows"
      summary: "Returns all flows"
      description: "Returns all flows"
      operationId: "getFlows"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/flow"
      x-swagger-router-controller: "Flows"
    post:
      tags:
      - "flows"
      summary: "Create flow"
      description: ""
      operationId: "createFlow"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Flow to create"
        required: true
        schema:
          $ref: "#/definitions/flow"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/flow"
        400:
          description: "Invalid parameter supplied"
      x-swagger-router-controller: "Flows"
  /flows/{flowId}:
    get:
      tags:
      - "flows"
      summary: "Find flow by Id"
      description: "...."
      operationId: "getFlow"
      produces:
      - "application/json"
      parameters:
      - name: "flowId"
        in: "path"
        description: "Id of flow to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/flow"
      x-swagger-router-controller: "Flows"
    put:
      tags:
      - "flows"
      summary: "Update flow by Id"
      description: ""
      operationId: "updateFlow"
      produces:
      - "application/json"
      parameters:
      - name: "flowId"
        in: "path"
        description: "Id of flow to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated flow"
        required: true
        schema:
          $ref: "#/definitions/flow"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid parameter supplied"
        404:
          description: "flow not found"
      x-swagger-router-controller: "Flows"
    delete:
      tags:
      - "flows"
      summary: "Delete flow by Id"
      description: ""
      operationId: "deleteFlow"
      produces:
      - "application/json"
      parameters:
      - name: "flowId"
        in: "path"
        description: "Id of flow to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid parameter supplied"
        404:
          description: "Flow not found"
      x-swagger-router-controller: "Flows"
  /flows/{flowId}/run:
    post:
      tags:
      - "flows"
      summary: "Run a Flow"
      description: ""
      operationId: "runFlow"
      produces:
      - "application/json"
      parameters:
      - name: "flowId"
        in: "path"
        description: "Id of flow to run"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/step"
        400:
          description: "Invalid parameter supplied"
        404:
          description: "Step not found"
      x-swagger-router-controller: "Flows"
  /flows/{flowId}/stop:
    post:
      tags:
      - "flows"
      summary: "Stop a Flow"
      description: ""
      operationId: "stopFlow"
      produces:
      - "application/json"
      parameters:
      - name: "flowId"
        in: "path"
        description: "Id of flow to stop"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/step"
        400:
          description: "Invalid parameter supplied"
        404:
          description: "Step not found"
      x-swagger-router-controller: "Flows"
  /flows/{flowId}/steps:
    get:
      tags:
      - "steps"
      summary: "Get all Steps for a Flow"
      description: "...."
      operationId: "getFlowSteps"
      produces:
      - "application/json"
      parameters:
      - name: "flowId"
        in: "path"
        description: "Id of flow to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/step"
      x-swagger-router-controller: "Steps"
    post:
      tags:
      - "steps"
      summary: "Create a step within a Flow"
      description: ""
      operationId: "createFlowStep"
      produces:
      - "application/json"
      parameters:
      - name: "flowId"
        in: "path"
        description: "Id of flow"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Step to create"
        required: true
        schema:
          $ref: "#/definitions/step"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/step"
        400:
          description: "Invalid parameter supplied"
      x-swagger-router-controller: "Steps"
  /flows/{flowId}/steps/{stepId}:
    put:
      tags:
      - "steps"
      summary: "Update step by Id"
      description: ""
      operationId: "updateFlowStep"
      produces:
      - "application/json"
      parameters:
      - name: "flowId"
        in: "path"
        description: "Id of flow to be updated"
        required: true
        type: "string"
      - name: "stepId"
        in: "path"
        description: "Id of step to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated step"
        required: true
        schema:
          $ref: "#/definitions/step"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid parameter supplied"
        404:
          description: "flow not found"
      x-swagger-router-controller: "Steps"
    delete:
      tags:
      - "steps"
      summary: "Delete step by Id"
      description: ""
      operationId: "deleteFlowStep"
      produces:
      - "application/json"
      parameters:
      - name: "flowId"
        in: "path"
        description: "Id of flow to be fetched"
        required: true
        type: "string"
      - name: "stepId"
        in: "path"
        description: "Id of step to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid parameter supplied"
        404:
          description: "Flow not found"
      x-swagger-router-controller: "Steps"
  /collections/{databaseId}:
    get:
      tags:
      - "collections"
      summary: "Get all Collections for a Database"
      description: "...."
      operationId: "getDatabaseCollections"
      produces:
      - "application/json"
      parameters:
      - name: "databaseId"
        in: "path"
        description: "Id of database to get collections from"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
      x-swagger-router-controller: "Collections"
definitions:
  flow:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Id of a flow"
      name:
        type: "string"
        description: "Name of a flow"
      description:
        type: "string"
        description: "Description of flow"
      batchSize:
        type: "integer"
        format: "int64"
        description: "The # of documents to process in a single batch"
        minimum: 0
      threadCount:
        type: "integer"
        format: "int64"
        description: ""
        minimum: 0
      options:
        type: "object"
        description: "TBD: Likely metadata "
        properties: {}
      steps:
        type: "array"
        description: "Array of summary Step objects associated with this Flow"
        items:
          type: "object"
          properties: {}
      jobs:
        type: "array"
        description: "Array of Job IDs generated by this flow"
        items:
          type: "string"
      latestJob:
        type: "object"
        description: "Data related to the last job run for this Flow"
        properties: {}
      isValid:
        type: "boolean"
        description: "Boolean flag used for UI to tell whether all Steps associated\
          \ with this Flow are valid, making the Flow valid"
      isRunning:
        type: "boolean"
        description: "(shouldn't this be on the job level? Flows don't run)"
      version:
        type: "integer"
        format: "int64"
        description: "(Is this valid?)"
        minimum: 0
    example:
      latestJob: "{}"
      isRunning: true
      jobs:
      - "jobs"
      - "jobs"
      isValid: true
      name: "name"
      options: "{}"
      description: "description"
      threadCount: 0
      id: "id"
      batchSize: 0
      steps:
      - "{}"
      - "{}"
      version: 0
  step:
    type: "object"
    required:
    - "name"
    - "type"
    properties:
      id:
        type: "string"
        description: "Id of a step"
      name:
        type: "string"
        description: "Name of a step"
      description:
        type: "string"
        description: "Description of a step"
      type:
        type: "string"
        description: "Type of a step"
        enum:
        - "ingestion"
        - "mapping"
        - "mastering"
        - "custom"
      sourceDatabase:
        type: "string"
      targetDatabase:
        type: "string"
      isValid:
        type: "boolean"
        description: "Boolean flag to tell whether a Step is valid"
      isRunning:
        type: "boolean"
        description: "Boolean flag to tell whether a Step is running"
      config:
        type: "object"
        properties: {}
      language:
        type: "string"
      version:
        type: "string"
      customHook:
        $ref: "#/definitions/customHook"
    xml:
      name: "Process"
    example:
      sourceDatabase: "sourceDatabase"
      isRunning: true
      isValid: true
      customHook:
        runBefore: true
        module: "module"
        parameters: "{}"
        user: "user"
      name: "name"
      description: "description"
      language: "language"
      id: "id"
      type: "ingestion"
      config: "{}"
      version: "version"
      targetDatabase: "targetDatabase"
  job:
    type: "object"
    required:
    - "flowId"
    - "id"
    properties:
      id:
        type: "string"
        description: "Id of the job"
      flowId:
        type: "string"
        description: "Id of the flow associated with this job"
      startTime:
        type: "string"
        format: "date-time"
        description: "Timestamp job started"
      endTime:
        type: "string"
        format: "date-time"
        description: "Timestamp job started"
      status:
        type: "string"
        description: "Status of a job"
        enum:
        - "running"
        - "canceled"
        - "failed"
        - "completed"
      successfulEvents:
        type: "integer"
        format: "int64"
        minimum: 0
      failedEvents:
        type: "integer"
        format: "int64"
        minimum: 0
    xml:
      name: "Process"
  customHook:
    type: "object"
    properties:
      module:
        type: "string"
      parameters:
        type: "object"
        properties: {}
      user:
        type: "string"
      runBefore:
        type: "boolean"
    xml:
      name: "Tag"
    example:
      runBefore: true
      module: "module"
      parameters: "{}"
      user: "user"
externalDocs:
  description: "Find out more about MarkLogic Data Hub"
  url: "https://github.com/marklogic/marklogic-data-hub"
