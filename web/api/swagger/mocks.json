{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample of a QuickStart DataHub Swagger doucment defining endpoints to be mocked",
    "version": "1.0.0",
    "title": "QuickStart DataHub API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [],
  "schemes": [
    "http"
  ],
  "host": "localhost:4200",
  "basePath": "/api",
  "paths": {
    "/flows": {
      "get": {
        "tags": [
          "flows"
        ],
        "summary": "Returns all flows",
        "description": "Returns all flows",
        "operationId": "getFlows",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page # of the paginated data",
            "type": "string"
          },
          {
            "name": "length",
            "in": "query",
            "description": "Length paginated data",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/flow"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "flows"
        ],
        "summary": "Create flow",
        "description": "",
        "operationId": "createFlow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Flow to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/flow"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/flow"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/flows/{flowId}": {
      "get": {
        "tags": [
          "flows"
        ],
        "summary": "Find flow by Id",
        "description": "....",
        "operationId": "getFlow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "flowId",
            "in": "path",
            "description": "Id of flow to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/flow"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "flows"
        ],
        "summary": "Update flow by Id",
        "description": "",
        "operationId": "updateFlow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "flowId",
            "in": "path",
            "description": "Id of flow to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated flow",
            "required": true,
            "schema": {
              "$ref": "#/definitions/flow"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "flows"
        ],
        "summary": "Delete flow by Id",
        "description": "",
        "operationId": "deleteFlow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "flowId",
            "in": "path",
            "description": "Id of flow to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/flows/{flowId}/run": {
      "post": {
        "tags": [
          "flows"
        ],
        "summary": "Run a Flow",
        "description": "",
        "operationId": "runFlow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "flowId",
            "in": "path",
            "description": "Id of flow to run",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Array of Step ids to run, no body if all are being executed",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/flow"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/flows/{flowId}/stop": {
      "post": {
        "tags": [
          "flows"
        ],
        "summary": "Stop a Flow",
        "description": "",
        "operationId": "stopFlow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "flowId",
            "in": "path",
            "description": "Id of flow to stop",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/flow"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/flows/{flowId}/steps": {
      "get": {
        "tags": [
          "steps"
        ],
        "summary": "Get all Steps for a Flow",
        "description": "....",
        "operationId": "getFlowSteps",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "flowId",
            "in": "path",
            "description": "Id of flow to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/step"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "steps"
        ],
        "summary": "Create a step within a Flow",
        "description": "",
        "operationId": "createFlowStep",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "flowId",
            "in": "path",
            "description": "Id of flow",
            "required": true,
            "type": "string"
          },
          {
            "name": "stepOrder",
            "in": "query",
            "description": "The location in the Array of Steps this new Step will be inserted.  Defaults to end of the Array, if not set.",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Step to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/step"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/step"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/flows/{flowId}/steps/{stepId}": {
      "put": {
        "tags": [
          "steps"
        ],
        "summary": "Update step by Id",
        "description": "",
        "operationId": "updateFlowStep",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "flowId",
            "in": "path",
            "description": "Id of flow to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "stepId",
            "in": "path",
            "description": "Id of step to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated step",
            "required": true,
            "schema": {
              "$ref": "#/definitions/step"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "steps"
        ],
        "summary": "Delete step by Id",
        "description": "",
        "operationId": "deleteFlowStep",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "flowId",
            "in": "path",
            "description": "Id of flow to be fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "stepId",
            "in": "path",
            "description": "Id of step to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/collections/{databaseId}": {
      "get": {
        "tags": [
          "collections"
        ],
        "summary": "Get all Collections for a Database",
        "description": "....",
        "operationId": "getDatabaseCollections",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "databaseId",
            "in": "path",
            "description": "Id of database to get collections from",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get a Job by Id",
        "description": "....",
        "operationId": "getJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Id of Job to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/job"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "flow": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of a flow"
        },
        "name": {
          "type": "string",
          "description": "Name of a flow"
        },
        "description": {
          "type": "string",
          "description": "Description of flow"
        },
        "batchSize": {
          "type": "integer",
          "description": "The # of documents to process in a single batch",
          "minimum": 0,
          "format": "int64"
        },
        "threadCount": {
          "type": "integer",
          "description": "",
          "minimum": 0,
          "format": "int64"
        },
        "options": {
          "description": "TBD: Likely metadata ",
          "type": "object"
        },
        "steps": {
          "type": "array",
          "description": "Array of summary Step objects associated with this Flow",
          "items": {
            "type": "object"
          }
        },
        "jobs": {
          "type": "array",
          "description": "Array of Job IDs generated by this flow",
          "items": {
            "type": "string"
          }
        },
        "latestJob": {
          "description": "Data related to the last job run for this Flow",
          "type": "object"
        },
        "isValid": {
          "type": "boolean",
          "description": "Boolean flag used for UI to tell whether all Steps associated with this Flow are valid, making the Flow valid"
        },
        "version": {
          "type": "integer",
          "description": "version of the flow, incremented with each update",
          "minimum": 0,
          "format": "int64"
        }
      }
    },
    "step": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of a step"
        },
        "name": {
          "type": "string",
          "description": "Name of a step"
        },
        "description": {
          "type": "string",
          "description": "Description of a step"
        },
        "type": {
          "type": "string",
          "description": "Type of a step",
          "enum": [
            "ingest",
            "mapping",
            "mastering",
            "custom"
          ]
        },
        "sourceDatabase": {
          "type": "string"
        },
        "targetDatabase": {
          "type": "string"
        },
        "isValid": {
          "type": "boolean",
          "description": "Boolean flag to tell whether a Step is valid"
        },
        "options": {
          "type": "object"
        },
        "version": {
          "type": "string"
        },
        "customHook": {
          "$ref": "#/definitions/customHook"
        }
      }
    },
    "job": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the job"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp job started"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp job started"
        },
        "output": {
          "type": "array",
          "description": "Array with Job output info (not required for UI atm - skip implementation)",
          "items": {
            "type": "string"
          }
        },
        "stepId": {
          "type": "string",
          "description": "ID of the step being processed"
        },
        "stepName": {
          "type": "string",
          "description": "Name of the step being processed"
        },
        "stepRunningPercent": {
          "type": "integer",
          "minimum": 0,
          "maximum": 100,
          "format": "int64",
          "description": "integer representing percent complete, null if not running"
        },
        "status": {
          "type": "string",
          "description": "Status of the job",
          "enum": [
            "canceled",
            "failed",
            "running",
            "finished-with-errors",
            "completed"
          ]
        },
        "successfulEvents": {
          "type": "integer",
          "description": "# of documents successfully processed",
          "minimum": 0,
          "format": "int64"
        },
        "failedEvents": {
          "type": "integer",
          "description": "# of documents that failed to process",
          "minimum": 0,
          "format": "int64"
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "customHook": {
      "type": "object",
      "properties": {
        "module": {
          "type": "string"
        },
        "parameters": {
          "type": "object"
        },
        "user": {
          "type": "string"
        },
        "runBefore": {
          "type": "boolean"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about MarkLogic Data Hub",
    "url": "https://github.com/marklogic/marklogic-data-hub"
  }
}
