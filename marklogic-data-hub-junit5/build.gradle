plugins {
    id 'java-library'
    id 'maven-publish'

    id "io.snyk.gradle.plugin.snykplugin" version "0.4"
}

group = 'com.marklogic'

// See https://github.com/snyk/gradle-plugin for docs
snyk {
    severity = 'medium'
    api = snykToken
    autoDownload = true
    autoUpdate = true
}

dependencies {
    api "org.junit.jupiter:junit-jupiter:5.7.2"
    api "org.slf4j:slf4j-api:1.7.31"
    api "org.springframework:spring-test:5.3.9"
    api project(":marklogic-data-hub")

    api "com.marklogic:marklogic-unit-test-client:1.1.0"

    testImplementation(testFixtures(project(":marklogic-data-hub")))
    testImplementation "ch.qos.logback:logback-classic:1.2.4"
}

test {
    useJUnitPlatform()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

Node pomCustomizations = new NodeBuilder().project {
    name 'marklogic-data-hub-junit5'
    packaging 'jar'
    textdescription 'Supports testing Data Hub applications via JUnit5'
    url 'https://github.com/marklogic/marklogic-data-hub'
    scm {
        url 'git@github.com:marklogic/marklogic-data-hub.git'
        connection 'scm:git@github.com:marklogic/marklogic-data-hub.git'
        developerConnection 'scm:git@github.com:marklogic/marklogic-data-hub.git'
    }
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    developers {
        developer {
            name 'MarkLogic'
            email 'java-sig@marklogic.com'
            organization 'MarkLogic'
            organizationUrl 'https://www.marklogic.com'
        }
        developer {
            name 'MarkLogic Github Contributors'
            email 'general@developer.marklogic.com'
            organization 'Github Contributors'
            organizationUrl 'https://github.com/marklogic/marklogic-data-hub/graphs/contributors'
        }
    }
}

publishing {
    publications {
        mainJava(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().appendNode('description', pomCustomizations.textdescription.text())
                asNode().append(pomCustomizations.developers)
                asNode().append(pomCustomizations.name)
                asNode().append(pomCustomizations.packaging)
                asNode().append(pomCustomizations.url)
                asNode().append(pomCustomizations.scm)
                asNode().append(pomCustomizations.licenses)
            }
        }
        sourcesJava(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            if (project.hasProperty("mavenUser")) {
                credentials {
                    username mavenUser
                    password mavenPassword
                }
            }
            url publishUrl
        }
    }
}
